
MTP_LAB_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800469c  0800469c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800469c  0800469c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800469c  0800469c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080046a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002330  200000cc  08004770  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023fc  08004770  000223fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000837a  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d7  00000000  00000000  00028476  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002191d  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000700a  00000000  00000000  0004c425  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca851  00000000  00000000  0005342f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011dc80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d4c  00000000  00000000  0011dcfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800463c 	.word	0x0800463c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d0 	.word	0x200000d0
 80001d0:	0800463c 	.word	0x0800463c

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__gedf2>:
 800054c:	f04f 3cff 	mov.w	ip, #4294967295
 8000550:	e006      	b.n	8000560 <__cmpdf2+0x4>
 8000552:	bf00      	nop

08000554 <__ledf2>:
 8000554:	f04f 0c01 	mov.w	ip, #1
 8000558:	e002      	b.n	8000560 <__cmpdf2+0x4>
 800055a:	bf00      	nop

0800055c <__cmpdf2>:
 800055c:	f04f 0c01 	mov.w	ip, #1
 8000560:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000570:	bf18      	it	ne
 8000572:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000576:	d01b      	beq.n	80005b0 <__cmpdf2+0x54>
 8000578:	b001      	add	sp, #4
 800057a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800057e:	bf0c      	ite	eq
 8000580:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000584:	ea91 0f03 	teqne	r1, r3
 8000588:	bf02      	ittt	eq
 800058a:	ea90 0f02 	teqeq	r0, r2
 800058e:	2000      	moveq	r0, #0
 8000590:	4770      	bxeq	lr
 8000592:	f110 0f00 	cmn.w	r0, #0
 8000596:	ea91 0f03 	teq	r1, r3
 800059a:	bf58      	it	pl
 800059c:	4299      	cmppl	r1, r3
 800059e:	bf08      	it	eq
 80005a0:	4290      	cmpeq	r0, r2
 80005a2:	bf2c      	ite	cs
 80005a4:	17d8      	asrcs	r0, r3, #31
 80005a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005aa:	f040 0001 	orr.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b8:	d102      	bne.n	80005c0 <__cmpdf2+0x64>
 80005ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005be:	d107      	bne.n	80005d0 <__cmpdf2+0x74>
 80005c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	d1d6      	bne.n	8000578 <__cmpdf2+0x1c>
 80005ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ce:	d0d3      	beq.n	8000578 <__cmpdf2+0x1c>
 80005d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <__aeabi_cdrcmple>:
 80005d8:	4684      	mov	ip, r0
 80005da:	4610      	mov	r0, r2
 80005dc:	4662      	mov	r2, ip
 80005de:	468c      	mov	ip, r1
 80005e0:	4619      	mov	r1, r3
 80005e2:	4663      	mov	r3, ip
 80005e4:	e000      	b.n	80005e8 <__aeabi_cdcmpeq>
 80005e6:	bf00      	nop

080005e8 <__aeabi_cdcmpeq>:
 80005e8:	b501      	push	{r0, lr}
 80005ea:	f7ff ffb7 	bl	800055c <__cmpdf2>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	bf48      	it	mi
 80005f2:	f110 0f00 	cmnmi.w	r0, #0
 80005f6:	bd01      	pop	{r0, pc}

080005f8 <__aeabi_dcmpeq>:
 80005f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005fc:	f7ff fff4 	bl	80005e8 <__aeabi_cdcmpeq>
 8000600:	bf0c      	ite	eq
 8000602:	2001      	moveq	r0, #1
 8000604:	2000      	movne	r0, #0
 8000606:	f85d fb08 	ldr.w	pc, [sp], #8
 800060a:	bf00      	nop

0800060c <__aeabi_dcmplt>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff ffea 	bl	80005e8 <__aeabi_cdcmpeq>
 8000614:	bf34      	ite	cc
 8000616:	2001      	movcc	r0, #1
 8000618:	2000      	movcs	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmple>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffe0 	bl	80005e8 <__aeabi_cdcmpeq>
 8000628:	bf94      	ite	ls
 800062a:	2001      	movls	r0, #1
 800062c:	2000      	movhi	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmpge>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffce 	bl	80005d8 <__aeabi_cdrcmple>
 800063c:	bf94      	ite	ls
 800063e:	2001      	movls	r0, #1
 8000640:	2000      	movhi	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmpgt>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffc4 	bl	80005d8 <__aeabi_cdrcmple>
 8000650:	bf34      	ite	cc
 8000652:	2001      	movcc	r0, #1
 8000654:	2000      	movcs	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_d2f>:
 800065c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000660:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000664:	bf24      	itt	cs
 8000666:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800066a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800066e:	d90d      	bls.n	800068c <__aeabi_d2f+0x30>
 8000670:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000674:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000678:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800067c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000680:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000684:	bf08      	it	eq
 8000686:	f020 0001 	biceq.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000690:	d121      	bne.n	80006d6 <__aeabi_d2f+0x7a>
 8000692:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000696:	bfbc      	itt	lt
 8000698:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800069c:	4770      	bxlt	lr
 800069e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006a6:	f1c2 0218 	rsb	r2, r2, #24
 80006aa:	f1c2 0c20 	rsb	ip, r2, #32
 80006ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	bf18      	it	ne
 80006b8:	f040 0001 	orrne.w	r0, r0, #1
 80006bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006c8:	ea40 000c 	orr.w	r0, r0, ip
 80006cc:	fa23 f302 	lsr.w	r3, r3, r2
 80006d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006d4:	e7cc      	b.n	8000670 <__aeabi_d2f+0x14>
 80006d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006da:	d107      	bne.n	80006ec <__aeabi_d2f+0x90>
 80006dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006e0:	bf1e      	ittt	ne
 80006e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006ea:	4770      	bxne	lr
 80006ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <AutoRearmTrigger>:
int valBelowThreshold(void);
int valEqualsThreshold(void);
int evaluateEnd(void);
static int manageTrigEvent(void);

void AutoRearmTrigger(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	bAutoRearmAfterOVF=0;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <AutoRearmTrigger+0x28>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	g_internalTrigState = WAITING_LEVEL_BEFORE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <AutoRearmTrigger+0x2c>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
	g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <AutoRearmTrigger+0x30>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2201      	movs	r2, #1
 8000712:	619a      	str	r2, [r3, #24]
	g_nbRecords = 0;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <AutoRearmTrigger+0x34>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	20000120 	.word	0x20000120
 8000728:	200000ec 	.word	0x200000ec
 800072c:	200000e8 	.word	0x200000e8
 8000730:	20000118 	.word	0x20000118

08000734 <SetTriggerOverflow>:

void SetTriggerOverflow(int overflow) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	g_overflow = overflow;
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <SetTriggerOverflow+0x40>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
	if( (overflow == 0) && (bAutoRearmAfterOVF==1) ) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d111      	bne.n	800076c <SetTriggerOverflow+0x38>
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <SetTriggerOverflow+0x44>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10d      	bne.n	800076c <SetTriggerOverflow+0x38>
		if ( g_binternalIgnoreTrig ) {
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <SetTriggerOverflow+0x48>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <SetTriggerOverflow+0x34>
			// Do not immediately rearm the trigger in that case, but wait for the buffer to be completely empty
			g_internalTrigState = WAITING_BUFFER_EMPTY;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <SetTriggerOverflow+0x4c>)
 800075a:	2202      	movs	r2, #2
 800075c:	601a      	str	r2, [r3, #0]
			g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <SetTriggerOverflow+0x50>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2201      	movs	r2, #1
 8000764:	619a      	str	r2, [r3, #24]
		else {
			// It's now time to rearm the trigger after OVF stop
			AutoRearmTrigger();
		}
	}
}
 8000766:	e001      	b.n	800076c <SetTriggerOverflow+0x38>
			AutoRearmTrigger();
 8000768:	f7ff ffc8 	bl	80006fc <AutoRearmTrigger>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000011c 	.word	0x2000011c
 8000778:	20000120 	.word	0x20000120
 800077c:	200000f8 	.word	0x200000f8
 8000780:	200000ec 	.word	0x200000ec
 8000784:	200000e8 	.word	0x200000e8

08000788 <AddingNewRecord>:

// Inform the trigger module that a new record is being traced (useful for stop after N)
void AddingNewRecord(void) {
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  g_nbRecords++;
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <AddingNewRecord+0x18>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <AddingNewRecord+0x18>)
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000118 	.word	0x20000118

080007a4 <AcqConfigureTrigger>:

// Interpret the trigger part of the snapshot trace header.
// To call at least once by recording session
void AcqConfigureTrigger(volatile TraceHeaderTriggerT *pTrigConfig) {
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	g_pTriggerConf = pTrigConfig;
 80007ac:	4a55      	ldr	r2, [pc, #340]	; (8000904 <AcqConfigureTrigger+0x160>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]

	g_internalTrigState = INTERNAL_STATE_STOPPED;
 80007b2:	4b55      	ldr	r3, [pc, #340]	; (8000908 <AcqConfigureTrigger+0x164>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	601a      	str	r2, [r3, #0]
	// Process some fields once and for all for better runtime performance
	// (type conversion)
	if( pTrigConfig->mode == 0 ) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d103      	bne.n	80007c8 <AcqConfigureTrigger+0x24>
		// No trigger configured (= immediate start + never stop)
		g_internalTrigMode = MODE_NO_TRIGGER;
 80007c0:	4b52      	ldr	r3, [pc, #328]	; (800090c <AcqConfigureTrigger+0x168>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e00a      	b.n	80007de <AcqConfigureTrigger+0x3a>
	} else {
		if( pTrigConfig->nPreTrig == 0 ) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <AcqConfigureTrigger+0x34>
			g_internalTrigMode = MODE_TRIGGER_NO_PRETRIG;
 80007d0:	4b4e      	ldr	r3, [pc, #312]	; (800090c <AcqConfigureTrigger+0x168>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e002      	b.n	80007de <AcqConfigureTrigger+0x3a>
		} else {
			g_internalTrigMode = MODE_TRIGGER_WITH_PRETRIG;
 80007d8:	4b4c      	ldr	r3, [pc, #304]	; (800090c <AcqConfigureTrigger+0x168>)
 80007da:	2202      	movs	r2, #2
 80007dc:	601a      	str	r2, [r3, #0]
		}
	}
	if( pTrigConfig->bIgnoreTrig == 1 ) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a1b      	ldr	r3, [r3, #32]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d103      	bne.n	80007ee <AcqConfigureTrigger+0x4a>
		g_binternalIgnoreTrig = 1;
 80007e6:	4b4a      	ldr	r3, [pc, #296]	; (8000910 <AcqConfigureTrigger+0x16c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e002      	b.n	80007f4 <AcqConfigureTrigger+0x50>
	}
	else {
		g_binternalIgnoreTrig = 0;
 80007ee:	4b48      	ldr	r3, [pc, #288]	; (8000910 <AcqConfigureTrigger+0x16c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	}

	if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_8BIT ) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d109      	bne.n	8000810 <AcqConfigureTrigger+0x6c>
		g_internalType = SNP_TRC_DATA_ACCESS_8BIT;
 80007fc:	4b45      	ldr	r3, [pc, #276]	; (8000914 <AcqConfigureTrigger+0x170>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		g_threshold_s8 = (signed char)g_pTriggerConf->threshold;
 8000802:	4b40      	ldr	r3, [pc, #256]	; (8000904 <AcqConfigureTrigger+0x160>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	b25a      	sxtb	r2, r3
 800080a:	4b43      	ldr	r3, [pc, #268]	; (8000918 <AcqConfigureTrigger+0x174>)
 800080c:	701a      	strb	r2, [r3, #0]
 800080e:	e069      	b.n	80008e4 <AcqConfigureTrigger+0x140>
	}
	else if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_16BIT ) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d109      	bne.n	800082c <AcqConfigureTrigger+0x88>
		g_internalType = SNP_TRC_DATA_ACCESS_16BIT;
 8000818:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <AcqConfigureTrigger+0x170>)
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]
		g_threshold_s16 = (signed short)g_pTriggerConf->threshold;
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <AcqConfigureTrigger+0x160>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	b21a      	sxth	r2, r3
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <AcqConfigureTrigger+0x178>)
 8000828:	801a      	strh	r2, [r3, #0]
 800082a:	e05b      	b.n	80008e4 <AcqConfigureTrigger+0x140>
#ifdef STM32F0XX
		// On Cortex M0, the LDRH instruction requires to be 16-bits aligned
		g_pTriggerConf->address &= 0xFFFFFFFEUL;
#endif
	}
	else if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_32BIT ) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d109      	bne.n	8000848 <AcqConfigureTrigger+0xa4>
		g_internalType = SNP_TRC_DATA_ACCESS_32BIT;
 8000834:	4b37      	ldr	r3, [pc, #220]	; (8000914 <AcqConfigureTrigger+0x170>)
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
		g_threshold_s32 = (signed long)g_pTriggerConf->threshold;
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <AcqConfigureTrigger+0x160>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	461a      	mov	r2, r3
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <AcqConfigureTrigger+0x17c>)
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	e04d      	b.n	80008e4 <AcqConfigureTrigger+0x140>
#ifdef STM32F0XX
		// On Cortex M0, the LDR instruction requires to be 32-bits aligned
		g_pTriggerConf->address &= 0xFFFFFFFCUL;
#endif
	}
	else if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_U8 ) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b04      	cmp	r3, #4
 800084e:	d109      	bne.n	8000864 <AcqConfigureTrigger+0xc0>
		g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U8;
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <AcqConfigureTrigger+0x170>)
 8000852:	2204      	movs	r2, #4
 8000854:	601a      	str	r2, [r3, #0]
		g_threshold_u8 = (unsigned char)g_pTriggerConf->threshold;
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <AcqConfigureTrigger+0x160>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b31      	ldr	r3, [pc, #196]	; (8000924 <AcqConfigureTrigger+0x180>)
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	e03f      	b.n	80008e4 <AcqConfigureTrigger+0x140>
	}
	else if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_U16 ) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b05      	cmp	r3, #5
 800086a:	d109      	bne.n	8000880 <AcqConfigureTrigger+0xdc>
		g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U16;
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <AcqConfigureTrigger+0x170>)
 800086e:	2205      	movs	r2, #5
 8000870:	601a      	str	r2, [r3, #0]
		g_threshold_u16 = (unsigned short)g_pTriggerConf->threshold;
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <AcqConfigureTrigger+0x160>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <AcqConfigureTrigger+0x184>)
 800087c:	801a      	strh	r2, [r3, #0]
 800087e:	e031      	b.n	80008e4 <AcqConfigureTrigger+0x140>
		// On Cortex M0, the LDRH instruction requires to be 16-bits aligned
		g_pTriggerConf->address &= 0xFFFFFFFEUL;
#endif
	}
#ifdef USING_TRIGGER_ON_FLOAT
	else if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_FLOAT ) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	2b07      	cmp	r3, #7
 8000886:	d109      	bne.n	800089c <AcqConfigureTrigger+0xf8>
		g_internalType = SNP_TRC_DATA_ACCESS_TRIG_FLOAT;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <AcqConfigureTrigger+0x170>)
 800088a:	2207      	movs	r2, #7
 800088c:	601a      	str	r2, [r3, #0]
		g_threshold_float = *(float *)&g_pTriggerConf->threshold;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <AcqConfigureTrigger+0x160>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3308      	adds	r3, #8
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <AcqConfigureTrigger+0x188>)
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	e023      	b.n	80008e4 <AcqConfigureTrigger+0x140>
		g_pTriggerConf->address &= 0xFFFFFFFCUL;
#endif
	}
#endif
#ifdef USING_TRIGGER_ON_DOUBLE
	else if( pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_DOUBLE ) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d117      	bne.n	80008d4 <AcqConfigureTrigger+0x130>
		g_internalType = SNP_TRC_DATA_ACCESS_TRIG_DOUBLE;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <AcqConfigureTrigger+0x170>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	601a      	str	r2, [r3, #0]
		g_threshold_double = *(double *)&g_pTriggerConf->thresholdDouble;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <AcqConfigureTrigger+0x160>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3324      	adds	r3, #36	; 0x24
 80008b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008b4:	4618      	mov	r0, r3
 80008b6:	4621      	mov	r1, r4
 80008b8:	f7ff fed0 	bl	800065c <__aeabi_d2f>
 80008bc:	4602      	mov	r2, r0
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <AcqConfigureTrigger+0x18c>)
 80008c0:	601a      	str	r2, [r3, #0]
		// Compilers commonly use LDRD instruction for loading 2 words. Which require
		// a 32-bits aligned address (Cortex M0 and M3), otherwise: Hard Fault.
		// Force the alignment for robustness purpose
		g_pTriggerConf->address &= 0xFFFFFFFCUL;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <AcqConfigureTrigger+0x160>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <AcqConfigureTrigger+0x160>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0203 	bic.w	r2, r2, #3
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	e007      	b.n	80008e4 <AcqConfigureTrigger+0x140>
	}
#endif
	else {
		g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U32;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <AcqConfigureTrigger+0x170>)
 80008d6:	2206      	movs	r2, #6
 80008d8:	601a      	str	r2, [r3, #0]
		g_threshold_u32 = (unsigned long)g_pTriggerConf->threshold;
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <AcqConfigureTrigger+0x160>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <AcqConfigureTrigger+0x190>)
 80008e2:	6013      	str	r3, [r2, #0]
		// On Cortex M0, the LDR instruction requires to be 32-bits aligned
		g_pTriggerConf->address &= 0xFFFFFFFCUL;
#endif
	}

	if( pTrigConfig->mode & SNP_TRC_TRIGGER_STOP_N_REC ) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <AcqConfigureTrigger+0x158>
		g_stopAfterRecords = (int)g_pTriggerConf->stopParam;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <AcqConfigureTrigger+0x160>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <AcqConfigureTrigger+0x194>)
 80008fa:	601a      	str	r2, [r3, #0]
	}
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	200000e8 	.word	0x200000e8
 8000908:	200000ec 	.word	0x200000ec
 800090c:	200000f0 	.word	0x200000f0
 8000910:	200000f8 	.word	0x200000f8
 8000914:	200000f4 	.word	0x200000f4
 8000918:	200000fd 	.word	0x200000fd
 800091c:	20000100 	.word	0x20000100
 8000920:	20000108 	.word	0x20000108
 8000924:	200000fc 	.word	0x200000fc
 8000928:	200000fe 	.word	0x200000fe
 800092c:	2000010c 	.word	0x2000010c
 8000930:	20000110 	.word	0x20000110
 8000934:	20000104 	.word	0x20000104
 8000938:	20000114 	.word	0x20000114

0800093c <manageTrigEvent>:

// Common code used twice in AcqEvaluateTrigger
static int manageTrigEvent(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	if(g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG) {
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <manageTrigEvent+0x30>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d008      	beq.n	800095a <manageTrigEvent+0x1e>
		g_pTriggerConf->state = SNP_TRC_TRIGGER_TRIGGED;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <manageTrigEvent+0x34>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2202      	movs	r2, #2
 800094e:	619a      	str	r2, [r3, #24]
		g_internalTrigState = INTERNAL_STATE_TRIGGED;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <manageTrigEvent+0x38>)
 8000952:	2204      	movs	r2, #4
 8000954:	601a      	str	r2, [r3, #0]
		return TRIG_EVAL_POST_REC;
 8000956:	2301      	movs	r3, #1
 8000958:	e003      	b.n	8000962 <manageTrigEvent+0x26>
	} else {
		// In pretrig mode the SNP_TRC_TRIGGER_TRIGGED is used by the host as
		// trigger signal; so must be set only after read/write pointers are OK
		// in the shared header
		g_internalTrigState = INTERNAL_STATE_TRIGGED;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <manageTrigEvent+0x38>)
 800095c:	2204      	movs	r2, #4
 800095e:	601a      	str	r2, [r3, #0]
		return TRIG_EVAL_EVENT;
 8000960:	2302      	movs	r3, #2
	}
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200000f0 	.word	0x200000f0
 8000970:	200000e8 	.word	0x200000e8
 8000974:	200000ec 	.word	0x200000ec

08000978 <AcqEvaluateTrigger>:

// Main trigger state machine, to call periodically. Returns 1 when:
// - no trigger is configured
// - a trigger was configured, started and the condition is hit.
// Returns 0 otherwise.
int AcqEvaluateTrigger(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if( g_internalTrigMode == MODE_NO_TRIGGER ) {
 800097c:	4b51      	ldr	r3, [pc, #324]	; (8000ac4 <AcqEvaluateTrigger+0x14c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <AcqEvaluateTrigger+0x10>
		// No trigger configured => trace all
		return TRIG_EVAL_POST_REC;
 8000984:	2301      	movs	r3, #1
 8000986:	e09b      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
	}
	if( g_internalTrigState == INTERNAL_STATE_TRIGGED ) {
 8000988:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d103      	bne.n	8000998 <AcqEvaluateTrigger+0x20>
		// Event already trigged: continue until end event (stop command, ...)
		return evaluateEnd();
 8000990:	f000 faa4 	bl	8000edc <evaluateEnd>
 8000994:	4603      	mov	r3, r0
 8000996:	e093      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
	}
	if( g_internalTrigState == INTERNAL_STATE_STOPPED ) {
 8000998:	4b4b      	ldr	r3, [pc, #300]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d12f      	bne.n	8000a00 <AcqEvaluateTrigger+0x88>
			g_internalTrigState = INTERNAL_STATE_TRIGGED;
			g_nbRecords = 1;
			return TRIG_EVAL_POST_REC;
		}*/
		// Check if start asked
		if( g_pTriggerConf->cmd & SNP_TRC_TRIGGER_START ) {
 80009a0:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <AcqEvaluateTrigger+0x154>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d026      	beq.n	80009fc <AcqEvaluateTrigger+0x84>
			g_nbRecords = 0;
 80009ae:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <AcqEvaluateTrigger+0x158>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
			if( (g_pTriggerConf->mode & SNP_TRC_TRIGGER_START_MASK) == SNP_TRC_TRIGGER_START_IMMEDIATE ) {
 80009b4:	4b45      	ldr	r3, [pc, #276]	; (8000acc <AcqEvaluateTrigger+0x154>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d108      	bne.n	80009d4 <AcqEvaluateTrigger+0x5c>
				g_pTriggerConf->state = SNP_TRC_TRIGGER_TRIGGED;
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <AcqEvaluateTrigger+0x154>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2202      	movs	r2, #2
 80009c8:	619a      	str	r2, [r3, #24]
				g_internalTrigState = INTERNAL_STATE_TRIGGED;
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	601a      	str	r2, [r3, #0]
				return TRIG_EVAL_POST_REC;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e075      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
			}
			// Init state variables
			if(g_internalTrigMode == MODE_TRIGGER_NO_PRETRIG) {
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <AcqEvaluateTrigger+0x14c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d107      	bne.n	80009ec <AcqEvaluateTrigger+0x74>
				g_internalTrigState = WAITING_LEVEL_BEFORE;
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
				g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <AcqEvaluateTrigger+0x154>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2201      	movs	r2, #1
 80009e8:	619a      	str	r2, [r3, #24]
 80009ea:	e009      	b.n	8000a00 <AcqEvaluateTrigger+0x88>
			} else {
				g_internalTrigState = WAITING_BUFFER_EMPTY;
 80009ec:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	601a      	str	r2, [r3, #0]
				g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <AcqEvaluateTrigger+0x154>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2201      	movs	r2, #1
 80009f8:	619a      	str	r2, [r3, #24]
 80009fa:	e001      	b.n	8000a00 <AcqEvaluateTrigger+0x88>
			}
		} else {
			return TRIG_EVAL_NO_REC;
 80009fc:	2300      	movs	r3, #0
 80009fe:	e05f      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
		}
	}
	if( g_pTriggerConf->state == SNP_TRC_TRIGGER_STARTED ) {
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <AcqEvaluateTrigger+0x154>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d153      	bne.n	8000ab2 <AcqEvaluateTrigger+0x13a>
		// Check if stop asked
		if( g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP ) {
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <AcqEvaluateTrigger+0x154>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	691b      	ldr	r3, [r3, #16]
			g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
			g_internalTrigState = INTERNAL_STATE_STOPPED;
			return TRIG_EVAL_NO_REC;
		}

		if( g_internalTrigState == WAITING_BUFFER_EMPTY ) {
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d109      	bne.n	8000a2c <AcqEvaluateTrigger+0xb4>
			if( IsBufferEmpty() == 1 ) {
 8000a18:	f000 fc12 	bl	8001240 <IsBufferEmpty>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d102      	bne.n	8000a28 <AcqEvaluateTrigger+0xb0>
				// Buffer is now empty; we can restart pre-triggering
				AutoRearmTrigger();
 8000a22:	f7ff fe6b 	bl	80006fc <AutoRearmTrigger>
 8000a26:	e001      	b.n	8000a2c <AcqEvaluateTrigger+0xb4>
				// In this case we will return TRIG_EVAL_PRE2_REC; do not do it immediately
				// because we should evaluate the first trigger level
			} else {
				// Buffer is still not empty; must wait for it to be flushed
				return TRIG_EVAL_PRE1_REC;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e049      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
			}
		}
	
		// Check against trigger condition: edge detected as 2 levels
		if( g_internalTrigState == WAITING_LEVEL_BEFORE ) {
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d117      	bne.n	8000a64 <AcqEvaluateTrigger+0xec>
			if( g_pTriggerConf->mode & SNP_TRC_TRIGGER_FALLING ) {
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <AcqEvaluateTrigger+0x154>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d008      	beq.n	8000a54 <AcqEvaluateTrigger+0xdc>
				// For falling edge detection, the level before must be above the threshold
				if( valAboveThreshold() ) {
 8000a42:	f000 f847 	bl	8000ad4 <valAboveThreshold>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00b      	beq.n	8000a64 <AcqEvaluateTrigger+0xec>
					g_internalTrigState = WAITING_LEVEL_AFTER;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	e007      	b.n	8000a64 <AcqEvaluateTrigger+0xec>
				}
			} else {
				// For rising edge detection, the level before must be below the threshold
				if( valBelowThreshold() ) {
 8000a54:	f000 f8ea 	bl	8000c2c <valBelowThreshold>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <AcqEvaluateTrigger+0xec>
					g_internalTrigState = WAITING_LEVEL_AFTER;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if( g_internalTrigState == WAITING_LEVEL_AFTER ) {
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <AcqEvaluateTrigger+0x150>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d122      	bne.n	8000ab2 <AcqEvaluateTrigger+0x13a>
			if( g_pTriggerConf->mode & SNP_TRC_TRIGGER_FALLING ) {
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <AcqEvaluateTrigger+0x154>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00d      	beq.n	8000a96 <AcqEvaluateTrigger+0x11e>
				// For falling edge detection, the level after must be below the threshold
				if( valBelowThreshold() || valEqualsThreshold() ) {
 8000a7a:	f000 f8d7 	bl	8000c2c <valBelowThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <AcqEvaluateTrigger+0x116>
 8000a84:	f000 f97e 	bl	8000d84 <valEqualsThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d011      	beq.n	8000ab2 <AcqEvaluateTrigger+0x13a>
					// Event occurred
					return manageTrigEvent();
 8000a8e:	f7ff ff55 	bl	800093c <manageTrigEvent>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e014      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
				}
			} else {
				// For rising edge detection, the level after must be above the threshold
				if( valAboveThreshold() || valEqualsThreshold() ) {
 8000a96:	f000 f81d 	bl	8000ad4 <valAboveThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <AcqEvaluateTrigger+0x132>
 8000aa0:	f000 f970 	bl	8000d84 <valEqualsThreshold>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <AcqEvaluateTrigger+0x13a>
					// Event occurred
					return manageTrigEvent();
 8000aaa:	f7ff ff47 	bl	800093c <manageTrigEvent>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	e006      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
				}
			}
		}
	}
	// Nothing to trace or pre-triggering
	if(g_internalTrigMode == MODE_TRIGGER_WITH_PRETRIG) {
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <AcqEvaluateTrigger+0x14c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d101      	bne.n	8000abe <AcqEvaluateTrigger+0x146>
		return TRIG_EVAL_PRE2_REC;
 8000aba:	2304      	movs	r3, #4
 8000abc:	e000      	b.n	8000ac0 <AcqEvaluateTrigger+0x148>
	} else {
		return TRIG_EVAL_NO_REC;
 8000abe:	2300      	movs	r3, #0
	}
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000f0 	.word	0x200000f0
 8000ac8:	200000ec 	.word	0x200000ec
 8000acc:	200000e8 	.word	0x200000e8
 8000ad0:	20000118 	.word	0x20000118

08000ad4 <valAboveThreshold>:

int valAboveThreshold(void) {
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	switch(g_internalType) {
 8000ad8:	4b4a      	ldr	r3, [pc, #296]	; (8000c04 <valAboveThreshold+0x130>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	f200 808d 	bhi.w	8000bfc <valAboveThreshold+0x128>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <valAboveThreshold+0x14>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b0d 	.word	0x08000b0d
 8000aec:	08000b29 	.word	0x08000b29
 8000af0:	08000b45 	.word	0x08000b45
 8000af4:	08000bfd 	.word	0x08000bfd
 8000af8:	08000b5d 	.word	0x08000b5d
 8000afc:	08000b75 	.word	0x08000b75
 8000b00:	08000b8d 	.word	0x08000b8d
 8000b04:	08000ba5 	.word	0x08000ba5
 8000b08:	08000bc7 	.word	0x08000bc7
		case SNP_TRC_DATA_ACCESS_8BIT:
			return ( (*(_FAR_DATA_ signed char *)g_pTriggerConf->address)>g_threshold_s8)?1:0;
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <valAboveThreshold+0x134>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f993 2000 	ldrsb.w	r2, [r3]
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <valAboveThreshold+0x138>)
 8000b18:	f993 3000 	ldrsb.w	r3, [r3]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	bfcc      	ite	gt
 8000b20:	2301      	movgt	r3, #1
 8000b22:	2300      	movle	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	e06b      	b.n	8000c00 <valAboveThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_16BIT:
			return ( (*(_FAR_DATA_ signed short *)g_pTriggerConf->address)>g_threshold_s16)?1:0;
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <valAboveThreshold+0x134>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <valAboveThreshold+0x13c>)
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	bfcc      	ite	gt
 8000b3c:	2301      	movgt	r3, #1
 8000b3e:	2300      	movle	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	e05d      	b.n	8000c00 <valAboveThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_32BIT:
			return ( (*(_FAR_DATA_ signed long *)g_pTriggerConf->address)>g_threshold_s32)?1:0;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <valAboveThreshold+0x134>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <valAboveThreshold+0x140>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	bfcc      	ite	gt
 8000b54:	2301      	movgt	r3, #1
 8000b56:	2300      	movle	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	e051      	b.n	8000c00 <valAboveThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U8:
			return ( (*(_FAR_DATA_ unsigned char *)g_pTriggerConf->address)>g_threshold_u8)?1:0;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <valAboveThreshold+0x134>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <valAboveThreshold+0x144>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	bf8c      	ite	hi
 8000b6c:	2301      	movhi	r3, #1
 8000b6e:	2300      	movls	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	e045      	b.n	8000c00 <valAboveThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U16:
			return ( (*(_FAR_DATA_ unsigned short *)g_pTriggerConf->address)>g_threshold_u16)?1:0;
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <valAboveThreshold+0x134>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <valAboveThreshold+0x148>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	bf8c      	ite	hi
 8000b84:	2301      	movhi	r3, #1
 8000b86:	2300      	movls	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	e039      	b.n	8000c00 <valAboveThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U32:
			return ( (*(_FAR_DATA_ unsigned long *)g_pTriggerConf->address)>g_threshold_u32)?1:0;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <valAboveThreshold+0x134>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <valAboveThreshold+0x14c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	bf8c      	ite	hi
 8000b9c:	2301      	movhi	r3, #1
 8000b9e:	2300      	movls	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	e02d      	b.n	8000c00 <valAboveThreshold+0x12c>
#ifdef USING_TRIGGER_ON_FLOAT
		case SNP_TRC_DATA_ACCESS_TRIG_FLOAT:
			return ( (*(_FAR_DATA_ float *)g_pTriggerConf->address)>g_threshold_float)?1:0;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <valAboveThreshold+0x134>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	ed93 7a00 	vldr	s14, [r3]
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <valAboveThreshold+0x150>)
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbc:	bfcc      	ite	gt
 8000bbe:	2301      	movgt	r3, #1
 8000bc0:	2300      	movle	r3, #0
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	e01c      	b.n	8000c00 <valAboveThreshold+0x12c>
#endif
#ifdef USING_TRIGGER_ON_DOUBLE
		case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
			return ( (*(_FAR_DATA_ double *)g_pTriggerConf->address)>g_threshold_double)?1:0;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <valAboveThreshold+0x134>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <valAboveThreshold+0x154>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc61 	bl	800049c <__aeabi_f2d>
 8000bda:	460a      	mov	r2, r1
 8000bdc:	4601      	mov	r1, r0
 8000bde:	2301      	movs	r3, #1
 8000be0:	461e      	mov	r6, r3
 8000be2:	4613      	mov	r3, r2
 8000be4:	460a      	mov	r2, r1
 8000be6:	4620      	mov	r0, r4
 8000be8:	4629      	mov	r1, r5
 8000bea:	f7ff fd2d 	bl	8000648 <__aeabi_dcmpgt>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <valAboveThreshold+0x124>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	461e      	mov	r6, r3
 8000bf8:	b2f3      	uxtb	r3, r6
 8000bfa:	e001      	b.n	8000c00 <valAboveThreshold+0x12c>
#endif
		default:
			break;
 8000bfc:	bf00      	nop
	}
	return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c04:	200000f4 	.word	0x200000f4
 8000c08:	200000e8 	.word	0x200000e8
 8000c0c:	200000fd 	.word	0x200000fd
 8000c10:	20000100 	.word	0x20000100
 8000c14:	20000108 	.word	0x20000108
 8000c18:	200000fc 	.word	0x200000fc
 8000c1c:	200000fe 	.word	0x200000fe
 8000c20:	20000104 	.word	0x20000104
 8000c24:	2000010c 	.word	0x2000010c
 8000c28:	20000110 	.word	0x20000110

08000c2c <valBelowThreshold>:

int valBelowThreshold(void) {
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	switch(g_internalType) {
 8000c30:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <valBelowThreshold+0x130>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	f200 808d 	bhi.w	8000d54 <valBelowThreshold+0x128>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <valBelowThreshold+0x14>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000c65 	.word	0x08000c65
 8000c44:	08000c81 	.word	0x08000c81
 8000c48:	08000c9d 	.word	0x08000c9d
 8000c4c:	08000d55 	.word	0x08000d55
 8000c50:	08000cb5 	.word	0x08000cb5
 8000c54:	08000ccd 	.word	0x08000ccd
 8000c58:	08000ce5 	.word	0x08000ce5
 8000c5c:	08000cfd 	.word	0x08000cfd
 8000c60:	08000d1f 	.word	0x08000d1f
		case SNP_TRC_DATA_ACCESS_8BIT:
			return ( (*(_FAR_DATA_ signed char *)g_pTriggerConf->address)<g_threshold_s8)?1:0;
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <valBelowThreshold+0x134>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f993 2000 	ldrsb.w	r2, [r3]
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <valBelowThreshold+0x138>)
 8000c70:	f993 3000 	ldrsb.w	r3, [r3]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	bfb4      	ite	lt
 8000c78:	2301      	movlt	r3, #1
 8000c7a:	2300      	movge	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	e06b      	b.n	8000d58 <valBelowThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_16BIT:
			return ( (*(_FAR_DATA_ signed short *)g_pTriggerConf->address)<g_threshold_s16)?1:0;
 8000c80:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <valBelowThreshold+0x134>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <valBelowThreshold+0x13c>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	bfb4      	ite	lt
 8000c94:	2301      	movlt	r3, #1
 8000c96:	2300      	movge	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	e05d      	b.n	8000d58 <valBelowThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_32BIT:
			return ( (*(_FAR_DATA_ signed long *)g_pTriggerConf->address)<g_threshold_s32)?1:0;
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <valBelowThreshold+0x134>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <valBelowThreshold+0x140>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	bfb4      	ite	lt
 8000cac:	2301      	movlt	r3, #1
 8000cae:	2300      	movge	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	e051      	b.n	8000d58 <valBelowThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U8:
			return ( (*(_FAR_DATA_ unsigned char *)g_pTriggerConf->address)<g_threshold_u8)?1:0;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <valBelowThreshold+0x134>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <valBelowThreshold+0x144>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	bf34      	ite	cc
 8000cc4:	2301      	movcc	r3, #1
 8000cc6:	2300      	movcs	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	e045      	b.n	8000d58 <valBelowThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U16:
			return ( (*(_FAR_DATA_ unsigned short *)g_pTriggerConf->address)<g_threshold_u16)?1:0;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <valBelowThreshold+0x134>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	881a      	ldrh	r2, [r3, #0]
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <valBelowThreshold+0x148>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	bf34      	ite	cc
 8000cdc:	2301      	movcc	r3, #1
 8000cde:	2300      	movcs	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	e039      	b.n	8000d58 <valBelowThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U32:
		  return ( (*(_FAR_DATA_ unsigned long *)g_pTriggerConf->address)<g_threshold_u32)?1:0;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <valBelowThreshold+0x134>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <valBelowThreshold+0x14c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	bf34      	ite	cc
 8000cf4:	2301      	movcc	r3, #1
 8000cf6:	2300      	movcs	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	e02d      	b.n	8000d58 <valBelowThreshold+0x12c>
#ifdef USING_TRIGGER_ON_FLOAT
		case SNP_TRC_DATA_ACCESS_TRIG_FLOAT:
			return ( (*(_FAR_DATA_ float *)g_pTriggerConf->address)<g_threshold_float)?1:0;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <valBelowThreshold+0x134>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <valBelowThreshold+0x150>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	bf4c      	ite	mi
 8000d16:	2301      	movmi	r3, #1
 8000d18:	2300      	movpl	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	e01c      	b.n	8000d58 <valBelowThreshold+0x12c>
#endif
#ifdef USING_TRIGGER_ON_DOUBLE
		case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
			return ( (*(_FAR_DATA_ double *)g_pTriggerConf->address)<g_threshold_double)?1:0;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <valBelowThreshold+0x134>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <valBelowThreshold+0x154>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fbb5 	bl	800049c <__aeabi_f2d>
 8000d32:	460a      	mov	r2, r1
 8000d34:	4601      	mov	r1, r0
 8000d36:	2301      	movs	r3, #1
 8000d38:	461e      	mov	r6, r3
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	4620      	mov	r0, r4
 8000d40:	4629      	mov	r1, r5
 8000d42:	f7ff fc63 	bl	800060c <__aeabi_dcmplt>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <valBelowThreshold+0x124>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	461e      	mov	r6, r3
 8000d50:	b2f3      	uxtb	r3, r6
 8000d52:	e001      	b.n	8000d58 <valBelowThreshold+0x12c>
#endif
		default:
			break;
 8000d54:	bf00      	nop
	}
	return 0;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d5c:	200000f4 	.word	0x200000f4
 8000d60:	200000e8 	.word	0x200000e8
 8000d64:	200000fd 	.word	0x200000fd
 8000d68:	20000100 	.word	0x20000100
 8000d6c:	20000108 	.word	0x20000108
 8000d70:	200000fc 	.word	0x200000fc
 8000d74:	200000fe 	.word	0x200000fe
 8000d78:	20000104 	.word	0x20000104
 8000d7c:	2000010c 	.word	0x2000010c
 8000d80:	20000110 	.word	0x20000110

08000d84 <valEqualsThreshold>:

int valEqualsThreshold(void) {
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	switch(g_internalType) {
 8000d88:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <valEqualsThreshold+0x130>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	f200 808d 	bhi.w	8000eac <valEqualsThreshold+0x128>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <valEqualsThreshold+0x14>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000dbd 	.word	0x08000dbd
 8000d9c:	08000dd9 	.word	0x08000dd9
 8000da0:	08000df5 	.word	0x08000df5
 8000da4:	08000ead 	.word	0x08000ead
 8000da8:	08000e0d 	.word	0x08000e0d
 8000dac:	08000e25 	.word	0x08000e25
 8000db0:	08000e3d 	.word	0x08000e3d
 8000db4:	08000e55 	.word	0x08000e55
 8000db8:	08000e77 	.word	0x08000e77
		case SNP_TRC_DATA_ACCESS_8BIT:
			return ( (*(_FAR_DATA_ signed char *)g_pTriggerConf->address)==g_threshold_s8)?1:0;
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f993 2000 	ldrsb.w	r2, [r3]
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <valEqualsThreshold+0x138>)
 8000dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	e06b      	b.n	8000eb0 <valEqualsThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_16BIT:
			return ( (*(_FAR_DATA_ signed short *)g_pTriggerConf->address)==g_threshold_s16)?1:0;
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <valEqualsThreshold+0x13c>)
 8000de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	bf0c      	ite	eq
 8000dec:	2301      	moveq	r3, #1
 8000dee:	2300      	movne	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	e05d      	b.n	8000eb0 <valEqualsThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_32BIT:
			return ( (*(_FAR_DATA_ signed long *)g_pTriggerConf->address)==g_threshold_s32)?1:0;
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <valEqualsThreshold+0x140>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	e051      	b.n	8000eb0 <valEqualsThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U8:
			return ( (*(_FAR_DATA_ unsigned char *)g_pTriggerConf->address)==g_threshold_u8)?1:0;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <valEqualsThreshold+0x144>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e045      	b.n	8000eb0 <valEqualsThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U16:
			return ( (*(_FAR_DATA_ unsigned short *)g_pTriggerConf->address)==g_threshold_u16)?1:0;
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	881a      	ldrh	r2, [r3, #0]
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <valEqualsThreshold+0x148>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	bf0c      	ite	eq
 8000e34:	2301      	moveq	r3, #1
 8000e36:	2300      	movne	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	e039      	b.n	8000eb0 <valEqualsThreshold+0x12c>
		case SNP_TRC_DATA_ACCESS_TRIG_U32:
		  return ( (*(_FAR_DATA_ unsigned long *)g_pTriggerConf->address)==g_threshold_u32)?1:0;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <valEqualsThreshold+0x14c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	bf0c      	ite	eq
 8000e4c:	2301      	moveq	r3, #1
 8000e4e:	2300      	movne	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	e02d      	b.n	8000eb0 <valEqualsThreshold+0x12c>
#ifdef USING_TRIGGER_ON_FLOAT
		case SNP_TRC_DATA_ACCESS_TRIG_FLOAT:
			return ( (*(_FAR_DATA_ float *)g_pTriggerConf->address)==g_threshold_float)?1:0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	ed93 7a00 	vldr	s14, [r3]
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <valEqualsThreshold+0x150>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	2300      	movne	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	e01c      	b.n	8000eb0 <valEqualsThreshold+0x12c>
#endif
#ifdef USING_TRIGGER_ON_DOUBLE
		case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
			return ( (*(_FAR_DATA_ double *)g_pTriggerConf->address)==g_threshold_double)?1:0;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <valEqualsThreshold+0x134>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <valEqualsThreshold+0x154>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb09 	bl	800049c <__aeabi_f2d>
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	2301      	movs	r3, #1
 8000e90:	461e      	mov	r6, r3
 8000e92:	4613      	mov	r3, r2
 8000e94:	460a      	mov	r2, r1
 8000e96:	4620      	mov	r0, r4
 8000e98:	4629      	mov	r1, r5
 8000e9a:	f7ff fbad 	bl	80005f8 <__aeabi_dcmpeq>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <valEqualsThreshold+0x124>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	461e      	mov	r6, r3
 8000ea8:	b2f3      	uxtb	r3, r6
 8000eaa:	e001      	b.n	8000eb0 <valEqualsThreshold+0x12c>
#endif
		default:
			break;
 8000eac:	bf00      	nop
	}
	return 0;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eb4:	200000f4 	.word	0x200000f4
 8000eb8:	200000e8 	.word	0x200000e8
 8000ebc:	200000fd 	.word	0x200000fd
 8000ec0:	20000100 	.word	0x20000100
 8000ec4:	20000108 	.word	0x20000108
 8000ec8:	200000fc 	.word	0x200000fc
 8000ecc:	200000fe 	.word	0x200000fe
 8000ed0:	20000104 	.word	0x20000104
 8000ed4:	2000010c 	.word	0x2000010c
 8000ed8:	20000110 	.word	0x20000110

08000edc <evaluateEnd>:

// To call while in TRIGGED state. Check against end conditions.
// Returns TRIG_EVAL_POST_REC if still in TRIGGED state; TRIG_EVAL_NO_REC if STOPPED.
int evaluateEnd(void) {
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	// Check if stop asked
	if( g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP ) {
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <evaluateEnd+0xe8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
		g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
		g_internalTrigState = INTERNAL_STATE_STOPPED;
		return TRIG_EVAL_NO_REC;
	}
	if( (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_MASK) == 0 ) {
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <evaluateEnd+0xe8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <evaluateEnd+0x1c>
		// Never stop
		return TRIG_EVAL_POST_REC;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e05f      	b.n	8000fb8 <evaluateEnd+0xdc>
	}
	// Check against other stop conditions
	if( (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_OVF) && (g_overflow!=1) ) {
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <evaluateEnd+0xe8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <evaluateEnd+0x36>
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <evaluateEnd+0xec>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <evaluateEnd+0x36>
		return TRIG_EVAL_POST_REC;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e052      	b.n	8000fb8 <evaluateEnd+0xdc>
	}
	if( (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC) && (g_nbRecords < g_stopAfterRecords) ) {
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <evaluateEnd+0x54>
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <evaluateEnd+0xf0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <evaluateEnd+0xf4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	da01      	bge.n	8000f30 <evaluateEnd+0x54>
		return TRIG_EVAL_POST_REC;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e043      	b.n	8000fb8 <evaluateEnd+0xdc>
	}
	// If here, a stop condition was faced. Check if autorestart
	if( (g_pTriggerConf->mode & SNP_TRC_TRIGGER_AUTO_RESTART) && (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG) ) {
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d02c      	beq.n	8000f98 <evaluateEnd+0xbc>
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <evaluateEnd+0xf8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d028      	beq.n	8000f98 <evaluateEnd+0xbc>
		// The auto-restart is not possible in pretrig mode, as the field g_pTriggerConf->state
		// is used for host synchronization; one must wait for host ACK before restarting
		// the pre-triggering.
		// Init state variables
		if( g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC ) {
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d012      	beq.n	8000f7a <evaluateEnd+0x9e>
			if ( g_binternalIgnoreTrig ) {
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <evaluateEnd+0xfc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <evaluateEnd+0x88>
				g_internalTrigState = WAITING_BUFFER_EMPTY;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <evaluateEnd+0x100>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e002      	b.n	8000f6a <evaluateEnd+0x8e>
			}
			else {
				// Immediately rearm the trigger in this case
				g_internalTrigState = WAITING_LEVEL_BEFORE;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <evaluateEnd+0x100>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
			}
			g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	619a      	str	r2, [r3, #24]
			g_nbRecords = 0;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <evaluateEnd+0xf0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
		if( g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC ) {
 8000f78:	e01d      	b.n	8000fb6 <evaluateEnd+0xda>
		} else {
			// In case of OVF stop, one should stop the acquisition and wait for
			// the end of OVF before rearming
			g_pTriggerConf->cmd = 0;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
			g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
			g_internalTrigState = INTERNAL_STATE_STOPPED;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <evaluateEnd+0x100>)
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	601a      	str	r2, [r3, #0]
			bAutoRearmAfterOVF = 1;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <evaluateEnd+0x104>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
		if( g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC ) {
 8000f96:	e00e      	b.n	8000fb6 <evaluateEnd+0xda>
		}
	} else {
		// In that case a user action is required to start again => clear the previous command,
		// but without clearing SNP_TRC_TRIGGER_TRIGGED (if set), because required for
		// for host synchro in preTrig mode; the state will be update after ACK from host (HostReadEvent)
		g_pTriggerConf->cmd = 0;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <evaluateEnd+0xe8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
		g_pTriggerConf->state = g_pTriggerConf->state & ((TraceHeaderFieldT)0xFFFFFFFE); // Clear SNP_TRC_TRIGGER_STARTED
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <evaluateEnd+0xe8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <evaluateEnd+0xe8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	619a      	str	r2, [r3, #24]
		g_internalTrigState = INTERNAL_STATE_STOPPED;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <evaluateEnd+0x100>)
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	601a      	str	r2, [r3, #0]
//		g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED; // Moved into HostReadEvent
	}
	return TRIG_EVAL_NO_REC;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200000e8 	.word	0x200000e8
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	20000118 	.word	0x20000118
 8000fd0:	20000114 	.word	0x20000114
 8000fd4:	200000f0 	.word	0x200000f0
 8000fd8:	200000f8 	.word	0x200000f8
 8000fdc:	200000ec 	.word	0x200000ec
 8000fe0:	20000120 	.word	0x20000120

08000fe4 <HostReadEvent>:

// Inform the trigger module that the host has read some data
void HostReadEvent(void) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	if( (g_internalTrigState == INTERNAL_STATE_STOPPED) && (g_pTriggerConf->state == SNP_TRC_TRIGGER_TRIGGED) && (g_pTriggerConf->cmd == 0) ) {
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HostReadEvent+0x34>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d10d      	bne.n	800100c <HostReadEvent+0x28>
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HostReadEvent+0x38>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d108      	bne.n	800100c <HostReadEvent+0x28>
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HostReadEvent+0x38>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <HostReadEvent+0x28>
		// Update the trigger state now that we are sure that the host has seen the TRIGGED state
		g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HostReadEvent+0x38>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
	}
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000ec 	.word	0x200000ec
 800101c:	200000e8 	.word	0x200000e8

08001020 <filter_lp>:
/*
 * Low pass filter
 */

void filter_lp(float in, float *out, filter_lp_inst_t *filter_instance)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a03 	vstr	s0, [r7, #12]
 800102a:	60b8      	str	r0, [r7, #8]
 800102c:	6079      	str	r1, [r7, #4]
	*out = ((*out) * filter_instance->c1) + (in * filter_instance->c0);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	ed93 7a00 	vldr	s14, [r3]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	edd3 7a02 	vldr	s15, [r3, #8]
 800103a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	edd3 6a01 	vldr	s13, [r3, #4]
 8001044:	edd7 7a03 	vldr	s15, [r7, #12]
 8001048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001056:	bf00      	nop
}
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <filter_lp_init>:

void filter_lp_init(filter_lp_inst_t *filter_instance)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	filter_instance->c0 = filter_instance->Ts / (filter_instance->Ts + filter_instance->tau);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 6a00 	vldr	s13, [r3]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	ed93 7a00 	vldr	s14, [r3]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edd3 7a03 	vldr	s15, [r3, #12]
 800107c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a01 	vstr	s15, [r3, #4]
	filter_instance->c1 = 1.0f - filter_instance->c0;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edc3 7a02 	vstr	s15, [r3, #8]
	return;
 800109e:	bf00      	nop
}
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <integrator_gain>:
/*
 * Integrator
 */

void integrator_gain(float in, float *out, integrator_inst_t *integrator_instance)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	ed87 0a03 	vstr	s0, [r7, #12]
 80010b4:	60b8      	str	r0, [r7, #8]
 80010b6:	6079      	str	r1, [r7, #4]
	*out = in * integrator_instance->GainTs + (*out);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	return;
 80010d6:	bf00      	nop
}
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <integrator_gain_init>:

void integrator_gain_init(integrator_inst_t *integrator_instance)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	integrator_instance->GainTs = integrator_instance->Ts * integrator_instance->gain;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edc3 7a02 	vstr	s15, [r3, #8]
	return;
 8001100:	bf00      	nop
}
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <regPI_p>:
/*
 * Regulator PI
 */

void regPI_p(float in, float *out, regPI_inst_t *params)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	ed87 0a03 	vstr	s0, [r7, #12]
 8001116:	60b8      	str	r0, [r7, #8]
 8001118:	6079      	str	r1, [r7, #4]
	float up, ui, u;

	up = in * params->Kp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001120:	ed97 7a03 	vldr	s14, [r7, #12]
 8001124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001128:	edc7 7a06 	vstr	s15, [r7, #24]
	ui = in * params->TsTi + params->ui_1;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001132:	edd7 7a03 	vldr	s15, [r7, #12]
 8001136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001144:	edc7 7a05 	vstr	s15, [r7, #20]

	u = up + ui;
 8001148:	ed97 7a06 	vldr	s14, [r7, #24]
 800114c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001154:	edc7 7a07 	vstr	s15, [r7, #28]

	if (u > params->h_lim) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edd3 7a05 	vldr	s15, [r3, #20]
 800115e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd03      	ble.n	8001174 <regPI_p+0x68>
		u = params->h_lim;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e010      	b.n	8001196 <regPI_p+0x8a>
	} else if (u < params->l_lim) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edd3 7a06 	vldr	s15, [r3, #24]
 800117a:	ed97 7a07 	vldr	s14, [r7, #28]
 800117e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d503      	bpl.n	8001190 <regPI_p+0x84>
		u = params->l_lim;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e002      	b.n	8001196 <regPI_p+0x8a>
	} else {
		params->ui_1 = ui;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	611a      	str	r2, [r3, #16]
	}

	*out = u;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	601a      	str	r2, [r3, #0]

	return;
 800119c:	bf00      	nop
}
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <regPI_p_init>:

void regPI_p_init(regPI_inst_t *params)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	params->TsTi = params->Ts / params->Ti;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 6a00 	vldr	s13, [r3]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80011bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edc3 7a03 	vstr	s15, [r3, #12]
	return;
 80011c6:	bf00      	nop
}
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <readVar8bits>:
TraceBufferFieldT readVar16bits(unsigned long addr);
TraceBufferFieldT readVar32bits(unsigned long addr);

// Memory read functions (one for each variable type)
TraceBufferFieldT readVar8bits(unsigned long addr)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  return (TraceBufferFieldT)*(_FAR_DATA_ unsigned char *)addr;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <readVar16bits>:

TraceBufferFieldT readVar16bits(unsigned long addr)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  // Caution: if TraceBufferFieldT is 8 bits, there is a truncature here
  return (TraceBufferFieldT)*(_FAR_DATA_ short *)addr;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <readVar32bits>:

TraceBufferFieldT readVar32bits(unsigned long addr)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  // Caution: if TraceBufferFieldT is 8 or 16 bits, there is a truncature here
  return (TraceBufferFieldT)*(_FAR_DATA_ unsigned long *)addr;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <ClearBuffer>:
static TraceBufferFieldT g_timestamp=0;
static TraceBufferFieldT g_timestampOverflow=0;

// Reset the data trace buffer to a clean state. Reset timestamp counter
void ClearBuffer(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	memset((void *)g_dataTraceBuffer, 0, sizeof(g_dataTraceBuffer));
 8001220:	f242 2260 	movw	r2, #8800	; 0x2260
 8001224:	2100      	movs	r1, #0
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <ClearBuffer+0x1c>)
 8001228:	f003 fa00 	bl	800462c <memset>
	g_timestamp=0;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <ClearBuffer+0x20>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000124 	.word	0x20000124
 800123c:	2000238c 	.word	0x2000238c

08001240 <IsBufferEmpty>:

// This routine is called by AcqEvaluateTrigger; as a result we can use some
// global variables that are correctly set up at this stage.
// Think about it before using somewhere else.
int IsBufferEmpty(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
	int nextReadAddr;
	if( g_lastReadPointer + 2*g_recordSize-1 > g_traceHeader.bufferEndAddr ) {
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <IsBufferEmpty+0x4c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	005a      	lsls	r2, r3, #1
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <IsBufferEmpty+0x50>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4413      	add	r3, r2
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <IsBufferEmpty+0x54>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d903      	bls.n	8001264 <IsBufferEmpty+0x24>
		// There is a place for only 1 record after g_lastReadPointer; the next
		// one makes the buffer loopback
		nextReadAddr = g_traceHeader.bufferStartAddr;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <IsBufferEmpty+0x54>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	e005      	b.n	8001270 <IsBufferEmpty+0x30>
	} else {
		nextReadAddr = g_lastReadPointer + g_recordSize;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <IsBufferEmpty+0x50>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <IsBufferEmpty+0x4c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4413      	add	r3, r2
 800126e:	607b      	str	r3, [r7, #4]
	}
	if( nextReadAddr == g_traceHeader.writePointer ) {
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <IsBufferEmpty+0x54>)
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d101      	bne.n	800127e <IsBufferEmpty+0x3e>
		// This means the buffer is empty
		return 1;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <IsBufferEmpty+0x40>
	}
	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	20002384 	.word	0x20002384
 8001290:	20002388 	.word	0x20002388
 8001294:	20000000 	.word	0x20000000

08001298 <DumpTrace>:
// from the host.
// Caution for the provided STM8 example: ensure that the STM8S_FAMILY or STM8L_FAMILY
// flag in stm8/common/mcuregs.h matches the connected microcontroller, in order to
// get DumpTrace properly called from the timer event.
void DumpTrace(void)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08d      	sub	sp, #52	; 0x34
 800129c:	af00      	add	r7, sp, #0
	static char bPreTrigBufOvf = 0;
	static TraceBufferFieldT g_subSamplingCount=0;
	int varIdx;
	DataTraceAccessTypeT varAccessType;
	TraceHeaderFieldT readPointer, readPointerCopy;
	TraceHeaderFieldT recordLastAddr=(TraceHeaderFieldT)(-1); // Init value used as signal of new record
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	623b      	str	r3, [r7, #32]
#ifdef MEASURE_PERFORMANCE
	SetTraceGpio();
#endif

	// Get the trace header critical section contents once and for all
	nbVar = g_traceHeader.nbVar & 0x0000FFFF;
 80012a4:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <DumpTrace+0x208>)
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a8:	81fb      	strh	r3, [r7, #14]
	nbDoubleVar = (g_traceHeader.nbVar & 0xFFFF0000)>>16;
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <DumpTrace+0x208>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	81bb      	strh	r3, [r7, #12]
	flags = g_traceHeader.flags;
 80012b2:	4b7b      	ldr	r3, [pc, #492]	; (80014a0 <DumpTrace+0x208>)
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	61fb      	str	r3, [r7, #28]
	writePointer = g_traceHeader.writePointer;
 80012b8:	4b79      	ldr	r3, [pc, #484]	; (80014a0 <DumpTrace+0x208>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	61bb      	str	r3, [r7, #24]

	if( nbVar == 0 ) {
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10d      	bne.n	80012e0 <DumpTrace+0x48>
		// Nothing to trace
		if( bStarted == 1 ) {
 80012c4:	4b77      	ldr	r3, [pc, #476]	; (80014a4 <DumpTrace+0x20c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8210 	bne.w	80016ee <DumpTrace+0x456>
			// Acquisition stop: acknowledge to the host for synchronization
			bStarted = 0;
 80012ce:	4b75      	ldr	r3, [pc, #468]	; (80014a4 <DumpTrace+0x20c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
			flags = SNP_TRC_START_STOP_ACK;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
			g_traceHeader.flags = flags;
 80012d8:	4a71      	ldr	r2, [pc, #452]	; (80014a0 <DumpTrace+0x208>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012de:	e206      	b.n	80016ee <DumpTrace+0x456>
		}
	} else {
		// There is something to be traced
		// The very critical field for read from the embedded is "readPointer"; to
		// ensure the value read is not a transistory value, a copy is done.
		readPointer = g_traceHeader.readPointer;
 80012e0:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <DumpTrace+0x208>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
		readPointerCopy = g_traceHeader.readPointerCopy;
 80012e6:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <DumpTrace+0x208>)
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	60bb      	str	r3, [r7, #8]
		if( readPointer != readPointerCopy ) {
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d003      	beq.n	80012fc <DumpTrace+0x64>
			// The read pointer is being moved by the host; use the latest stable value
			// instead; otherwise we may use an unpredictable value. A waiting loop may
			// impact too much the user application. The worst case will lead to
			// overflow (no deadlock).
			readPointer = g_lastReadPointer;
 80012f4:	4b6c      	ldr	r3, [pc, #432]	; (80014a8 <DumpTrace+0x210>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	e00d      	b.n	8001318 <DumpTrace+0x80>
		} else {
			// This becomes the most recently known stable value
#ifdef USING_TRIGGER
			if( (g_lastReadPointer != readPointer) && (bStarted == 1) ) {
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <DumpTrace+0x210>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	429a      	cmp	r2, r3
 8001304:	d005      	beq.n	8001312 <DumpTrace+0x7a>
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <DumpTrace+0x20c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <DumpTrace+0x7a>
				// Inform the trigger module that the host has read some data
				HostReadEvent();
 800130e:	f7ff fe69 	bl	8000fe4 <HostReadEvent>
			}
#endif
			g_lastReadPointer = readPointer;
 8001312:	4a65      	ldr	r2, [pc, #404]	; (80014a8 <DumpTrace+0x210>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	6013      	str	r3, [r2, #0]
		}

		if( bStarted == 0 ) {
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <DumpTrace+0x20c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d155      	bne.n	80013cc <DumpTrace+0x134>
			// This is the very first acquisition: let's compute the record size and
			// check that the correct value for the readPointer has been set by the host
			// (mandatory for correct management of overflow)
			g_recordSize = (1+nbVar+nbDoubleVar)*sizeof(TraceBufferFieldT); // SNP_TRC_BUFFER_FORMAT==1 contains a timestamp => 1+nbVar
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4a60      	ldr	r2, [pc, #384]	; (80014ac <DumpTrace+0x214>)
 800132c:	6013      	str	r3, [r2, #0]
                                                                      // Each double takes 2 places
			nbRecords = SNP_TRC_BUFFER_SIZE*sizeof(TraceBufferFieldT)/g_recordSize;
 800132e:	4b5f      	ldr	r3, [pc, #380]	; (80014ac <DumpTrace+0x214>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f242 2260 	movw	r2, #8800	; 0x2260
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4a5d      	ldr	r2, [pc, #372]	; (80014b0 <DumpTrace+0x218>)
 800133c:	6013      	str	r3, [r2, #0]
			writePointer = (TraceHeaderFieldT)&g_dataTraceBuffer;
 800133e:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <DumpTrace+0x21c>)
 8001340:	61bb      	str	r3, [r7, #24]
			pWrite = (TraceHeaderFieldT *)writePointer;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4a5c      	ldr	r2, [pc, #368]	; (80014b8 <DumpTrace+0x220>)
 8001346:	6013      	str	r3, [r2, #0]
			expectedInitialReadPointer = writePointer+(nbRecords-1)*g_recordSize;
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <DumpTrace+0x218>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	4a57      	ldr	r2, [pc, #348]	; (80014ac <DumpTrace+0x214>)
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4413      	add	r3, r2
 800135a:	607b      	str	r3, [r7, #4]
			if( expectedInitialReadPointer == readPointer ) {
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	429a      	cmp	r2, r3
 8001362:	d12b      	bne.n	80013bc <DumpTrace+0x124>
				// All is OK for tracing: let's start
#ifdef STM32F0XX
				// On Cortex M0, the LDRx instructions require to be aligned: do it now for robustness (no hard fault)
				alignAddresses(nbVar);
#endif
				bStarted = 1;
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <DumpTrace+0x20c>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
				// Reset static variables
				bOverflow = 0;
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <DumpTrace+0x224>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
				g_timestamp = 0;
 8001370:	4b53      	ldr	r3, [pc, #332]	; (80014c0 <DumpTrace+0x228>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
				g_timestampOverflow = 0;
 8001376:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <DumpTrace+0x22c>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
				g_subSamplingCount = 0;
 800137c:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <DumpTrace+0x230>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
				bPreTrigBufOvf = 0;
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <DumpTrace+0x234>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
#ifdef USING_TRIGGER
				bHasTrigged = 0;
 8001388:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <DumpTrace+0x238>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
				// Inform the trigger module
				SetTriggerOverflow(0);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff f9d0 	bl	8000734 <SetTriggerOverflow>
#endif
				// Reset write pointer in header critical section
				g_traceHeader.writePointer = writePointer;
 8001394:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <DumpTrace+0x208>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	61d3      	str	r3, [r2, #28]
				g_traceHeader.writePointerCopy = writePointer;
 800139a:	4a41      	ldr	r2, [pc, #260]	; (80014a0 <DumpTrace+0x208>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6213      	str	r3, [r2, #32]
				// Initialize the most recently stable value for read pointer
				g_lastReadPointer = expectedInitialReadPointer;
 80013a0:	4a41      	ldr	r2, [pc, #260]	; (80014a8 <DumpTrace+0x210>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
#ifdef USING_TRIGGER
				AcqConfigureTrigger(&(g_traceHeader.trigger));
 80013a6:	484b      	ldr	r0, [pc, #300]	; (80014d4 <DumpTrace+0x23c>)
 80013a8:	f7ff f9fc 	bl	80007a4 <AcqConfigureTrigger>
#endif
				// Acknowledge to the host for synchronization
				flags |= SNP_TRC_START_STOP_ACK;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
				g_traceHeader.flags = flags;
 80013b4:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <DumpTrace+0x208>)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013ba:	e007      	b.n	80013cc <DumpTrace+0x134>
			} else {
				// Something wrong with the host: flag it
				flags |= SNP_TRC_RECORD_SKIPPED;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	61fb      	str	r3, [r7, #28]
				g_traceHeader.flags = flags;
 80013c4:	4a36      	ldr	r2, [pc, #216]	; (80014a0 <DumpTrace+0x208>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	62d3      	str	r3, [r2, #44]	; 0x2c
#ifdef MEASURE_PERFORMANCE
				ResetTraceGpio();
#endif
				return;
 80013ca:	e190      	b.n	80016ee <DumpTrace+0x456>
			}
		}

		if( bOverflow == 1 ) {
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <DumpTrace+0x224>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d109      	bne.n	80013e8 <DumpTrace+0x150>
			// We were in overflow mode; check if the readPointer moved
			if( writePointer != readPointer ) {
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	429a      	cmp	r2, r3
 80013da:	d005      	beq.n	80013e8 <DumpTrace+0x150>
				// Yes
				bOverflow = 0;
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <DumpTrace+0x224>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
#ifdef USING_TRIGGER
				// Inform the trigger module
				SetTriggerOverflow(0);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff f9a6 	bl	8000734 <SetTriggerOverflow>
#endif
			}
		}

#ifdef USING_TRIGGER
		trigEval = AcqEvaluateTrigger();
 80013e8:	f7ff fac6 	bl	8000978 <AcqEvaluateTrigger>
 80013ec:	6038      	str	r0, [r7, #0]
		if( (trigEval != TRIG_EVAL_NO_REC) && (trigEval != TRIG_EVAL_PRE1_REC) ) {
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 815b 	beq.w	80016ac <DumpTrace+0x414>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	f000 8157 	beq.w	80016ac <DumpTrace+0x414>
			// There is something to do with triggers
#endif
			g_subSamplingCount++;
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <DumpTrace+0x230>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <DumpTrace+0x230>)
 8001406:	6013      	str	r3, [r2, #0]
#ifdef USING_TRIGGER
			if( (trigEval == TRIG_EVAL_EVENT) || ( (trigEval == TRIG_EVAL_POST_REC) && (bHasTrigged==0)) ) {
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d006      	beq.n	800141c <DumpTrace+0x184>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <DumpTrace+0x18c>
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <DumpTrace+0x238>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <DumpTrace+0x18c>
				// Ensure the trigger event is traced, for easier management
				g_subSamplingCount = g_traceHeader.subSamplingRate;
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <DumpTrace+0x208>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <DumpTrace+0x230>)
 8001422:	6013      	str	r3, [r2, #0]
			}
			bHasTrigged = 1;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <DumpTrace+0x238>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
#endif
			// Do not systematically trace at each call; allow sub-sampling (added from version 3)
			if( g_subSamplingCount >= g_traceHeader.subSamplingRate ) {
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <DumpTrace+0x208>)
 800142c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <DumpTrace+0x230>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	f200 80a0 	bhi.w	8001578 <DumpTrace+0x2e0>
				// Reset the counter for next time
				g_subSamplingCount = 0;
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <DumpTrace+0x230>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

				if( bOverflow == 0 ) {
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <DumpTrace+0x224>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 8098 	bne.w	8001578 <DumpTrace+0x2e0>
					if( writePointer == readPointer ) {
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	429a      	cmp	r2, r3
 800144e:	d10d      	bne.n	800146c <DumpTrace+0x1d4>
						// We are about to write the last available area into the buffer. For easiest
						// overflow management, consider this as the overflow signal (do not write
						// to it, do not increment writePointer)
						bOverflow=1; // For internal processing of the overflow
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <DumpTrace+0x224>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
						flags |= SNP_TRC_FLAG_OVERFLOW;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
						// Immediately modify the header critical section in this case (nothing else to do)
						g_traceHeader.flags = flags;
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <DumpTrace+0x208>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	62d3      	str	r3, [r2, #44]	; 0x2c
#ifdef USING_TRIGGER
						// Inform the trigger module
						SetTriggerOverflow(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff f965 	bl	8000734 <SetTriggerOverflow>
 800146a:	e085      	b.n	8001578 <DumpTrace+0x2e0>
#endif
					} else {
						// Let's add a new record
#ifdef USING_TRIGGER
						// Inform the trigger module of new records (real ones, not pretrig ones)
						if( trigEval != TRIG_EVAL_PRE2_REC ) {
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b04      	cmp	r3, #4
 8001470:	d001      	beq.n	8001476 <DumpTrace+0x1de>
							AddingNewRecord();
 8001472:	f7ff f989 	bl	8000788 <AddingNewRecord>
						}
#endif
						recordLastAddr = (TraceHeaderFieldT)pWrite + g_recordSize -1;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <DumpTrace+0x220>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <DumpTrace+0x214>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	3b01      	subs	r3, #1
 8001484:	623b      	str	r3, [r7, #32]

						// Begin with timestamp
						*pWrite = g_timestamp;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <DumpTrace+0x220>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <DumpTrace+0x228>)
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	601a      	str	r2, [r3, #0]
						pWrite++;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <DumpTrace+0x220>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3304      	adds	r3, #4
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <DumpTrace+0x220>)
 8001498:	6013      	str	r3, [r2, #0]
						varIdx=0;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
						// Continue with variables values
						while( (TraceHeaderFieldT)pWrite <= recordLastAddr ) {
 800149e:	e051      	b.n	8001544 <DumpTrace+0x2ac>
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20002394 	.word	0x20002394
 80014a8:	20002388 	.word	0x20002388
 80014ac:	20002384 	.word	0x20002384
 80014b0:	20002398 	.word	0x20002398
 80014b4:	20000124 	.word	0x20000124
 80014b8:	2000239c 	.word	0x2000239c
 80014bc:	200023a0 	.word	0x200023a0
 80014c0:	2000238c 	.word	0x2000238c
 80014c4:	20002390 	.word	0x20002390
 80014c8:	200023a4 	.word	0x200023a4
 80014cc:	200023a8 	.word	0x200023a8
 80014d0:	200023a9 	.word	0x200023a9
 80014d4:	20000088 	.word	0x20000088
							unsigned long tmpAddr=g_traceHeader.g_varList[varIdx].address;
 80014d8:	4a86      	ldr	r2, [pc, #536]	; (80016f4 <DumpTrace+0x45c>)
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	3307      	adds	r3, #7
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	617b      	str	r3, [r7, #20]
							varAccessType = g_traceHeader.g_varList[varIdx].accessType;
 80014e6:	4a83      	ldr	r2, [pc, #524]	; (80016f4 <DumpTrace+0x45c>)
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	3307      	adds	r3, #7
 80014ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
							if( varAccessType == SNP_TRC_DATA_ACCESS_64BIT ) {
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d113      	bne.n	8001520 <DumpTrace+0x288>
								// Special case for doubles: do it in 2x32bits
								varAccessType = SNP_TRC_DATA_ACCESS_32BIT;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
								*pWrite = g_readFunc[varAccessType](tmpAddr);
 80014fc:	4a7e      	ldr	r2, [pc, #504]	; (80016f8 <DumpTrace+0x460>)
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	4a7d      	ldr	r2, [pc, #500]	; (80016fc <DumpTrace+0x464>)
 8001506:	6814      	ldr	r4, [r2, #0]
 8001508:	6978      	ldr	r0, [r7, #20]
 800150a:	4798      	blx	r3
 800150c:	4603      	mov	r3, r0
 800150e:	6023      	str	r3, [r4, #0]
								pWrite++;
 8001510:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <DumpTrace+0x464>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	4a79      	ldr	r2, [pc, #484]	; (80016fc <DumpTrace+0x464>)
 8001518:	6013      	str	r3, [r2, #0]
								tmpAddr+=sizeof(TraceHeaderFieldT);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3304      	adds	r3, #4
 800151e:	617b      	str	r3, [r7, #20]
 							}
							*pWrite = g_readFunc[varAccessType](tmpAddr);
 8001520:	4a75      	ldr	r2, [pc, #468]	; (80016f8 <DumpTrace+0x460>)
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	4a74      	ldr	r2, [pc, #464]	; (80016fc <DumpTrace+0x464>)
 800152a:	6814      	ldr	r4, [r2, #0]
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	4798      	blx	r3
 8001530:	4603      	mov	r3, r0
 8001532:	6023      	str	r3, [r4, #0]
							varIdx++;
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	3301      	adds	r3, #1
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
							pWrite++;
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <DumpTrace+0x464>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3304      	adds	r3, #4
 8001540:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <DumpTrace+0x464>)
 8001542:	6013      	str	r3, [r2, #0]
						while( (TraceHeaderFieldT)pWrite <= recordLastAddr ) {
 8001544:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <DumpTrace+0x464>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	4293      	cmp	r3, r2
 800154e:	d2c3      	bcs.n	80014d8 <DumpTrace+0x240>
						}
						// At the end, increment the pointer shared with the host
						recordLastAddr++;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	3301      	adds	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
						// Manage trace buffer loopback
						if( recordLastAddr + g_recordSize -1 > g_traceHeader.bufferEndAddr ) {
 8001556:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <DumpTrace+0x468>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	4413      	add	r3, r2
 800155e:	1e5a      	subs	r2, r3, #1
 8001560:	4b64      	ldr	r3, [pc, #400]	; (80016f4 <DumpTrace+0x45c>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d907      	bls.n	8001578 <DumpTrace+0x2e0>
							// There is not enough space in the buffer for a new record: restart from
							// the beginning
							recordLastAddr = g_traceHeader.bufferStartAddr;
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <DumpTrace+0x45c>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	623b      	str	r3, [r7, #32]
							pWrite = (TraceHeaderFieldT *)g_traceHeader.bufferStartAddr;
 800156e:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <DumpTrace+0x45c>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	461a      	mov	r2, r3
 8001574:	4b61      	ldr	r3, [pc, #388]	; (80016fc <DumpTrace+0x464>)
 8001576:	601a      	str	r2, [r3, #0]
#endif
					}
				}
			}  // Note that g_timestamp increments even when record is skipped by subsampling (may change in the future ?)
#ifdef USING_TRIGGER
			if( trigEval == TRIG_EVAL_EVENT ) {
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d173      	bne.n	8001666 <DumpTrace+0x3ce>
				// We just hit the trigger after PRETRIG state: let's compute the index
				// of the first record to commit to the host
				int nbPreTrigRecords;
				if( bPreTrigBufOvf == 1 ) {
 800157e:	4b61      	ldr	r3, [pc, #388]	; (8001704 <DumpTrace+0x46c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <DumpTrace+0x2fe>
					// The buffer is full with PRETRIG records
					nbPreTrigRecords = nbRecords-1; // -1 for trig event
 8001586:	4b60      	ldr	r3, [pc, #384]	; (8001708 <DumpTrace+0x470>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
					// Clear the flag for next time
					bPreTrigBufOvf = 0;
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <DumpTrace+0x46c>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e020      	b.n	80015d8 <DumpTrace+0x340>
				} else {
					// Pretrig records are between g_traceHeader.writePointer (last record
					// committed to the host) and pWrite (last record stored in buffer).
					// One must also deduce the trig event record => -1
					if( (TraceBufferFieldT)pWrite > g_traceHeader.writePointer ) {
 8001596:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <DumpTrace+0x45c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a58      	ldr	r2, [pc, #352]	; (80016fc <DumpTrace+0x464>)
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	4293      	cmp	r3, r2
 80015a0:	d20c      	bcs.n	80015bc <DumpTrace+0x324>
						nbPreTrigRecords = ((TraceBufferFieldT)pWrite - g_traceHeader.writePointer)/g_recordSize -1;
 80015a2:	4b56      	ldr	r3, [pc, #344]	; (80016fc <DumpTrace+0x464>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <DumpTrace+0x45c>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	1ad2      	subs	r2, r2, r3
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <DumpTrace+0x468>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	e00d      	b.n	80015d8 <DumpTrace+0x340>
					} else {
						nbPreTrigRecords = nbRecords - (g_traceHeader.writePointer-(TraceBufferFieldT)pWrite)/g_recordSize -1;
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <DumpTrace+0x470>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <DumpTrace+0x45c>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	494d      	ldr	r1, [pc, #308]	; (80016fc <DumpTrace+0x464>)
 80015c6:	6809      	ldr	r1, [r1, #0]
 80015c8:	1a59      	subs	r1, r3, r1
 80015ca:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <DumpTrace+0x468>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
					}
				}
				// Makes the host read pointer points to the first valid pretrig record
				if( nbPreTrigRecords > g_traceHeader.trigger.nPreTrig ) {
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <DumpTrace+0x45c>)
 80015da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d203      	bcs.n	80015ec <DumpTrace+0x354>
					// We recorded more than expected; truncate.
					nbPreTrigRecords = g_traceHeader.trigger.nPreTrig;
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <DumpTrace+0x45c>)
 80015e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015ea:	613b      	str	r3, [r7, #16]
				}
				// readPointer is the first address of the last record already read by the host. The next record to be
				// read is at address readPointer+g_recordSize. Moreover, we must also add the trig event record => +2
				if( (TraceBufferFieldT)pWrite >= (TraceHeaderFieldT)&g_dataTraceBuffer + (nbPreTrigRecords+2)*g_recordSize ) {
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	3302      	adds	r3, #2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b43      	ldr	r3, [pc, #268]	; (8001700 <DumpTrace+0x468>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fb03 f302 	mul.w	r3, r3, r2
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <DumpTrace+0x474>)
 80015fc:	4413      	add	r3, r2
 80015fe:	4a3f      	ldr	r2, [pc, #252]	; (80016fc <DumpTrace+0x464>)
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	4293      	cmp	r3, r2
 8001604:	d80d      	bhi.n	8001622 <DumpTrace+0x38a>
					g_traceHeader.readPointer = (TraceBufferFieldT)pWrite - (nbPreTrigRecords+2)*g_recordSize;
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <DumpTrace+0x464>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	3302      	adds	r3, #2
 8001610:	4619      	mov	r1, r3
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <DumpTrace+0x468>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fb03 f301 	mul.w	r3, r3, r1
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <DumpTrace+0x45c>)
 800161e:	6253      	str	r3, [r2, #36]	; 0x24
 8001620:	e01d      	b.n	800165e <DumpTrace+0x3c6>
				} else {
					// Buffer loopback: read pointer must be after pWrite
					if( nbRecords > nbPreTrigRecords + 2 ) {
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	3302      	adds	r3, #2
 8001626:	461a      	mov	r2, r3
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <DumpTrace+0x470>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d20e      	bcs.n	800164e <DumpTrace+0x3b6>
						g_traceHeader.readPointer = (TraceBufferFieldT)pWrite + (nbRecords - nbPreTrigRecords -2)*g_recordSize;
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <DumpTrace+0x470>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	3b02      	subs	r3, #2
 800163a:	4a31      	ldr	r2, [pc, #196]	; (8001700 <DumpTrace+0x468>)
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <DumpTrace+0x464>)
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <DumpTrace+0x45c>)
 800164a:	6253      	str	r3, [r2, #36]	; 0x24
 800164c:	e007      	b.n	800165e <DumpTrace+0x3c6>
					} else {
						// The full buffer will have to be displayed: point immediately after pWrite for easier overflow management
						g_traceHeader.readPointer = (TraceBufferFieldT)pWrite + g_recordSize;
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <DumpTrace+0x464>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <DumpTrace+0x468>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4413      	add	r3, r2
 800165a:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <DumpTrace+0x45c>)
 800165c:	6253      	str	r3, [r2, #36]	; 0x24
					}
				}
				g_traceHeader.readPointerCopy = g_traceHeader.readPointer;
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <DumpTrace+0x45c>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <DumpTrace+0x45c>)
 8001664:	6293      	str	r3, [r2, #40]	; 0x28
			}
			if( trigEval == TRIG_EVAL_PRE2_REC ) {
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d10d      	bne.n	8001688 <DumpTrace+0x3f0>
				// In PRETRIG state, do not commit records to the host, but simply manage
				// the (internal) overflow
				if( ((TraceBufferFieldT)pWrite == g_traceHeader.writePointer) && (recordLastAddr != (TraceHeaderFieldT)(-1)) ) {
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <DumpTrace+0x45c>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <DumpTrace+0x464>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4293      	cmp	r3, r2
 8001676:	d12b      	bne.n	80016d0 <DumpTrace+0x438>
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d027      	beq.n	80016d0 <DumpTrace+0x438>
					// At least one record was added into the buffer (because recordLastAddr != -1) then pWrite looped back to writePointer
					bPreTrigBufOvf = 1;
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <DumpTrace+0x46c>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
			if( trigEval == TRIG_EVAL_PRE2_REC ) {
 8001686:	e023      	b.n	80016d0 <DumpTrace+0x438>
				}
			} else {
				if( recordLastAddr != (TraceHeaderFieldT)(-1) ) {
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168e:	d005      	beq.n	800169c <DumpTrace+0x404>
					// A new record was added; increment write pointer now for host synchro
					g_traceHeader.writePointer = recordLastAddr;
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <DumpTrace+0x45c>)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	61d3      	str	r3, [r2, #28]
					// Duplicate for the host to be ensured the value is stable
					g_traceHeader.writePointerCopy = recordLastAddr;
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <DumpTrace+0x45c>)
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	6213      	str	r3, [r2, #32]
				}
				if( trigEval == TRIG_EVAL_EVENT ) {
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d116      	bne.n	80016d0 <DumpTrace+0x438>
					// Signal the TRIG event to the host in pre-trig mode
					// (because in this mode, using only read and write pointers to check against new records
					// may lead to deadlock condition in case nPreTrig+nbRecordsAfterTrig==nbRecords).
					// This MUST be done lastly for correct host synchronization
					g_traceHeader.trigger.state = SNP_TRC_TRIGGER_TRIGGED;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <DumpTrace+0x45c>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			if( trigEval == TRIG_EVAL_PRE2_REC ) {
 80016aa:	e011      	b.n	80016d0 <DumpTrace+0x438>
				}
			}
		} else {
			if( (trigEval == TRIG_EVAL_NO_REC) && (bHasTrigged != 0) ) {
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <DumpTrace+0x43a>
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <DumpTrace+0x478>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <DumpTrace+0x43a>
				// A trigger stop condition was hit. If the user expected it, the timestamp
				// should restart from 0 the next time
				if( g_traceHeader.trigger.mode & SNP_TRC_TRIGGER_RST_TIMESTAMP ) {
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <DumpTrace+0x45c>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <DumpTrace+0x43a>
					g_timestamp = 0;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <DumpTrace+0x47c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e000      	b.n	80016d2 <DumpTrace+0x43a>
			if( trigEval == TRIG_EVAL_PRE2_REC ) {
 80016d0:	bf00      	nop
			}
		}
#endif // USING_TRIGGER

		// Always increment the timestamp for timestamp synchro with the host according to SNP_TRC_TIMESTAMP_BASE_UNIT
		g_timestamp++;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <DumpTrace+0x47c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <DumpTrace+0x47c>)
 80016da:	6013      	str	r3, [r2, #0]
		if( g_timestamp == 0 ) {
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <DumpTrace+0x47c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d104      	bne.n	80016ee <DumpTrace+0x456>
			// Flag the overflow
			g_timestampOverflow++;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <DumpTrace+0x480>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <DumpTrace+0x480>)
 80016ec:	6013      	str	r3, [r2, #0]
		}
	}
#ifdef MEASURE_PERFORMANCE
	ResetTraceGpio();
#endif
}
 80016ee:	3734      	adds	r7, #52	; 0x34
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	200000b4 	.word	0x200000b4
 80016fc:	2000239c 	.word	0x2000239c
 8001700:	20002384 	.word	0x20002384
 8001704:	200023a8 	.word	0x200023a8
 8001708:	20002398 	.word	0x20002398
 800170c:	20000124 	.word	0x20000124
 8001710:	200023a9 	.word	0x200023a9
 8001714:	2000238c 	.word	0x2000238c
 8001718:	20002390 	.word	0x20002390

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d028      	beq.n	80018b2 <LL_TIM_OC_DisableFast+0x62>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d023      	beq.n	80018ae <LL_TIM_OC_DisableFast+0x5e>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d01e      	beq.n	80018aa <LL_TIM_OC_DisableFast+0x5a>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b40      	cmp	r3, #64	; 0x40
 8001870:	d019      	beq.n	80018a6 <LL_TIM_OC_DisableFast+0x56>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001878:	d013      	beq.n	80018a2 <LL_TIM_OC_DisableFast+0x52>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001880:	d00d      	beq.n	800189e <LL_TIM_OC_DisableFast+0x4e>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001888:	d007      	beq.n	800189a <LL_TIM_OC_DisableFast+0x4a>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d101      	bne.n	8001896 <LL_TIM_OC_DisableFast+0x46>
 8001892:	2307      	movs	r3, #7
 8001894:	e00e      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 8001896:	2308      	movs	r3, #8
 8001898:	e00c      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 800189a:	2306      	movs	r3, #6
 800189c:	e00a      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 800189e:	2305      	movs	r3, #5
 80018a0:	e008      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e006      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 80018a6:	2303      	movs	r3, #3
 80018a8:	e004      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e002      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_TIM_OC_DisableFast+0x64>
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3318      	adds	r3, #24
 80018ba:	4619      	mov	r1, r3
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LL_TIM_OC_DisableFast+0x9c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	440b      	add	r3, r1
 80018c4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	4908      	ldr	r1, [pc, #32]	; (80018f0 <LL_TIM_OC_DisableFast+0xa0>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	4619      	mov	r1, r3
 80018d2:	2304      	movs	r3, #4
 80018d4:	408b      	lsls	r3, r1
 80018d6:	43db      	mvns	r3, r3
 80018d8:	401a      	ands	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	601a      	str	r2, [r3, #0]

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	08004654 	.word	0x08004654
 80018f0:	08004660 	.word	0x08004660

080018f4 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d028      	beq.n	8001956 <LL_TIM_OC_EnablePreload+0x62>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d023      	beq.n	8001952 <LL_TIM_OC_EnablePreload+0x5e>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b10      	cmp	r3, #16
 800190e:	d01e      	beq.n	800194e <LL_TIM_OC_EnablePreload+0x5a>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b40      	cmp	r3, #64	; 0x40
 8001914:	d019      	beq.n	800194a <LL_TIM_OC_EnablePreload+0x56>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800191c:	d013      	beq.n	8001946 <LL_TIM_OC_EnablePreload+0x52>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001924:	d00d      	beq.n	8001942 <LL_TIM_OC_EnablePreload+0x4e>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192c:	d007      	beq.n	800193e <LL_TIM_OC_EnablePreload+0x4a>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d101      	bne.n	800193a <LL_TIM_OC_EnablePreload+0x46>
 8001936:	2307      	movs	r3, #7
 8001938:	e00e      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 800193a:	2308      	movs	r3, #8
 800193c:	e00c      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 800193e:	2306      	movs	r3, #6
 8001940:	e00a      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 8001942:	2305      	movs	r3, #5
 8001944:	e008      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 8001946:	2304      	movs	r3, #4
 8001948:	e006      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_TIM_OC_EnablePreload+0x64>
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3318      	adds	r3, #24
 800195e:	4619      	mov	r1, r3
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <LL_TIM_OC_EnablePreload+0x98>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	440b      	add	r3, r1
 8001968:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <LL_TIM_OC_EnablePreload+0x9c>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	4619      	mov	r1, r3
 8001976:	2308      	movs	r3, #8
 8001978:	408b      	lsls	r3, r1
 800197a:	431a      	orrs	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	08004654 	.word	0x08004654
 8001990:	08004660 	.word	0x08004660

08001994 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80019a6:	f023 0307 	bic.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @note   OC5 and OC6 are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	605a      	str	r2, [r3, #4]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4013      	ands	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000

08001a5c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	4907      	ldr	r1, [pc, #28]	; (8001a88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a90:	f000 faf2 	bl	8002078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a94:	f000 f809 	bl	8001aaa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a98:	f000 f936 	bl	8001d08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a9c:	f000 f866 	bl	8001b6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8001aa0:	f000 f9a0 	bl	8001de4 <hw_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	main_loop();
 8001aa4:	f000 f9fe 	bl	8001ea4 <main_loop>
 8001aa8:	e7fc      	b.n	8001aa4 <main+0x18>

08001aaa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b0a6      	sub	sp, #152	; 0x98
 8001aae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ab4:	2228      	movs	r2, #40	; 0x28
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fdb7 	bl	800462c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2258      	movs	r2, #88	; 0x58
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 fda9 	bl	800462c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ada:	2302      	movs	r3, #2
 8001adc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001af6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fc01 	bl	8002310 <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b14:	f000 f910 	bl	8001d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b28:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b32:	2102      	movs	r1, #2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fb01 	bl	800313c <HAL_RCC_ClockConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b40:	f000 f8fa 	bl	8001d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8001b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fcd8 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b5e:	f000 f8eb 	bl	8001d38 <Error_Handler>
  }
}
 8001b62:	bf00      	nop
 8001b64:	3798      	adds	r7, #152	; 0x98
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b09e      	sub	sp, #120	; 0x78
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b86:	2220      	movs	r2, #32
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fd4e 	bl	800462c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2228      	movs	r2, #40	; 0x28
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fd47 	bl	800462c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001bae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001bb2:	f7ff ff53 	bl	8001a5c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001bb6:	f7ff fdb1 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe01 	bl	80017c8 <NVIC_EncodePriority>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	201b      	movs	r0, #27
 8001bcc:	f7ff fdd2 	bl	8001774 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bd0:	201b      	movs	r0, #27
 8001bd2:	f7ff fdb1 	bl	8001738 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = TIM1_ARR;
 8001be0:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8001be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001bee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4843      	ldr	r0, [pc, #268]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001bf6:	f002 f8ab 	bl	8003d50 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001bfa:	4842      	ldr	r0, [pc, #264]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001bfc:	f7ff fe17 	bl	800182e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c00:	2100      	movs	r1, #0
 8001c02:	4840      	ldr	r0, [pc, #256]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c04:	f7ff fec6 	bl	8001994 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	483e      	ldr	r0, [pc, #248]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c0c:	f7ff fe72 	bl	80018f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c10:	2360      	movs	r3, #96	; 0x60
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c34:	461a      	mov	r2, r3
 8001c36:	2101      	movs	r1, #1
 8001c38:	4832      	ldr	r0, [pc, #200]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c3a:	f002 f921 	bl	8003e80 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4830      	ldr	r0, [pc, #192]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c42:	f7ff fe05 	bl	8001850 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8001c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4a:	482e      	ldr	r0, [pc, #184]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c4c:	f7ff fe52 	bl	80018f4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = (TIM1_ARR -10);
 8001c58:	f641 03f5 	movw	r3, #6389	; 0x18f5
 8001c5c:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001c5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c62:	461a      	mov	r2, r3
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	4826      	ldr	r0, [pc, #152]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c6a:	f002 f909 	bl	8003e80 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8001c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c72:	4824      	ldr	r0, [pc, #144]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c74:	f7ff fdec 	bl	8001850 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4822      	ldr	r0, [pc, #136]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c7c:	f7ff fe9f 	bl	80019be <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001c80:	2100      	movs	r1, #0
 8001c82:	4820      	ldr	r0, [pc, #128]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c84:	f7ff feae 	bl	80019e4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001c88:	481e      	ldr	r0, [pc, #120]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001c8a:	f7ff febe 	bl	8001a0a <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <MX_TIM1_Init+0x198>)
 8001cc8:	f002 f928 	bl	8003f1c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ccc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001cd0:	f7ff feac 	bl	8001a2c <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA8   ------> TIM1_CH1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001cea:	2306      	movs	r3, #6
 8001cec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf6:	f001 ff2a 	bl	8003b4e <LL_GPIO_Init>

}
 8001cfa:	bf00      	nop
 8001cfc:	3778      	adds	r7, #120	; 0x78
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40012c00 	.word	0x40012c00

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_GPIO_Init+0x2c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <MX_GPIO_Init+0x2c>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_GPIO_Init+0x2c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_TIM_EnableCounter>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_TIM_CC_EnableChannel>:
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1a      	ldr	r2, [r3, #32]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	621a      	str	r2, [r3, #32]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f06f 0210 	mvn.w	r2, #16
 8001db6:	611a      	str	r2, [r3, #16]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_TIM_EnableIT_CC4>:
  * @rmtoll DIER         CC4IE         LL_TIM_EnableIT_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC4(TIM_TypeDef *TIMx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC4IE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f043 0210 	orr.w	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <hw_init>:
int cnt;

float signal1, signal2, signal3, signalw;

void hw_init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	// hardware
	LL_TIM_EnableCounter(TIM1);
 8001de8:	4825      	ldr	r0, [pc, #148]	; (8001e80 <hw_init+0x9c>)
 8001dea:	f7ff ffac 	bl	8001d46 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8001dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df2:	4823      	ldr	r0, [pc, #140]	; (8001e80 <hw_init+0x9c>)
 8001df4:	f7ff ffb7 	bl	8001d66 <LL_TIM_CC_EnableChannel>

	LL_TIM_ClearFlag_CC4(TIM1);
 8001df8:	4821      	ldr	r0, [pc, #132]	; (8001e80 <hw_init+0x9c>)
 8001dfa:	f7ff ffd5 	bl	8001da8 <LL_TIM_ClearFlag_CC4>
	LL_TIM_EnableIT_CC4(TIM1);
 8001dfe:	4820      	ldr	r0, [pc, #128]	; (8001e80 <hw_init+0x9c>)
 8001e00:	f7ff ffe0 	bl	8001dc4 <LL_TIM_EnableIT_CC4>

	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001e04:	2101      	movs	r1, #1
 8001e06:	481e      	ldr	r0, [pc, #120]	; (8001e80 <hw_init+0x9c>)
 8001e08:	f7ff ffad 	bl	8001d66 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableAllOutputs(TIM1);
 8001e0c:	481c      	ldr	r0, [pc, #112]	; (8001e80 <hw_init+0x9c>)
 8001e0e:	f7ff ffbb 	bl	8001d88 <LL_TIM_EnableAllOutputs>

	// software
	pireg_current_1.Ts = capacitor_1.Ts = filter_1.Ts = ((float)TIM1_ARR + 1.f)/(float)SystemCoreClock;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <hw_init+0xa0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001e88 <hw_init+0xa4>
 8001e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <hw_init+0xa8>)
 8001e28:	edc3 7a00 	vstr	s15, [r3]
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <hw_init+0xa8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <hw_init+0xac>)
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <hw_init+0xac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <hw_init+0xb0>)
 8001e3a:	6013      	str	r3, [r2, #0]

	filter_1.tau = 0.5;				// seconds
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <hw_init+0xa8>)
 8001e3e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001e42:	60da      	str	r2, [r3, #12]
	filter_lp_init(&filter_1);
 8001e44:	4811      	ldr	r0, [pc, #68]	; (8001e8c <hw_init+0xa8>)
 8001e46:	f7ff f90c 	bl	8001062 <filter_lp_init>

	capacitor_1.gain = 1 / 1.0f; // 1 / C
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <hw_init+0xac>)
 8001e4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e50:	605a      	str	r2, [r3, #4]
	integrator_gain_init(&capacitor_1);
 8001e52:	480f      	ldr	r0, [pc, #60]	; (8001e90 <hw_init+0xac>)
 8001e54:	f7ff f945 	bl	80010e2 <integrator_gain_init>

	pireg_current_1.Kp = 0.0001f;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <hw_init+0xb0>)
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <hw_init+0xb4>)
 8001e5c:	605a      	str	r2, [r3, #4]
	pireg_current_1.Ti = 10.0f;
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <hw_init+0xb0>)
 8001e60:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <hw_init+0xb8>)
 8001e62:	609a      	str	r2, [r3, #8]
	pireg_current_1.h_lim = 1.0f;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <hw_init+0xb0>)
 8001e66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e6a:	615a      	str	r2, [r3, #20]
	pireg_current_1.l_lim = -1.0f;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <hw_init+0xb0>)
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <hw_init+0xbc>)
 8001e70:	619a      	str	r2, [r3, #24]

	regPI_p_init(&pireg_current_1);
 8001e72:	4808      	ldr	r0, [pc, #32]	; (8001e94 <hw_init+0xb0>)
 8001e74:	f7ff f998 	bl	80011a8 <regPI_p_init>

	ClearBuffer();
 8001e78:	f7ff f9d0 	bl	800121c <ClearBuffer>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	200000c0 	.word	0x200000c0
 8001e88:	45c80000 	.word	0x45c80000
 8001e8c:	200023e0 	.word	0x200023e0
 8001e90:	200023d0 	.word	0x200023d0
 8001e94:	200023ac 	.word	0x200023ac
 8001e98:	38d1b717 	.word	0x38d1b717
 8001e9c:	41200000 	.word	0x41200000
 8001ea0:	bf800000 	.word	0xbf800000

08001ea4 <main_loop>:

void main_loop(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	filter_lp_init(&filter_1);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <main_loop+0x14>)
 8001eaa:	f7ff f8da 	bl	8001062 <filter_lp_init>
	regPI_p_init(&pireg_current_1);
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <main_loop+0x18>)
 8001eb0:	f7ff f97a 	bl	80011a8 <regPI_p_init>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200023e0 	.word	0x200023e0
 8001ebc:	200023ac 	.word	0x200023ac

08001ec0 <periodic_task>:

void periodic_task(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	filter_lp(signal1, &signal2, &filter_1);
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <periodic_task+0x4c>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	4911      	ldr	r1, [pc, #68]	; (8001f10 <periodic_task+0x50>)
 8001ecc:	4811      	ldr	r0, [pc, #68]	; (8001f14 <periodic_task+0x54>)
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f7ff f8a5 	bl	8001020 <filter_lp>
	integrator_gain(signal1, &signal3, &capacitor_1);
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <periodic_task+0x4c>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	490e      	ldr	r1, [pc, #56]	; (8001f18 <periodic_task+0x58>)
 8001ede:	480f      	ldr	r0, [pc, #60]	; (8001f1c <periodic_task+0x5c>)
 8001ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee4:	f7ff f8e1 	bl	80010aa <integrator_gain>
	regPI_p(signalw - signal3, &signal1, &pireg_current_1);
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <periodic_task+0x60>)
 8001eea:	ed93 7a00 	vldr	s14, [r3]
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <periodic_task+0x5c>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef8:	490a      	ldr	r1, [pc, #40]	; (8001f24 <periodic_task+0x64>)
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <periodic_task+0x4c>)
 8001efc:	eeb0 0a67 	vmov.f32	s0, s15
 8001f00:	f7ff f904 	bl	800110c <regPI_p>

	DumpTrace();
 8001f04:	f7ff f9c8 	bl	8001298 <DumpTrace>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200023f4 	.word	0x200023f4
 8001f10:	200023e0 	.word	0x200023e0
 8001f14:	200023cc 	.word	0x200023cc
 8001f18:	200023d0 	.word	0x200023d0
 8001f1c:	200023dc 	.word	0x200023dc
 8001f20:	200023f0 	.word	0x200023f0
 8001f24:	200023ac 	.word	0x200023ac

08001f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x44>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_MspInit+0x44>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_MspInit+0x44>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_MspInit+0x44>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_MspInit+0x44>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_MspInit+0x44>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000

08001f70 <LL_TIM_ClearFlag_CC4>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f06f 0210 	mvn.w	r2, #16
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f890 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  LL_TIM_ClearFlag_CC4(TIM1);
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <TIM1_CC_IRQHandler+0x14>)
 8001fee:	f7ff ffbf 	bl	8001f70 <LL_TIM_ClearFlag_CC4>
  periodic_task();
 8001ff2:	f7ff ff65 	bl	8001ec0 <periodic_task>
  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00

08002000 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <SystemInit+0x20>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <SystemInit+0x20>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800205c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <LoopForever+0x6>)
  ldr r1, =_edata
 800202a:	490e      	ldr	r1, [pc, #56]	; (8002064 <LoopForever+0xa>)
  ldr r2, =_sidata
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <LoopForever+0xe>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002040:	4c0b      	ldr	r4, [pc, #44]	; (8002070 <LoopForever+0x16>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800204e:	f7ff ffd7 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002052:	f002 fac7 	bl	80045e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002056:	f7ff fd19 	bl	8001a8c <main>

0800205a <LoopForever>:

LoopForever:
    b LoopForever
 800205a:	e7fe      	b.n	800205a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800205c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002064:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002068:	080046a4 	.word	0x080046a4
  ldr r2, =_sbss
 800206c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002070:	200023fc 	.word	0x200023fc

08002074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC1_2_IRQHandler>
	...

08002078 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_Init+0x28>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_Init+0x28>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002088:	2003      	movs	r0, #3
 800208a:	f000 f90d 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f808 	bl	80020a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002094:	f7ff ff48 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40022000 	.word	0x40022000

080020a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_InitTick+0x54>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x58>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f917 	bl	80022f6 <HAL_SYSTICK_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00e      	b.n	80020f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	d80a      	bhi.n	80020ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d8:	2200      	movs	r2, #0
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f000 f8ed 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <HAL_InitTick+0x5c>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200000c0 	.word	0x200000c0
 80020fc:	200000c8 	.word	0x200000c8
 8002100:	200000c4 	.word	0x200000c4

08002104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x20>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_IncTick+0x24>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_IncTick+0x24>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200000c8 	.word	0x200000c8
 8002128:	200023f8 	.word	0x200023f8

0800212c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_GetTick+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200023f8 	.word	0x200023f8

08002144 <__NVIC_SetPriorityGrouping>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff47 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff5c 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffb0 	bl	8002264 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002316:	af00      	add	r7, sp, #0
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f000 bf01 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8160 	beq.w	80025fa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800233a:	4bae      	ldr	r3, [pc, #696]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d00c      	beq.n	8002360 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002346:	4bab      	ldr	r3, [pc, #684]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d159      	bne.n	8002406 <HAL_RCC_OscConfig+0xf6>
 8002352:	4ba8      	ldr	r3, [pc, #672]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800235a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235e:	d152      	bne.n	8002406 <HAL_RCC_OscConfig+0xf6>
 8002360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002364:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002374:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0x82>
 800238c:	4b99      	ldr	r3, [pc, #612]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0xae>
 8002392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002396:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023aa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023ba:	4b8e      	ldr	r3, [pc, #568]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023c6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80023d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0220 	orr.w	r2, r2, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8102 	beq.w	80025f8 <HAL_RCC_OscConfig+0x2e8>
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80fc 	bne.w	80025f8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f000 be93 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x110>
 8002412:	4b78      	ldr	r3, [pc, #480]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a77      	ldr	r2, [pc, #476]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e030      	b.n	8002482 <HAL_RCC_OscConfig+0x172>
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x134>
 800242a:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a71      	ldr	r2, [pc, #452]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01e      	b.n	8002482 <HAL_RCC_OscConfig+0x172>
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x15a>
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a67      	ldr	r2, [pc, #412]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a64      	ldr	r2, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x172>
 800246a:	4b62      	ldr	r3, [pc, #392]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a61      	ldr	r2, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d059      	beq.n	8002540 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fe4e 	bl	800212c <HAL_GetTick>
 8002490:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002496:	f7ff fe49 	bl	800212c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d902      	bls.n	80024ac <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	f000 be40 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80024c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0x1ce>
 80024d8:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x1fa>
 80024de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80024f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800250e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002512:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800251e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002522:	fab2 f282 	clz	r2, r2
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f042 0220 	orr.w	r2, r2, #32
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f002 021f 	and.w	r2, r2, #31
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ab      	beq.n	8002496 <HAL_RCC_OscConfig+0x186>
 800253e:	e05c      	b.n	80025fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fdf4 	bl	800212c <HAL_GetTick>
 8002544:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254a:	f7ff fdef 	bl	800212c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d902      	bls.n	8002560 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	f000 bde6 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>
 8002560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002564:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002574:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_RCC_OscConfig+0x282>
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x2ae>
 8002592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002596:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_RCC_OscConfig+0x2e4>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80025d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ab      	bne.n	800254a <HAL_RCC_OscConfig+0x23a>
 80025f2:	e002      	b.n	80025fa <HAL_RCC_OscConfig+0x2ea>
 80025f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8170 	beq.w	80028ea <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800260a:	4bd0      	ldr	r3, [pc, #832]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002616:	4bcd      	ldr	r3, [pc, #820]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d16d      	bne.n	80026fe <HAL_RCC_OscConfig+0x3ee>
 8002622:	4bca      	ldr	r3, [pc, #808]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262e:	d166      	bne.n	80026fe <HAL_RCC_OscConfig+0x3ee>
 8002630:	2302      	movs	r3, #2
 8002632:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002642:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_RCC_OscConfig+0x350>
 800265a:	4bbc      	ldr	r3, [pc, #752]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	e013      	b.n	8002688 <HAL_RCC_OscConfig+0x378>
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002672:	2302      	movs	r3, #2
 8002674:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002678:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002684:	4bb1      	ldr	r3, [pc, #708]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	2202      	movs	r2, #2
 800268a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800268e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002692:	fa92 f2a2 	rbit	r2, r2
 8002696:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800269a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x3ba>
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f000 bd31 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	21f8      	movs	r1, #248	; 0xf8
 80026da:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80026e2:	fa91 f1a1 	rbit	r1, r1
 80026e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80026ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026ee:	fab1 f181 	clz	r1, r1
 80026f2:	b2c9      	uxtb	r1, r1
 80026f4:	408b      	lsls	r3, r1
 80026f6:	4995      	ldr	r1, [pc, #596]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fc:	e0f5      	b.n	80028ea <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8085 	beq.w	8002814 <HAL_RCC_OscConfig+0x504>
 800270a:	2301      	movs	r3, #1
 800270c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800271c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	461a      	mov	r2, r3
 8002732:	2301      	movs	r3, #1
 8002734:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff fcf9 	bl	800212c <HAL_GetTick>
 800273a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002740:	f7ff fcf4 	bl	800212c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d902      	bls.n	8002756 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	f000 bceb 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002768:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x476>
 8002780:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e013      	b.n	80027ae <HAL_RCC_OscConfig+0x49e>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800279e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027aa:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2202      	movs	r2, #2
 80027b0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80027b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80027b8:	fa92 f2a2 	rbit	r2, r2
 80027bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80027c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f042 0220 	orr.w	r2, r2, #32
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f002 021f 	and.w	r2, r2, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f202 	lsl.w	r2, r1, r2
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0af      	beq.n	8002740 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b5a      	ldr	r3, [pc, #360]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	21f8      	movs	r1, #248	; 0xf8
 80027f0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80027f8:	fa91 f1a1 	rbit	r1, r1
 80027fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002800:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002804:	fab1 f181 	clz	r1, r1
 8002808:	b2c9      	uxtb	r1, r1
 800280a:	408b      	lsls	r3, r1
 800280c:	494f      	ldr	r1, [pc, #316]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
 8002812:	e06a      	b.n	80028ea <HAL_RCC_OscConfig+0x5da>
 8002814:	2301      	movs	r3, #1
 8002816:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002826:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	461a      	mov	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff fc74 	bl	800212c <HAL_GetTick>
 8002844:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7ff fc6f 	bl	800212c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	f000 bc66 	b.w	800312c <HAL_RCC_OscConfig+0xe1c>
 8002860:	2302      	movs	r3, #2
 8002862:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002872:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_RCC_OscConfig+0x580>
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e013      	b.n	80028b8 <HAL_RCC_OscConfig+0x5a8>
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028a2:	2302      	movs	r3, #2
 80028a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_OscConfig+0x63c>)
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2202      	movs	r2, #2
 80028ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80028be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80028ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028ce:	fab2 f282 	clz	r2, r2
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	f042 0220 	orr.w	r2, r2, #32
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f002 021f 	and.w	r2, r2, #31
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1af      	bne.n	800284a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80da 	beq.w	8002aae <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d069      	beq.n	80029d8 <HAL_RCC_OscConfig+0x6c8>
 8002904:	2301      	movs	r3, #1
 8002906:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002916:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x640>)
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	461a      	mov	r2, r3
 800292a:	2301      	movs	r3, #1
 800292c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7ff fbfd 	bl	800212c <HAL_GetTick>
 8002932:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	e00d      	b.n	8002954 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7ff fbf8 	bl	800212c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d905      	bls.n	8002954 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e3ef      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 800294c:	40021000 	.word	0x40021000
 8002950:	10908120 	.word	0x10908120
 8002954:	2302      	movs	r3, #2
 8002956:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800296c:	2202      	movs	r2, #2
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002984:	2202      	movs	r2, #2
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002996:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002998:	4ba4      	ldr	r3, [pc, #656]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 800299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029a0:	2102      	movs	r1, #2
 80029a2:	6019      	str	r1, [r3, #0]
 80029a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f1a3 	rbit	r1, r3
 80029ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029b2:	6019      	str	r1, [r3, #0]
  return result;
 80029b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0b0      	beq.n	8002938 <HAL_RCC_OscConfig+0x628>
 80029d6:	e06a      	b.n	8002aae <HAL_RCC_OscConfig+0x79e>
 80029d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029ee:	601a      	str	r2, [r3, #0]
  return result;
 80029f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b8c      	ldr	r3, [pc, #560]	; (8002c30 <HAL_RCC_OscConfig+0x920>)
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	461a      	mov	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff fb8f 	bl	800212c <HAL_GetTick>
 8002a0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a12:	e009      	b.n	8002a28 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb8a 	bl	800212c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e381      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 8002a28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a44:	2202      	movs	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a78:	2102      	movs	r1, #2
 8002a7a:	6019      	str	r1, [r3, #0]
 8002a7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f1a3 	rbit	r1, r3
 8002a86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a8a:	6019      	str	r1, [r3, #0]
  return result;
 8002a8c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1b2      	bne.n	8002a14 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8157 	beq.w	8002d6c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d112      	bne.n	8002af6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a55      	ldr	r2, [pc, #340]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_OscConfig+0x924>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x924>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <HAL_RCC_OscConfig+0x924>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7ff fb0d 	bl	800212c <HAL_GetTick>
 8002b12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	e009      	b.n	8002b2c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7ff fb08 	bl	800212c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e2ff      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCC_OscConfig+0x924>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x840>
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	e02f      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a0>
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x864>
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a33      	ldr	r2, [pc, #204]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4a30      	ldr	r2, [pc, #192]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6213      	str	r3, [r2, #32]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a0>
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x888>
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x8a0>
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d06a      	beq.n	8002c90 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7ff fab7 	bl	800212c <HAL_GetTick>
 8002bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fab2 	bl	800212c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e2a7      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 8002bdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c0a:	601a      	str	r2, [r3, #0]
  return result;
 8002c0c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d108      	bne.n	8002c38 <HAL_RCC_OscConfig+0x928>
 8002c26:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <HAL_RCC_OscConfig+0x91c>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x944>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	10908120 	.word	0x10908120
 8002c34:	40007000 	.word	0x40007000
 8002c38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f2a3 	rbit	r2, r3
 8002c4a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4bc0      	ldr	r3, [pc, #768]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c58:	2102      	movs	r1, #2
 8002c5a:	6011      	str	r1, [r2, #0]
 8002c5c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	fa92 f1a2 	rbit	r1, r2
 8002c66:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c6a:	6011      	str	r1, [r2, #0]
  return result;
 8002c6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d09a      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x8b4>
 8002c8e:	e063      	b.n	8002d58 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7ff fa4c 	bl	800212c <HAL_GetTick>
 8002c94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7ff fa47 	bl	800212c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e23c      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 8002cb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cce:	2202      	movs	r2, #2
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ce0:	601a      	str	r2, [r3, #0]
  return result;
 8002ce2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ce6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_OscConfig+0x9f2>
 8002cfc:	4b95      	ldr	r3, [pc, #596]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	e00d      	b.n	8002d1e <HAL_RCC_OscConfig+0xa0e>
 8002d02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d06:	2202      	movs	r2, #2
 8002d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	fa93 f2a3 	rbit	r2, r3
 8002d14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d22:	2102      	movs	r1, #2
 8002d24:	6011      	str	r1, [r2, #0]
 8002d26:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	fa92 f1a2 	rbit	r1, r2
 8002d30:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d34:	6011      	str	r1, [r2, #0]
  return result;
 8002d36:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	f002 021f 	and.w	r2, r2, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1a0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d58:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d60:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a7b      	ldr	r2, [pc, #492]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 81d9 	beq.w	800312a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d78:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	f000 81a6 	beq.w	80030d2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f040 811e 	bne.w	8002fce <HAL_RCC_OscConfig+0xcbe>
 8002d92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002daa:	601a      	str	r2, [r3, #0]
  return result;
 8002dac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002db0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f9b0 	bl	800212c <HAL_GetTick>
 8002dcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff f9ab 	bl	800212c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1a2      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 8002de6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dfe:	601a      	str	r2, [r3, #0]
  return result;
 8002e00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0xb10>
 8002e1a:	4b4e      	ldr	r3, [pc, #312]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0xb48>
 8002e20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e60:	6011      	str	r1, [r2, #0]
 8002e62:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fa92 f1a2 	rbit	r1, r2
 8002e6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e70:	6011      	str	r1, [r2, #0]
  return result;
 8002e72:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d19e      	bne.n	8002dd2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e94:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f023 020f 	bic.w	r2, r3, #15
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	492c      	ldr	r1, [pc, #176]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a19      	ldr	r1, [r3, #32]
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	4925      	ldr	r1, [pc, #148]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002edc:	601a      	str	r2, [r3, #0]
  return result;
 8002ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ee2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7ff f917 	bl	800212c <HAL_GetTick>
 8002efe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f02:	e009      	b.n	8002f18 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7ff f912 	bl	800212c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e109      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 8002f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f30:	601a      	str	r2, [r3, #0]
  return result;
 8002f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCC_OscConfig+0xc48>
 8002f4c:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <HAL_RCC_OscConfig+0xc44>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e01e      	b.n	8002f90 <HAL_RCC_OscConfig+0xc80>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0xe28>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f98:	6011      	str	r1, [r2, #0]
 8002f9a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	fa92 f1a2 	rbit	r1, r2
 8002fa4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fa8:	6011      	str	r1, [r2, #0]
  return result;
 8002faa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	fab2 f282 	clz	r2, r2
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f042 0220 	orr.w	r2, r2, #32
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f002 021f 	and.w	r2, r2, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d09b      	beq.n	8002f04 <HAL_RCC_OscConfig+0xbf4>
 8002fcc:	e0ad      	b.n	800312a <HAL_RCC_OscConfig+0xe1a>
 8002fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	2300      	movs	r3, #0
 8003002:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff f892 	bl	800212c <HAL_GetTick>
 8003008:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300c:	e009      	b.n	8003022 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300e:	f7ff f88d 	bl	800212c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e084      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
 8003022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003026:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800303a:	601a      	str	r2, [r3, #0]
  return result;
 800303c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003040:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_RCC_OscConfig+0xd4c>
 8003056:	4b38      	ldr	r3, [pc, #224]	; (8003138 <HAL_RCC_OscConfig+0xe28>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	e01b      	b.n	8003094 <HAL_RCC_OscConfig+0xd84>
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 0320 	add.w	r3, r7, #32
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f107 0318 	add.w	r3, r7, #24
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCC_OscConfig+0xe28>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f107 0214 	add.w	r2, r7, #20
 8003098:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	f107 0214 	add.w	r2, r7, #20
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	fa92 f1a2 	rbit	r1, r2
 80030a8:	f107 0210 	add.w	r2, r7, #16
 80030ac:	6011      	str	r1, [r2, #0]
  return result;
 80030ae:	f107 0210 	add.w	r2, r7, #16
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f042 0220 	orr.w	r2, r2, #32
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f002 021f 	and.w	r2, r2, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d19e      	bne.n	800300e <HAL_RCC_OscConfig+0xcfe>
 80030d0:	e02b      	b.n	800312a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e025      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0xe28>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_RCC_OscConfig+0xe28>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030f4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d111      	bne.n	8003126 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003102:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003110:	429a      	cmp	r2, r3
 8003112:	d108      	bne.n	8003126 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b09e      	sub	sp, #120	; 0x78
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e162      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b90      	ldr	r3, [pc, #576]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d910      	bls.n	8003184 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	498b      	ldr	r1, [pc, #556]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b89      	ldr	r3, [pc, #548]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e14a      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b82      	ldr	r3, [pc, #520]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	497f      	ldr	r1, [pc, #508]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80dc 	beq.w	8003368 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d13c      	bne.n	8003232 <HAL_RCC_ClockConfig+0xf6>
 80031b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xa6>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	e00f      	b.n	8003202 <HAL_RCC_ClockConfig+0xc6>
 80031e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	667b      	str	r3, [r7, #100]	; 0x64
 80031f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f4:	663b      	str	r3, [r7, #96]	; 0x60
 80031f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031fe:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003206:	65ba      	str	r2, [r7, #88]	; 0x58
 8003208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800320a:	fa92 f2a2 	rbit	r2, r2
 800320e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0220 	orr.w	r2, r2, #32
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d17b      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0f3      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d13c      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x178>
 800323a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_RCC_ClockConfig+0x128>
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	e00f      	b.n	8003284 <HAL_RCC_ClockConfig+0x148>
 8003264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003268:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
 8003272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
 8003278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003280:	4b46      	ldr	r3, [pc, #280]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003288:	63ba      	str	r2, [r7, #56]	; 0x38
 800328a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d13a      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b2      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
 80032b4:	2302      	movs	r3, #2
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_RCC_ClockConfig+0x1a0>
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e00d      	b.n	80032f8 <HAL_RCC_ClockConfig+0x1bc>
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	2302      	movs	r3, #2
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2202      	movs	r2, #2
 80032fa:	61ba      	str	r2, [r7, #24]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	617a      	str	r2, [r7, #20]
  return result;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0220 	orr.w	r2, r2, #32
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e079      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	491a      	ldr	r1, [pc, #104]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7fe fef8 	bl	800212c <HAL_GetTick>
 800333c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fef4 	bl	800212c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e061      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_ClockConfig+0x260>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d214      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4906      	ldr	r1, [pc, #24]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_ClockConfig+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e040      	b.n	800341a <HAL_RCC_ClockConfig+0x2de>
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	491a      	ldr	r1, [pc, #104]	; (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4912      	ldr	r1, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033de:	f000 f829 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033e2:	4601      	mov	r1, r0
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCC_ClockConfig+0x2e8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ec:	22f0      	movs	r2, #240	; 0xf0
 80033ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	fa92 f2a2 	rbit	r2, r2
 80033f6:	60fa      	str	r2, [r7, #12]
  return result;
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	fab2 f282 	clz	r2, r2
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	40d3      	lsrs	r3, r2
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x2ec>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	fa21 f303 	lsr.w	r3, r1, r3
 800340a:	4a08      	ldr	r2, [pc, #32]	; (800342c <HAL_RCC_ClockConfig+0x2f0>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <HAL_RCC_ClockConfig+0x2f4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fe46 	bl	80020a4 <HAL_InitTick>
  
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3778      	adds	r7, #120	; 0x78
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	0800466c 	.word	0x0800466c
 800342c:	200000c0 	.word	0x200000c0
 8003430:	200000c4 	.word	0x200000c4

08003434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b08b      	sub	sp, #44	; 0x2c
 8003438:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b04      	cmp	r3, #4
 800345c:	d002      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x30>
 800345e:	2b08      	cmp	r3, #8
 8003460:	d003      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x36>
 8003462:	e03f      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003466:	623b      	str	r3, [r7, #32]
      break;
 8003468:	e03f      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003470:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003474:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	fa92 f2a2 	rbit	r2, r2
 800347c:	607a      	str	r2, [r7, #4]
  return result;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	40d3      	lsrs	r3, r2
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_RCC_GetSysClockFreq+0xcc>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	220f      	movs	r2, #15
 8003498:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	60fa      	str	r2, [r7, #12]
  return result;
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	40d3      	lsrs	r3, r2
 80034ac:	4a15      	ldr	r2, [pc, #84]	; (8003504 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034bc:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e007      	b.n	80034de <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ce:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	623b      	str	r3, [r7, #32]
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80034e6:	623b      	str	r3, [r7, #32]
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	372c      	adds	r7, #44	; 0x2c
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40021000 	.word	0x40021000
 80034fc:	007a1200 	.word	0x007a1200
 8003500:	0800467c 	.word	0x0800467c
 8003504:	0800468c 	.word	0x0800468c

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b092      	sub	sp, #72	; 0x48
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80d4 	beq.w	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352c:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10e      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003542:	61d3      	str	r3, [r2, #28]
 8003544:	4b48      	ldr	r3, [pc, #288]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b42      	ldr	r3, [pc, #264]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a41      	ldr	r2, [pc, #260]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fe fddd 	bl	800212c <HAL_GetTick>
 8003572:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fe fdd9 	bl	800212c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d901      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1d6      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800359e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8084 	beq.w	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d07c      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	461a      	mov	r2, r3
 80035de:	2301      	movs	r3, #1
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	461a      	mov	r2, r3
 8003602:	2300      	movs	r3, #0
 8003604:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d04b      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe fd89 	bl	800212c <HAL_GetTick>
 800361a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe fd85 	bl	800212c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e180      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003634:	2302      	movs	r3, #2
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
 8003640:	2302      	movs	r3, #2
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	61fb      	str	r3, [r7, #28]
  return result;
 800364c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d108      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003662:	4b01      	ldr	r3, [pc, #4]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	e00d      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	10908100 	.word	0x10908100
 8003674:	2302      	movs	r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	4ba0      	ldr	r3, [pc, #640]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2202      	movs	r2, #2
 8003686:	613a      	str	r2, [r7, #16]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	fa92 f2a2 	rbit	r2, r2
 800368e:	60fa      	str	r2, [r7, #12]
  return result;
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fab2 f282 	clz	r2, r2
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f002 021f 	and.w	r2, r2, #31
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0b7      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036ae:	4b95      	ldr	r3, [pc, #596]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4992      	ldr	r1, [pc, #584]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b8e      	ldr	r3, [pc, #568]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a8d      	ldr	r2, [pc, #564]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e0:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f023 0203 	bic.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4985      	ldr	r1, [pc, #532]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fe:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	497e      	ldr	r1, [pc, #504]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800371c:	4b79      	ldr	r3, [pc, #484]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4976      	ldr	r1, [pc, #472]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373a:	4b72      	ldr	r3, [pc, #456]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f023 0210 	bic.w	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	496f      	ldr	r1, [pc, #444]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	4967      	ldr	r1, [pc, #412]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f023 0220 	bic.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4960      	ldr	r1, [pc, #384]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003794:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	4958      	ldr	r1, [pc, #352]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4951      	ldr	r1, [pc, #324]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	4949      	ldr	r1, [pc, #292]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ee:	4b45      	ldr	r3, [pc, #276]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4942      	ldr	r1, [pc, #264]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	493a      	ldr	r1, [pc, #232]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4933      	ldr	r1, [pc, #204]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	492b      	ldr	r1, [pc, #172]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003866:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4924      	ldr	r1, [pc, #144]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	491c      	ldr	r1, [pc, #112]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038a2:	4b18      	ldr	r3, [pc, #96]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	4915      	ldr	r1, [pc, #84]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	490d      	ldr	r1, [pc, #52]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ea:	4906      	ldr	r1, [pc, #24]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80038fc:	4b01      	ldr	r3, [pc, #4]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	490b      	ldr	r1, [pc, #44]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003912:	4313      	orrs	r3, r2
 8003914:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	4904      	ldr	r1, [pc, #16]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3748      	adds	r7, #72	; 0x48
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000

08003944 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	613b      	str	r3, [r7, #16]
  return result;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2103      	movs	r1, #3
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	61bb      	str	r3, [r7, #24]
  return result;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	605a      	str	r2, [r3, #4]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b089      	sub	sp, #36	; 0x24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	613b      	str	r3, [r7, #16]
  return result;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2103      	movs	r1, #3
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	401a      	ands	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
  return result;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003a24:	bf00      	nop
 8003a26:	3724      	adds	r7, #36	; 0x24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	613b      	str	r3, [r7, #16]
  return result;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2103      	movs	r1, #3
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	61bb      	str	r3, [r7, #24]
  return result;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	60da      	str	r2, [r3, #12]
}
 8003a82:	bf00      	nop
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b089      	sub	sp, #36	; 0x24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1a      	ldr	r2, [r3, #32]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	613b      	str	r3, [r7, #16]
  return result;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	401a      	ands	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	61bb      	str	r3, [r7, #24]
  return result;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003ae0:	bf00      	nop
 8003ae2:	3724      	adds	r7, #36	; 0x24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	613b      	str	r3, [r7, #16]
  return result;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	210f      	movs	r1, #15
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
  return result;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003b42:	bf00      	nop
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	613b      	str	r3, [r7, #16]
  return result;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003b70:	e051      	b.n	8003c16 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d043      	beq.n	8003c10 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d003      	beq.n	8003b98 <LL_GPIO_Init+0x4a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d10e      	bne.n	8003bb6 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff16 	bl	80039d2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fef6 	bl	80039a2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ff36 	bl	8003a30 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d11a      	bne.n	8003c02 <LL_GPIO_Init+0xb4>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	60bb      	str	r3, [r7, #8]
  return result;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d807      	bhi.n	8003bf4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	461a      	mov	r2, r3
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff4e 	bl	8003a8e <LL_GPIO_SetAFPin_0_7>
 8003bf2:	e006      	b.n	8003c02 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff75 	bl	8003aec <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fe9a 	bl	8003944 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1a6      	bne.n	8003b72 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <LL_TIM_SetPrescaler>:
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_TIM_SetAutoReload>:
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_TIM_SetRepetitionCounter>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_TIM_OC_SetCompareCH1>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_TIM_OC_SetCompareCH2>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_TIM_OC_SetCompareCH3>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_TIM_OC_SetCompareCH4>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_TIM_OC_SetCompareCH5>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_TIM_OC_SetCompareCH6>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f043 0201 	orr.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <LL_TIM_Init+0x110>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <LL_TIM_Init+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d00f      	beq.n	8003d90 <LL_TIM_Init+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3c      	ldr	r2, [pc, #240]	; (8003e64 <LL_TIM_Init+0x114>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <LL_TIM_Init+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3b      	ldr	r2, [pc, #236]	; (8003e68 <LL_TIM_Init+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <LL_TIM_Init+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <LL_TIM_Init+0x11c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <LL_TIM_Init+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <LL_TIM_Init+0x120>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <LL_TIM_Init+0x110>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d01b      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <LL_TIM_Init+0x114>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d017      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <LL_TIM_Init+0x118>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <LL_TIM_Init+0x11c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00f      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2a      	ldr	r2, [pc, #168]	; (8003e74 <LL_TIM_Init+0x124>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <LL_TIM_Init+0x128>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <LL_TIM_Init+0x12c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <LL_TIM_Init+0x96>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <LL_TIM_Init+0x120>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d106      	bne.n	8003df4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff22 	bl	8003c4a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff0e 	bl	8003c2e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <LL_TIM_Init+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <LL_TIM_Init+0xf2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <LL_TIM_Init+0x11c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00f      	beq.n	8003e42 <LL_TIM_Init+0xf2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <LL_TIM_Init+0x124>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <LL_TIM_Init+0xf2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <LL_TIM_Init+0x128>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <LL_TIM_Init+0xf2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <LL_TIM_Init+0x12c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <LL_TIM_Init+0xf2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <LL_TIM_Init+0x120>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d105      	bne.n	8003e4e <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff0c 	bl	8003c66 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff6d 	bl	8003d2e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40015000 	.word	0x40015000
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e96:	d01f      	beq.n	8003ed8 <LL_TIM_OC_Init+0x58>
 8003e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9c:	d804      	bhi.n	8003ea8 <LL_TIM_OC_Init+0x28>
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d00c      	beq.n	8003ebc <LL_TIM_OC_Init+0x3c>
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d011      	beq.n	8003eca <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8003ea6:	e033      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eac:	d022      	beq.n	8003ef4 <LL_TIM_OC_Init+0x74>
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb2:	d026      	beq.n	8003f02 <LL_TIM_OC_Init+0x82>
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d015      	beq.n	8003ee6 <LL_TIM_OC_Init+0x66>
      break;
 8003eba:	e029      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8b0 	bl	8004024 <OC1Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	e022      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f92f 	bl	8004130 <OC2Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed6:	e01b      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f9b2 	bl	8004244 <OC3Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e014      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa35 	bl	8004358 <OC4Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef2:	e00d      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 faa0 	bl	800443c <OC5Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	e006      	b.n	8003f10 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fb03 	bl	8004510 <OC6Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0e:	bf00      	nop
  }

  return result;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	7b12      	ldrb	r2, [r2, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	89d2      	ldrh	r2, [r2, #14]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <LL_TIM_BDTR_Init+0xfc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <LL_TIM_BDTR_Init+0x96>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <LL_TIM_BDTR_Init+0x100>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <LL_TIM_BDTR_Init+0x96>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <LL_TIM_BDTR_Init+0x104>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d106      	bne.n	8003fc0 <LL_TIM_BDTR_Init+0xa4>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <LL_TIM_BDTR_Init+0xfc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <LL_TIM_BDTR_Init+0xbc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a14      	ldr	r2, [pc, #80]	; (800401c <LL_TIM_BDTR_Init+0x100>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <LL_TIM_BDTR_Init+0xbc>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <LL_TIM_BDTR_Init+0x104>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d114      	bne.n	8004002 <LL_TIM_BDTR_Init+0xe6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40013400 	.word	0x40013400
 8004020:	40015000 	.word	0x40015000

08004024 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0202 	bic.w	r2, r3, #2
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a24      	ldr	r2, [pc, #144]	; (8004118 <OC1Config+0xf4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <OC1Config+0x8e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a23      	ldr	r2, [pc, #140]	; (800411c <OC1Config+0xf8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <OC1Config+0x8e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a22      	ldr	r2, [pc, #136]	; (8004120 <OC1Config+0xfc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <OC1Config+0x8e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a21      	ldr	r2, [pc, #132]	; (8004124 <OC1Config+0x100>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <OC1Config+0x8e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a20      	ldr	r2, [pc, #128]	; (8004128 <OC1Config+0x104>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <OC1Config+0x8e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <OC1Config+0x108>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d11e      	bne.n	80040f0 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 0208 	bic.w	r2, r3, #8
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0204 	bic.w	r2, r3, #4
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fdbd 	bl	8003c82 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	40015000 	.word	0x40015000

08004130 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0210 	bic.w	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	0212      	lsls	r2, r2, #8
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0220 	bic.w	r2, r3, #32
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0210 	bic.w	r2, r3, #16
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a25      	ldr	r2, [pc, #148]	; (800422c <OC2Config+0xfc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <OC2Config+0x94>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a24      	ldr	r2, [pc, #144]	; (8004230 <OC2Config+0x100>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00f      	beq.n	80041c4 <OC2Config+0x94>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a23      	ldr	r2, [pc, #140]	; (8004234 <OC2Config+0x104>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <OC2Config+0x94>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a22      	ldr	r2, [pc, #136]	; (8004238 <OC2Config+0x108>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <OC2Config+0x94>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <OC2Config+0x10c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <OC2Config+0x94>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a20      	ldr	r2, [pc, #128]	; (8004240 <OC2Config+0x110>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d11f      	bne.n	8004204 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	019b      	lsls	r3, r3, #6
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	019b      	lsls	r3, r3, #6
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fd41 	bl	8003c9e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40013400 	.word	0x40013400
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800
 8004240:	40015000 	.word	0x40015000

08004244 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a25      	ldr	r2, [pc, #148]	; (8004340 <OC3Config+0xfc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <OC3Config+0x92>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <OC3Config+0x100>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00f      	beq.n	80042d6 <OC3Config+0x92>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a23      	ldr	r2, [pc, #140]	; (8004348 <OC3Config+0x104>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <OC3Config+0x92>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a22      	ldr	r2, [pc, #136]	; (800434c <OC3Config+0x108>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <OC3Config+0x92>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a21      	ldr	r2, [pc, #132]	; (8004350 <OC3Config+0x10c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <OC3Config+0x92>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a20      	ldr	r2, [pc, #128]	; (8004354 <OC3Config+0x110>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d11f      	bne.n	8004316 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	015b      	lsls	r3, r3, #5
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fcc6 	bl	8003cba <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40013400 	.word	0x40013400
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800
 8004354:	40015000 	.word	0x40015000

08004358 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	0212      	lsls	r2, r2, #8
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	031b      	lsls	r3, r3, #12
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	031b      	lsls	r3, r3, #12
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <OC4Config+0xcc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d013      	beq.n	80043ec <OC4Config+0x94>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a18      	ldr	r2, [pc, #96]	; (8004428 <OC4Config+0xd0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <OC4Config+0x94>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <OC4Config+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <OC4Config+0x94>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a16      	ldr	r2, [pc, #88]	; (8004430 <OC4Config+0xd8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <OC4Config+0x94>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a15      	ldr	r2, [pc, #84]	; (8004434 <OC4Config+0xdc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <OC4Config+0x94>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a14      	ldr	r2, [pc, #80]	; (8004438 <OC4Config+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d107      	bne.n	80043fc <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fc61 	bl	8003cd6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40013400 	.word	0x40013400
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800
 8004438:	40015000 	.word	0x40015000

0800443c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	4313      	orrs	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <OC5Config+0xbc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <OC5Config+0x84>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <OC5Config+0xc0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00f      	beq.n	80044c0 <OC5Config+0x84>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a17      	ldr	r2, [pc, #92]	; (8004500 <OC5Config+0xc4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <OC5Config+0x84>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a16      	ldr	r2, [pc, #88]	; (8004504 <OC5Config+0xc8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d007      	beq.n	80044c0 <OC5Config+0x84>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <OC5Config+0xcc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <OC5Config+0x84>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <OC5Config+0xd0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d109      	bne.n	80044d4 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fc06 	bl	8003cf2 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40013400 	.word	0x40013400
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800
 800450c:	40015000 	.word	0x40015000

08004510 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	0212      	lsls	r2, r2, #8
 8004542:	4313      	orrs	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	051b      	lsls	r3, r3, #20
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <OC6Config+0xbc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <OC6Config+0x86>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <OC6Config+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00f      	beq.n	8004596 <OC6Config+0x86>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <OC6Config+0xc4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00b      	beq.n	8004596 <OC6Config+0x86>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <OC6Config+0xc8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <OC6Config+0x86>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a14      	ldr	r2, [pc, #80]	; (80045dc <OC6Config+0xcc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <OC6Config+0x86>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <OC6Config+0xd0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d109      	bne.n	80045aa <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	029b      	lsls	r3, r3, #10
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fbab 	bl	8003d12 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800
 80045e0:	40015000 	.word	0x40015000

080045e4 <__libc_init_array>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	4e0d      	ldr	r6, [pc, #52]	; (800461c <__libc_init_array+0x38>)
 80045e8:	4c0d      	ldr	r4, [pc, #52]	; (8004620 <__libc_init_array+0x3c>)
 80045ea:	1ba4      	subs	r4, r4, r6
 80045ec:	10a4      	asrs	r4, r4, #2
 80045ee:	2500      	movs	r5, #0
 80045f0:	42a5      	cmp	r5, r4
 80045f2:	d109      	bne.n	8004608 <__libc_init_array+0x24>
 80045f4:	4e0b      	ldr	r6, [pc, #44]	; (8004624 <__libc_init_array+0x40>)
 80045f6:	4c0c      	ldr	r4, [pc, #48]	; (8004628 <__libc_init_array+0x44>)
 80045f8:	f000 f820 	bl	800463c <_init>
 80045fc:	1ba4      	subs	r4, r4, r6
 80045fe:	10a4      	asrs	r4, r4, #2
 8004600:	2500      	movs	r5, #0
 8004602:	42a5      	cmp	r5, r4
 8004604:	d105      	bne.n	8004612 <__libc_init_array+0x2e>
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800460c:	4798      	blx	r3
 800460e:	3501      	adds	r5, #1
 8004610:	e7ee      	b.n	80045f0 <__libc_init_array+0xc>
 8004612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004616:	4798      	blx	r3
 8004618:	3501      	adds	r5, #1
 800461a:	e7f2      	b.n	8004602 <__libc_init_array+0x1e>
 800461c:	0800469c 	.word	0x0800469c
 8004620:	0800469c 	.word	0x0800469c
 8004624:	0800469c 	.word	0x0800469c
 8004628:	080046a0 	.word	0x080046a0

0800462c <memset>:
 800462c:	4402      	add	r2, r0
 800462e:	4603      	mov	r3, r0
 8004630:	4293      	cmp	r3, r2
 8004632:	d100      	bne.n	8004636 <memset+0xa>
 8004634:	4770      	bx	lr
 8004636:	f803 1b01 	strb.w	r1, [r3], #1
 800463a:	e7f9      	b.n	8004630 <memset+0x4>

0800463c <_init>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr

08004648 <_fini>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	bf00      	nop
 800464c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464e:	bc08      	pop	{r3}
 8004650:	469e      	mov	lr, r3
 8004652:	4770      	bx	lr
