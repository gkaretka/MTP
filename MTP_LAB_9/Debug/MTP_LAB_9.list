
MTP_LAB_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ccc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb8  08003eb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb8  08003eb8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb8  08003eb8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  08003ed0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08003ed0  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e7c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001916  00000000  00000000  00028ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000860  00000000  00000000  0002a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002b038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023510  00000000  00000000  0002b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b74  00000000  00000000  0004ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6999  00000000  00000000  00056844  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d1dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002194  00000000  00000000  0012d258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e48 	.word	0x08003e48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003e48 	.word	0x08003e48

080001d4 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d103      	bne.n	80001f0 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3340      	adds	r3, #64	; 0x40
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	e00c      	b.n	800020a <LL_ADC_DMA_GetRegAddr+0x36>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001f6:	d003      	beq.n	8000200 <LL_ADC_DMA_GetRegAddr+0x2c>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4a07      	ldr	r2, [pc, #28]	; (8000218 <LL_ADC_DMA_GetRegAddr+0x44>)
 80001fc:	4293      	cmp	r3, r2
 80001fe:	d101      	bne.n	8000204 <LL_ADC_DMA_GetRegAddr+0x30>
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <LL_ADC_DMA_GetRegAddr+0x48>)
 8000202:	e000      	b.n	8000206 <LL_ADC_DMA_GetRegAddr+0x32>
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <LL_ADC_DMA_GetRegAddr+0x4c>)
 8000206:	330c      	adds	r3, #12
 8000208:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 800020a:	68fb      	ldr	r3, [r7, #12]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	50000100 	.word	0x50000100
 800021c:	50000300 	.word	0x50000300
 8000220:	50000700 	.word	0x50000700

08000224 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000238:	f043 0201 	orr.w	r2, r3, #1
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800025e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000268:	4313      	orrs	r3, r2
 800026a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 800027e:	b480      	push	{r7}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	bf0c      	ite	eq
 8000294:	2301      	moveq	r3, #1
 8000296:	2300      	movne	r3, #0
 8000298:	b2db      	uxtb	r3, r3
}
 800029a:	4618      	mov	r0, r3
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr

080002a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b083      	sub	sp, #12
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80002b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002ba:	f043 0204 	orr.w	r2, r3, #4
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
 80002d6:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	f003 0310 	and.w	r3, r3, #16
 80002e2:	2101      	movs	r1, #1
 80002e4:	fa01 f303 	lsl.w	r3, r1, r3
 80002e8:	431a      	orrs	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 80002fa:	b490      	push	{r4, r7}
 80002fc:	b086      	sub	sp, #24
 80002fe:	af00      	add	r7, sp, #0
 8000300:	60f8      	str	r0, [r7, #12]
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3308      	adds	r3, #8
 800030a:	4619      	mov	r1, r3
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000312:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000316:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	fa92 f2a2 	rbit	r2, r2
 800031e:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000320:	693a      	ldr	r2, [r7, #16]
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	40d3      	lsrs	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	440b      	add	r3, r1
 800032e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000330:	6823      	ldr	r3, [r4, #0]
 8000332:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000336:	f023 030f 	bic.w	r3, r3, #15
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	4313      	orrs	r3, r2
 800033e:	6023      	str	r3, [r4, #0]
             DAC_DHR12R1_DACC1DHR,
             Data);
}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bc90      	pop	{r4, r7}
 8000348:	4770      	bx	lr
	...

0800034c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LL_DMA_EnableChannel+0x3c>)
 800035c:	5cd3      	ldrb	r3, [r2, r3]
 800035e:	461a      	mov	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	3a01      	subs	r2, #1
 800036a:	4907      	ldr	r1, [pc, #28]	; (8000388 <LL_DMA_EnableChannel+0x3c>)
 800036c:	5c8a      	ldrb	r2, [r1, r2]
 800036e:	4611      	mov	r1, r2
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	440a      	add	r2, r1
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6013      	str	r3, [r2, #0]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	08003e60 	.word	0x08003e60

0800038c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	3b01      	subs	r3, #1
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <LL_DMA_SetDataLength+0x44>)
 800039e:	5cd3      	ldrb	r3, [r2, r3]
 80003a0:	461a      	mov	r2, r3
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	4413      	add	r3, r2
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	0c1b      	lsrs	r3, r3, #16
 80003aa:	041b      	lsls	r3, r3, #16
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	3a01      	subs	r2, #1
 80003b0:	4907      	ldr	r1, [pc, #28]	; (80003d0 <LL_DMA_SetDataLength+0x44>)
 80003b2:	5c8a      	ldrb	r2, [r1, r2]
 80003b4:	4611      	mov	r1, r2
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	440a      	add	r2, r1
 80003ba:	4611      	mov	r1, r2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4313      	orrs	r3, r2
 80003c0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	08003e60 	.word	0x08003e60

080003d4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <LL_DMA_SetMemoryAddress+0x2c>)
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	461a      	mov	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	60d3      	str	r3, [r2, #12]
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	08003e60 	.word	0x08003e60

08000404 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <LL_DMA_SetPeriphAddress+0x2c>)
 8000416:	5cd3      	ldrb	r3, [r2, r3]
 8000418:	461a      	mov	r2, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	4413      	add	r3, r2
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6093      	str	r3, [r2, #8]
}
 8000424:	bf00      	nop
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	08003e60 	.word	0x08003e60

08000434 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2202      	movs	r2, #2
 8000440:	605a      	str	r2, [r3, #4]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <LL_DMA_EnableIT_TC+0x3c>)
 8000460:	5cd3      	ldrb	r3, [r2, r3]
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	3a01      	subs	r2, #1
 800046e:	4907      	ldr	r1, [pc, #28]	; (800048c <LL_DMA_EnableIT_TC+0x3c>)
 8000470:	5c8a      	ldrb	r2, [r1, r2]
 8000472:	4611      	mov	r1, r2
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	440a      	add	r2, r1
 8000478:	f043 0302 	orr.w	r3, r3, #2
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	08003e60 	.word	0x08003e60

08000490 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f043 0201 	orr.w	r2, r3, #1
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	601a      	str	r2, [r3, #0]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a1a      	ldr	r2, [r3, #32]
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	431a      	orrs	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	621a      	str	r2, [r3, #32]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <hw_init>:
		filterTau = 0.2f, filterTs;

float dacOut;

void hw_init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ADC12Data);
 80004f8:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <hw_init+0xd0>)
 80004fa:	461a      	mov	r2, r3
 80004fc:	2101      	movs	r1, #1
 80004fe:	4832      	ldr	r0, [pc, #200]	; (80005c8 <hw_init+0xd4>)
 8000500:	f7ff ff68 	bl	80003d4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 2);
 8000504:	2202      	movs	r2, #2
 8000506:	2101      	movs	r1, #1
 8000508:	482f      	ldr	r0, [pc, #188]	; (80005c8 <hw_init+0xd4>)
 800050a:	f7ff ff3f 	bl	800038c <LL_DMA_SetDataLength>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA_MULTI));
 800050e:	2101      	movs	r1, #1
 8000510:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000514:	f7ff fe5e 	bl	80001d4 <LL_ADC_DMA_GetRegAddr>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	2101      	movs	r1, #1
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <hw_init+0xd4>)
 8000520:	f7ff ff70 	bl	8000404 <LL_DMA_SetPeriphAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000524:	2101      	movs	r1, #1
 8000526:	4828      	ldr	r0, [pc, #160]	; (80005c8 <hw_init+0xd4>)
 8000528:	f7ff ff10 	bl	800034c <LL_DMA_EnableChannel>

	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 800052c:	217f      	movs	r1, #127	; 0x7f
 800052e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000532:	f7ff fe8b 	bl	800024c <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8000536:	bf00      	nop
 8000538:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800053c:	f7ff fe9f 	bl	800027e <LL_ADC_IsCalibrationOnGoing>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f8      	bne.n	8000538 <hw_init+0x44>

	LL_ADC_StartCalibration(ADC2, LL_ADC_SINGLE_ENDED);
 8000546:	217f      	movs	r1, #127	; 0x7f
 8000548:	4820      	ldr	r0, [pc, #128]	; (80005cc <hw_init+0xd8>)
 800054a:	f7ff fe7f 	bl	800024c <LL_ADC_StartCalibration>
	while(LL_ADC_IsCalibrationOnGoing(ADC2));
 800054e:	bf00      	nop
 8000550:	481e      	ldr	r0, [pc, #120]	; (80005cc <hw_init+0xd8>)
 8000552:	f7ff fe94 	bl	800027e <LL_ADC_IsCalibrationOnGoing>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1f9      	bne.n	8000550 <hw_init+0x5c>

	LL_ADC_Enable(ADC1);
 800055c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000560:	f7ff fe60 	bl	8000224 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8000564:	4819      	ldr	r0, [pc, #100]	; (80005cc <hw_init+0xd8>)
 8000566:	f7ff fe5d 	bl	8000224 <LL_ADC_Enable>

	LL_ADC_REG_StartConversion(ADC1);
 800056a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800056e:	f7ff fe9a 	bl	80002a6 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion(ADC2);
 8000572:	4816      	ldr	r0, [pc, #88]	; (80005cc <hw_init+0xd8>)
 8000574:	f7ff fe97 	bl	80002a6 <LL_ADC_REG_StartConversion>

	LL_TIM_EnableAllOutputs(TIM1);
 8000578:	4815      	ldr	r0, [pc, #84]	; (80005d0 <hw_init+0xdc>)
 800057a:	f7ff ffaa 	bl	80004d2 <LL_TIM_EnableAllOutputs>
	LL_TIM_EnableCounter(TIM1);
 800057e:	4814      	ldr	r0, [pc, #80]	; (80005d0 <hw_init+0xdc>)
 8000580:	f7ff ff86 	bl	8000490 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH4);
 8000584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000588:	4811      	ldr	r0, [pc, #68]	; (80005d0 <hw_init+0xdc>)
 800058a:	f7ff ff91 	bl	80004b0 <LL_TIM_CC_EnableChannel>

	LL_DMA_ClearFlag_TC1(DMA1);
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <hw_init+0xd4>)
 8000590:	f7ff ff50 	bl	8000434 <LL_DMA_ClearFlag_TC1>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8000594:	2101      	movs	r1, #1
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <hw_init+0xd4>)
 8000598:	f7ff ff5a 	bl	8000450 <LL_DMA_EnableIT_TC>

	LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 800059c:	490d      	ldr	r1, [pc, #52]	; (80005d4 <hw_init+0xe0>)
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <hw_init+0xe4>)
 80005a0:	f7ff fe95 	bl	80002ce <LL_DAC_Enable>

	filterTs = ((float)TIM1_ARR + 1.f)/(float)SystemCoreClock;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <hw_init+0xe8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	ee07 3a90 	vmov	s15, r3
 80005ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005b0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80005e0 <hw_init+0xec>
 80005b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <hw_init+0xf0>)
 80005ba:	edc3 7a00 	vstr	s15, [r3]
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000002c 	.word	0x2000002c
 80005c8:	40020000 	.word	0x40020000
 80005cc:	50000100 	.word	0x50000100
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	02100001 	.word	0x02100001
 80005d8:	40007400 	.word	0x40007400
 80005dc:	20000004 	.word	0x20000004
 80005e0:	45c80000 	.word	0x45c80000
 80005e4:	20000034 	.word	0x20000034

080005e8 <main_loop>:


void main_loop(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	filterc0 = filterTs / (filterTau + filterTs);
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main_loop+0x5c>)
 80005ee:	edd3 6a00 	vldr	s13, [r3]
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <main_loop+0x60>)
 80005f4:	ed93 7a00 	vldr	s14, [r3]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main_loop+0x5c>)
 80005fa:	edd3 7a00 	vldr	s15, [r3]
 80005fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <main_loop+0x64>)
 8000608:	edc3 7a00 	vstr	s15, [r3]
	filterc1 = 1.f - filterc0;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <main_loop+0x64>)
 800060e:	edd3 7a00 	vldr	s15, [r3]
 8000612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <main_loop+0x68>)
 800061c:	edc3 7a00 	vstr	s15, [r3]

	LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, (uint32_t)(dacOut * ((1 << 12)-1)));
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <main_loop+0x6c>)
 8000622:	edd3 7a00 	vldr	s15, [r3]
 8000626:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000658 <main_loop+0x70>
 800062a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800062e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000632:	ee17 2a90 	vmov	r2, s15
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <main_loop+0x74>)
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <main_loop+0x78>)
 800063a:	f7ff fe5e 	bl	80002fa <LL_DAC_ConvertData12RightAligned>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000034 	.word	0x20000034
 8000648:	20000000 	.word	0x20000000
 800064c:	20000044 	.word	0x20000044
 8000650:	20000038 	.word	0x20000038
 8000654:	2000003c 	.word	0x2000003c
 8000658:	457ff000 	.word	0x457ff000
 800065c:	02100001 	.word	0x02100001
 8000660:	40007400 	.word	0x40007400

08000664 <main_isr>:


void main_isr(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	filterIn = (float)ADC12Data.samples.ch1_V1 * (1.0f / (1 << 12));
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <main_isr+0x54>)
 800066a:	885b      	ldrh	r3, [r3, #2]
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000674:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80006bc <main_isr+0x58>
 8000678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <main_isr+0x5c>)
 800067e:	edc3 7a00 	vstr	s15, [r3]
	filterOut = filterc0 * filterIn + filterc1 * filterOut;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <main_isr+0x60>)
 8000684:	ed93 7a00 	vldr	s14, [r3]
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main_isr+0x5c>)
 800068a:	edd3 7a00 	vldr	s15, [r3]
 800068e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <main_isr+0x64>)
 8000694:	edd3 6a00 	vldr	s13, [r3]
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <main_isr+0x68>)
 800069a:	edd3 7a00 	vldr	s15, [r3]
 800069e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <main_isr+0x68>)
 80006a8:	edc3 7a00 	vstr	s15, [r3]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	39800000 	.word	0x39800000
 80006c0:	20000040 	.word	0x20000040
 80006c4:	20000044 	.word	0x20000044
 80006c8:	20000038 	.word	0x20000038
 80006cc:	20000048 	.word	0x20000048

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <LL_ADC_REG_SetTriggerEdge>:
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_ADC_REG_SetSequencerRanks>:
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3330      	adds	r3, #48	; 0x30
 8000818:	4619      	mov	r1, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000820:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000824:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	fa92 f2a2 	rbit	r2, r2
 800082c:	617a      	str	r2, [r7, #20]
  return result;
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	fab2 f282 	clz	r2, r2
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	40d3      	lsrs	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	440b      	add	r3, r1
 800083c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	211f      	movs	r1, #31
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	401a      	ands	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0e9b      	lsrs	r3, r3, #26
 8000856:	f003 011f 	and.w	r1, r3, #31
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	f003 031f 	and.w	r3, r3, #31
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	431a      	orrs	r2, r3
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <LL_ADC_SetChannelSamplingTime>:
{
 8000876:	b480      	push	{r7}
 8000878:	b08d      	sub	sp, #52	; 0x34
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3314      	adds	r3, #20
 8000886:	4619      	mov	r1, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	fa92 f2a2 	rbit	r2, r2
 800089a:	617a      	str	r2, [r7, #20]
  return result;
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	fab2 f282 	clz	r2, r2
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	40d3      	lsrs	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 80008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80008b6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80008ba:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008bc:	6a39      	ldr	r1, [r7, #32]
 80008be:	fa91 f1a1 	rbit	r1, r1
 80008c2:	61f9      	str	r1, [r7, #28]
  return result;
 80008c4:	69f9      	ldr	r1, [r7, #28]
 80008c6:	fab1 f181 	clz	r1, r1
 80008ca:	b2c9      	uxtb	r1, r1
 80008cc:	40cb      	lsrs	r3, r1
 80008ce:	2107      	movs	r1, #7
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	401a      	ands	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80008de:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80008e2:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008e6:	fa91 f1a1 	rbit	r1, r1
 80008ea:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80008ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008ee:	fab1 f181 	clz	r1, r1
 80008f2:	b2c9      	uxtb	r1, r1
 80008f4:	40cb      	lsrs	r3, r1
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	3734      	adds	r7, #52	; 0x34
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <LL_ADC_SetChannelSingleDiff>:
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000926:	400b      	ands	r3, r1
 8000928:	43db      	mvns	r3, r3
 800092a:	401a      	ands	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0318 	and.w	r3, r3, #24
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000934:	40d9      	lsrs	r1, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4019      	ands	r1, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <LL_ADC_SetChannelSingleDiff+0x44>)
 800093c:	400b      	ands	r3, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	0007fffe 	.word	0x0007fffe

08000958 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f023 0204 	bic.w	r2, r3, #4
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	605a      	str	r2, [r3, #4]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f023 0208 	bic.w	r2, r3, #8
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	605a      	str	r2, [r3, #4]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_DAC_DisableTrigger>:
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(DACx->CR,
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	2104      	movs	r1, #4
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <LL_DMA_SetDataTransferDirection>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <LL_DMA_SetDataTransferDirection+0x48>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4413      	add	r3, r2
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009e8:	f023 0310 	bic.w	r3, r3, #16
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	3a01      	subs	r2, #1
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <LL_DMA_SetDataTransferDirection+0x48>)
 80009f2:	5c8a      	ldrb	r2, [r1, r2]
 80009f4:	4611      	mov	r1, r2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	440a      	add	r2, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	08003e68 	.word	0x08003e68

08000a14 <LL_DMA_SetMode>:
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <LL_DMA_SetMode+0x44>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f023 0220 	bic.w	r2, r3, #32
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <LL_DMA_SetMode+0x44>)
 8000a3a:	5ccb      	ldrb	r3, [r1, r3]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	440b      	add	r3, r1
 8000a42:	4619      	mov	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	600b      	str	r3, [r1, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	08003e68 	.word	0x08003e68

08000a5c <LL_DMA_SetPeriphIncMode>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	461a      	mov	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4413      	add	r3, r2
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000a82:	5ccb      	ldrb	r3, [r1, r3]
 8000a84:	4619      	mov	r1, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	440b      	add	r3, r1
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	08003e68 	.word	0x08003e68

08000aa4 <LL_DMA_SetMemoryIncMode>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000aca:	5ccb      	ldrb	r3, [r1, r3]
 8000acc:	4619      	mov	r1, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	440b      	add	r3, r1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	08003e68 	.word	0x08003e68

08000aec <LL_DMA_SetPeriphSize>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <LL_DMA_SetPeriphSize+0x44>)
 8000afe:	5cd3      	ldrb	r3, [r2, r3]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <LL_DMA_SetPeriphSize+0x44>)
 8000b12:	5ccb      	ldrb	r3, [r1, r3]
 8000b14:	4619      	mov	r1, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	440b      	add	r3, r1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	600b      	str	r3, [r1, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	08003e68 	.word	0x08003e68

08000b34 <LL_DMA_SetMemorySize>:
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <LL_DMA_SetMemorySize+0x44>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	4907      	ldr	r1, [pc, #28]	; (8000b78 <LL_DMA_SetMemorySize+0x44>)
 8000b5a:	5ccb      	ldrb	r3, [r1, r3]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	440b      	add	r3, r1
 8000b62:	4619      	mov	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	08003e68 	.word	0x08003e68

08000b7c <LL_DMA_SetChannelPriorityLevel>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	461a      	mov	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4413      	add	r3, r2
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ba2:	5ccb      	ldrb	r3, [r1, r3]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	440b      	add	r3, r1
 8000baa:	4619      	mov	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	08003e68 	.word	0x08003e68

08000bc4 <LL_TIM_DisableARRPreload>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_TIM_OC_DisableFast>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d028      	beq.n	8000c46 <LL_TIM_OC_DisableFast+0x62>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d023      	beq.n	8000c42 <LL_TIM_OC_DisableFast+0x5e>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b10      	cmp	r3, #16
 8000bfe:	d01e      	beq.n	8000c3e <LL_TIM_OC_DisableFast+0x5a>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b40      	cmp	r3, #64	; 0x40
 8000c04:	d019      	beq.n	8000c3a <LL_TIM_OC_DisableFast+0x56>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c0c:	d013      	beq.n	8000c36 <LL_TIM_OC_DisableFast+0x52>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c14:	d00d      	beq.n	8000c32 <LL_TIM_OC_DisableFast+0x4e>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c1c:	d007      	beq.n	8000c2e <LL_TIM_OC_DisableFast+0x4a>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c24:	d101      	bne.n	8000c2a <LL_TIM_OC_DisableFast+0x46>
 8000c26:	2307      	movs	r3, #7
 8000c28:	e00e      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	e00c      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c2e:	2306      	movs	r3, #6
 8000c30:	e00a      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c32:	2305      	movs	r3, #5
 8000c34:	e008      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c36:	2304      	movs	r3, #4
 8000c38:	e006      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e004      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e002      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <LL_TIM_OC_DisableFast+0x64>
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LL_TIM_OC_DisableFast+0x9c>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	440b      	add	r3, r1
 8000c58:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4908      	ldr	r1, [pc, #32]	; (8000c84 <LL_TIM_OC_DisableFast+0xa0>)
 8000c62:	5ccb      	ldrb	r3, [r1, r3]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2304      	movs	r3, #4
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	08003e70 	.word	0x08003e70
 8000c84:	08003e7c 	.word	0x08003e7c

08000c88 <LL_TIM_OC_EnablePreload>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d028      	beq.n	8000cea <LL_TIM_OC_EnablePreload+0x62>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d023      	beq.n	8000ce6 <LL_TIM_OC_EnablePreload+0x5e>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	d01e      	beq.n	8000ce2 <LL_TIM_OC_EnablePreload+0x5a>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b40      	cmp	r3, #64	; 0x40
 8000ca8:	d019      	beq.n	8000cde <LL_TIM_OC_EnablePreload+0x56>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb0:	d013      	beq.n	8000cda <LL_TIM_OC_EnablePreload+0x52>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb8:	d00d      	beq.n	8000cd6 <LL_TIM_OC_EnablePreload+0x4e>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cc0:	d007      	beq.n	8000cd2 <LL_TIM_OC_EnablePreload+0x4a>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc8:	d101      	bne.n	8000cce <LL_TIM_OC_EnablePreload+0x46>
 8000cca:	2307      	movs	r3, #7
 8000ccc:	e00e      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000cce:	2308      	movs	r3, #8
 8000cd0:	e00c      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	e00a      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	e008      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000cda:	2304      	movs	r3, #4
 8000cdc:	e006      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e004      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e002      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <LL_TIM_OC_EnablePreload+0x64>
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LL_TIM_OC_EnablePreload+0x98>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	440b      	add	r3, r1
 8000cfc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <LL_TIM_OC_EnablePreload+0x9c>)
 8000d06:	5ccb      	ldrb	r3, [r1, r3]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	08003e70 	.word	0x08003e70
 8000d24:	08003e7c 	.word	0x08003e7c

08000d28 <LL_TIM_SetTriggerOutput>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	605a      	str	r2, [r3, #4]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_TIM_SetTriggerOutput2>:
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	605a      	str	r2, [r3, #4]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_TIM_DisableMasterSlaveMode>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	609a      	str	r2, [r3, #8]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dce:	69da      	ldr	r2, [r3, #28]
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dda:	69da      	ldr	r2, [r3, #28]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dfe:	699a      	ldr	r2, [r3, #24]
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e0a:	699a      	ldr	r2, [r3, #24]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fbc8 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f811 	bl	8000e52 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 faf0 	bl	8001414 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e34:	f000 fad6 	bl	80013e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e38:	f000 f86e 	bl	8000f18 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e3c:	f000 f936 	bl	80010ac <MX_ADC2_Init>
  MX_TIM1_Init();
 8000e40:	f000 f9fe 	bl	8001240 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000e44:	f000 f9bc 	bl	80011c0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8000e48:	f7ff fb54 	bl	80004f4 <hw_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	main_loop();
 8000e4c:	f7ff fbcc 	bl	80005e8 <main_loop>
 8000e50:	e7fc      	b.n	8000e4c <main+0x28>

08000e52 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b0a6      	sub	sp, #152	; 0x98
 8000e56:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e5c:	2228      	movs	r2, #40	; 0x28
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 ffe9 	bl	8003e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2258      	movs	r2, #88	; 0x58
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 ffdb 	bl	8003e38 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e82:	2302      	movs	r3, #2
 8000e84:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e86:	2301      	movs	r3, #1
 8000e88:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000e9e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fccf 	bl	8001854 <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ebc:	f000 face 	bl	800145c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eda:	2102      	movs	r1, #2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 fbcf 	bl	8002680 <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ee8:	f000 fab8 	bl	800145c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000eec:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000ef0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fda3 	bl	8002a4c <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f0c:	f000 faa6 	bl	800145c <Error_Handler>
  }
}
 8000f10:	bf00      	nop
 8000f12:	3798      	adds	r7, #152	; 0x98
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000f1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000f5a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f5e:	f7ff ff19 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f66:	f7ff ff15 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PC0   ------> ADC1_IN6
  PC2   ------> ADC1_IN8 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_2;
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4847      	ldr	r0, [pc, #284]	; (8001098 <MX_ADC1_Init+0x180>)
 8000f7c:	f002 f9ed 	bl	800335a <LL_GPIO_Init>

  /* ADC1 DMA Init */
  
  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	4845      	ldr	r0, [pc, #276]	; (800109c <MX_ADC1_Init+0x184>)
 8000f86:	f7ff fd1f 	bl	80009c8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4843      	ldr	r0, [pc, #268]	; (800109c <MX_ADC1_Init+0x184>)
 8000f90:	f7ff fdf4 	bl	8000b7c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000f94:	2220      	movs	r2, #32
 8000f96:	2101      	movs	r1, #1
 8000f98:	4840      	ldr	r0, [pc, #256]	; (800109c <MX_ADC1_Init+0x184>)
 8000f9a:	f7ff fd3b 	bl	8000a14 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	483e      	ldr	r0, [pc, #248]	; (800109c <MX_ADC1_Init+0x184>)
 8000fa4:	f7ff fd5a 	bl	8000a5c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	2101      	movs	r1, #1
 8000fac:	483b      	ldr	r0, [pc, #236]	; (800109c <MX_ADC1_Init+0x184>)
 8000fae:	f7ff fd79 	bl	8000aa4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8000fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4838      	ldr	r0, [pc, #224]	; (800109c <MX_ADC1_Init+0x184>)
 8000fba:	f7ff fd97 	bl	8000aec <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 8000fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <MX_ADC1_Init+0x184>)
 8000fc6:	f7ff fdb5 	bl	8000b34 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000fd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000fe0:	f001 ffd6 	bl	8002f90 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_TRGO;
 8000fe4:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8000fea:	2301      	movs	r3, #1
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800100a:	f001 ffe7 	bl	8002fdc <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 800100e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001012:	f7ff fca1 	bl	8000958 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001016:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800101a:	f7ff fcad 	bl	8000978 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_DUAL_REG_SIMULT;
 8001022:	2306      	movs	r3, #6
 8001024:	623b      	str	r3, [r7, #32]
  ADC_CommonInitStruct.MultiDMATransfer = LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B;
 8001026:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_CommonInitStruct.MultiTwoSamplingDelay = LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <MX_ADC1_Init+0x188>)
 8001038:	f001 ff4c 	bl	8002ed4 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_FALLING);
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001044:	f7ff fbcd 	bl	80007e2 <LL_ADC_REG_SetTriggerEdge>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x18c>)
 800104a:	2106      	movs	r1, #6
 800104c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001050:	f7ff fbda 	bl	8000808 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_61CYCLES_5);
 8001054:	2205      	movs	r2, #5
 8001056:	4913      	ldr	r1, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x18c>)
 8001058:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800105c:	f7ff fc0b 	bl	8000876 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 8001060:	227f      	movs	r2, #127	; 0x7f
 8001062:	4910      	ldr	r1, [pc, #64]	; (80010a4 <MX_ADC1_Init+0x18c>)
 8001064:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001068:	f7ff fc52 	bl	8000910 <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_8);
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <MX_ADC1_Init+0x190>)
 800106e:	210c      	movs	r1, #12
 8001070:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001074:	f7ff fbc8 	bl	8000808 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_61CYCLES_5);
 8001078:	2205      	movs	r2, #5
 800107a:	490b      	ldr	r1, [pc, #44]	; (80010a8 <MX_ADC1_Init+0x190>)
 800107c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001080:	f7ff fbf9 	bl	8000876 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 8001084:	227f      	movs	r2, #127	; 0x7f
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <MX_ADC1_Init+0x190>)
 8001088:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800108c:	f7ff fc40 	bl	8000910 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	48000800 	.word	0x48000800
 800109c:	40020000 	.word	0x40020000
 80010a0:	50000300 	.word	0x50000300
 80010a4:	19200040 	.word	0x19200040
 80010a8:	21800100 	.word	0x21800100

080010ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80010b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80010e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010e4:	f7ff fe56 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010ec:	f7ff fe52 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010f4:	f7ff fe4e 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration  
  PA4   ------> ADC2_IN1
  PC5   ------> ADC2_IN11 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80010f8:	2310      	movs	r3, #16
 80010fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110c:	f002 f925 	bl	800335a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001110:	2320      	movs	r3, #32
 8001112:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001114:	2303      	movs	r3, #3
 8001116:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <MX_ADC2_Init+0x104>)
 8001122:	f002 f91a 	bl	800335a <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800112a:	2300      	movs	r3, #0
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001136:	4619      	mov	r1, r3
 8001138:	481e      	ldr	r0, [pc, #120]	; (80011b4 <MX_ADC2_Init+0x108>)
 800113a:	f001 ff29 	bl	8002f90 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 800114a:	2301      	movs	r3, #1
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4816      	ldr	r0, [pc, #88]	; (80011b4 <MX_ADC2_Init+0x108>)
 800115c:	f001 ff3e 	bl	8002fdc <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC2);
 8001160:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_ADC2_Init+0x108>)
 8001162:	f7ff fbf9 	bl	8000958 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC2);
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_ADC2_Init+0x108>)
 8001168:	f7ff fc06 	bl	8000978 <LL_ADC_DisableIT_EOS>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_ADC2_Init+0x10c>)
 800116e:	2106      	movs	r1, #6
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_ADC2_Init+0x108>)
 8001172:	f7ff fb49 	bl	8000808 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_61CYCLES_5);
 8001176:	2205      	movs	r2, #5
 8001178:	490f      	ldr	r1, [pc, #60]	; (80011b8 <MX_ADC2_Init+0x10c>)
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_ADC2_Init+0x108>)
 800117c:	f7ff fb7b 	bl	8000876 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001180:	227f      	movs	r2, #127	; 0x7f
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <MX_ADC2_Init+0x10c>)
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_ADC2_Init+0x108>)
 8001186:	f7ff fbc3 	bl	8000910 <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <MX_ADC2_Init+0x110>)
 800118c:	210c      	movs	r1, #12
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_ADC2_Init+0x108>)
 8001190:	f7ff fb3a 	bl	8000808 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_61CYCLES_5);
 8001194:	2205      	movs	r2, #5
 8001196:	4909      	ldr	r1, [pc, #36]	; (80011bc <MX_ADC2_Init+0x110>)
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_ADC2_Init+0x108>)
 800119a:	f7ff fb6c 	bl	8000876 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 800119e:	227f      	movs	r2, #127	; 0x7f
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <MX_ADC2_Init+0x110>)
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_ADC2_Init+0x108>)
 80011a4:	f7ff fbb4 	bl	8000910 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3740      	adds	r7, #64	; 0x40
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	48000800 	.word	0x48000800
 80011b4:	50000100 	.word	0x50000100
 80011b8:	04300002 	.word	0x04300002
 80011bc:	2e300800 	.word	0x2e300800

080011c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
 80011e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80011e4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80011e8:	f7ff fdec 	bl	8000dc4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011f0:	f7ff fdd0 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80011f4:	2310      	movs	r3, #16
 80011f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80011f8:	2303      	movs	r3, #3
 80011fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f002 f8a7 	bl	800335a <LL_GPIO_Init>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 800120c:	2338      	movs	r3, #56	; 0x38
 800120e:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	461a      	mov	r2, r3
 800121e:	4906      	ldr	r1, [pc, #24]	; (8001238 <MX_DAC1_Init+0x78>)
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_DAC1_Init+0x7c>)
 8001222:	f001 ff44 	bl	80030ae <LL_DAC_Init>
  LL_DAC_DisableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8001226:	4904      	ldr	r1, [pc, #16]	; (8001238 <MX_DAC1_Init+0x78>)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_DAC1_Init+0x7c>)
 800122a:	f7ff fbb5 	bl	8000998 <LL_DAC_DisableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	02100001 	.word	0x02100001
 800123c:	40007400 	.word	0x40007400

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b09e      	sub	sp, #120	; 0x78
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001246:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001256:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800125a:	2220      	movs	r2, #32
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fdea 	bl	8003e38 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2228      	movs	r2, #40	; 0x28
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fde3 	bl	8003e38 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001282:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001286:	f7ff fdb5 	bl	8000df4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = TIM1_ARR;
 8001294:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8001298:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80012a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012a6:	4619      	mov	r1, r3
 80012a8:	484c      	ldr	r0, [pc, #304]	; (80013dc <MX_TIM1_Init+0x19c>)
 80012aa:	f002 f957 	bl	800355c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80012ae:	484b      	ldr	r0, [pc, #300]	; (80013dc <MX_TIM1_Init+0x19c>)
 80012b0:	f7ff fc88 	bl	8000bc4 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 80012b4:	2101      	movs	r1, #1
 80012b6:	4849      	ldr	r0, [pc, #292]	; (80013dc <MX_TIM1_Init+0x19c>)
 80012b8:	f7ff fce6 	bl	8000c88 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80012d0:	2300      	movs	r3, #0
 80012d2:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80012dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012e0:	461a      	mov	r2, r3
 80012e2:	2101      	movs	r1, #1
 80012e4:	483d      	ldr	r0, [pc, #244]	; (80013dc <MX_TIM1_Init+0x19c>)
 80012e6:	f002 f9d1 	bl	800368c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80012ea:	2101      	movs	r1, #1
 80012ec:	483b      	ldr	r0, [pc, #236]	; (80013dc <MX_TIM1_Init+0x19c>)
 80012ee:	f7ff fc79 	bl	8000be4 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80012f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f6:	4839      	ldr	r0, [pc, #228]	; (80013dc <MX_TIM1_Init+0x19c>)
 80012f8:	f7ff fcc6 	bl	8000c88 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = (TIM1_ARR - TIM1_ADC_SYNC);
 8001304:	f641 03f5 	movw	r3, #6389	; 0x18f5
 8001308:	653b      	str	r3, [r7, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800130a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800130e:	461a      	mov	r2, r3
 8001310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001314:	4831      	ldr	r0, [pc, #196]	; (80013dc <MX_TIM1_Init+0x19c>)
 8001316:	f002 f9b9 	bl	800368c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	482f      	ldr	r0, [pc, #188]	; (80013dc <MX_TIM1_Init+0x19c>)
 8001320:	f7ff fc60 	bl	8000be4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
 8001324:	2170      	movs	r1, #112	; 0x70
 8001326:	482d      	ldr	r0, [pc, #180]	; (80013dc <MX_TIM1_Init+0x19c>)
 8001328:	f7ff fcfe 	bl	8000d28 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_UPDATE);
 800132c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001330:	482a      	ldr	r0, [pc, #168]	; (80013dc <MX_TIM1_Init+0x19c>)
 8001332:	f7ff fd0c 	bl	8000d4e <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001336:	4829      	ldr	r0, [pc, #164]	; (80013dc <MX_TIM1_Init+0x19c>)
 8001338:	f7ff fd1c 	bl	8000d74 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <MX_TIM1_Init+0x19c>)
 8001376:	f002 f9d7 	bl	8003728 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800137a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800137e:	f7ff fd09 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001382:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001386:	f7ff fd05 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PC13   ------> TIM1_CH1N
  PA8   ------> TIM1_CH1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM1_Init+0x1a0>)
 80013aa:	f001 ffd6 	bl	800335a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80013ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80013c4:	2306      	movs	r3, #6
 80013c6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f001 ffc3 	bl	800335a <LL_GPIO_Init>

}
 80013d4:	bf00      	nop
 80013d6:	3778      	adds	r7, #120	; 0x78
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	48000800 	.word	0x48000800

080013e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff fcd3 	bl	8000d94 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80013ee:	f7ff f96f 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2102      	movs	r1, #2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f9bf 	bl	800077c <NVIC_EncodePriority>
 80013fe:	4603      	mov	r3, r0
 8001400:	4619      	mov	r1, r3
 8001402:	200b      	movs	r0, #11
 8001404:	f7ff f990 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001408:	200b      	movs	r0, #11
 800140a:	f7ff f96f 	bl	80006ec <__NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_GPIO_Init+0x44>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <MX_GPIO_Init+0x44>)
 8001420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_GPIO_Init+0x44>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_GPIO_Init+0x44>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <MX_GPIO_Init+0x44>)
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_GPIO_Init+0x44>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_MspInit+0x44>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_MspInit+0x44>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x44>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <LL_DMA_ClearFlag_TC1>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	605a      	str	r2, [r3, #4]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <HardFault_Handler+0x4>

080014e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <BusFault_Handler+0x4>

080014ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001522:	f000 f891 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  LL_DMA_ClearFlag_TC1(DMA1);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <DMA1_Channel1_IRQHandler+0x14>)
 8001532:	f7ff ffbf 	bl	80014b4 <LL_DMA_ClearFlag_TC1>
  main_isr();
 8001536:	f7ff f895 	bl	8000664 <main_isr>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40020000 	.word	0x40020000

08001544 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001584:	4c0b      	ldr	r4, [pc, #44]	; (80015b4 <LoopForever+0x16>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001592:	f7ff ffd7 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f002 fc2b 	bl	8003df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff fc43 	bl	8000e24 <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015ac:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 80015b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015b4:	20000050 	.word	0x20000050

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x28>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x28>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f90d 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff ff48 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f917 	bl	800183a <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f8ed 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000004 	.word	0x20000004
 8001640:	2000000c 	.word	0x2000000c
 8001644:	20000008 	.word	0x20000008

08001648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c
 800166c:	2000004c 	.word	0x2000004c

08001670 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;  
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000004c 	.word	0x2000004c

08001688 <__NVIC_SetPriorityGrouping>:
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_SetPriority>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff47 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff5c 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff8e 	bl	8001740 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5d 	bl	80016ec <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffb0 	bl	80017a8 <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800185a:	af00      	add	r7, sp, #0
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	f000 bf01 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8160 	beq.w	8001b3e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800187e:	4bae      	ldr	r3, [pc, #696]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b04      	cmp	r3, #4
 8001888:	d00c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188a:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d159      	bne.n	800194a <HAL_RCC_OscConfig+0xf6>
 8001896:	4ba8      	ldr	r3, [pc, #672]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d152      	bne.n	800194a <HAL_RCC_OscConfig+0xf6>
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80018b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x82>
 80018d0:	4b99      	ldr	r3, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0xae>
 80018d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80018ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018fe:	4b8e      	ldr	r3, [pc, #568]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001906:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800190a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800190e:	fa92 f2a2 	rbit	r2, r2
 8001912:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001916:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f002 021f 	and.w	r2, r2, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8102 	beq.w	8001b3c <HAL_RCC_OscConfig+0x2e8>
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80fc 	bne.w	8001b3c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	f000 be93 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d106      	bne.n	8001964 <HAL_RCC_OscConfig+0x110>
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e030      	b.n	80019c6 <HAL_RCC_OscConfig+0x172>
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x134>
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a71      	ldr	r2, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e01e      	b.n	80019c6 <HAL_RCC_OscConfig+0x172>
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001992:	d10c      	bne.n	80019ae <HAL_RCC_OscConfig+0x15a>
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 800199a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a64      	ldr	r2, [pc, #400]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e00b      	b.n	80019c6 <HAL_RCC_OscConfig+0x172>
 80019ae:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a61      	ldr	r2, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5e      	ldr	r2, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d059      	beq.n	8001a84 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fe4e 	bl	8001670 <HAL_GetTick>
 80019d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019da:	f7ff fe49 	bl	8001670 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d902      	bls.n	80019f0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f000 be40 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>
 80019f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001a04:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x1ce>
 8001a1c:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x1fa>
 8001a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a26:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a3e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a52:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a56:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a5a:	fa92 f2a2 	rbit	r2, r2
 8001a5e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a62:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ab      	beq.n	80019da <HAL_RCC_OscConfig+0x186>
 8001a82:	e05c      	b.n	8001b3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fdf4 	bl	8001670 <HAL_GetTick>
 8001a88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fdef 	bl	8001670 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d902      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f000 bde6 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ab8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x282>
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ae>
 8001ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ada:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001af2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_RCC_OscConfig+0x2e4>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b06:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b0e:	fa92 f2a2 	rbit	r2, r2
 8001b12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001b16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ab      	bne.n	8001a8e <HAL_RCC_OscConfig+0x23a>
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_OscConfig+0x2ea>
 8001b38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8170 	beq.w	8001e2e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4e:	4bd0      	ldr	r3, [pc, #832]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b5a:	4bcd      	ldr	r3, [pc, #820]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d16d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3ee>
 8001b66:	4bca      	ldr	r3, [pc, #808]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b72:	d166      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3ee>
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001b86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x350>
 8001b9e:	4bbc      	ldr	r3, [pc, #752]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e013      	b.n	8001bcc <HAL_RCC_OscConfig+0x378>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bbc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bc8:	4bb1      	ldr	r3, [pc, #708]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001bd2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001bde:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3ba>
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d002      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f000 bd31 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4ba0      	ldr	r3, [pc, #640]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	21f8      	movs	r1, #248	; 0xf8
 8001c1e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001c26:	fa91 f1a1 	rbit	r1, r1
 8001c2a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001c2e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c32:	fab1 f181 	clz	r1, r1
 8001c36:	b2c9      	uxtb	r1, r1
 8001c38:	408b      	lsls	r3, r1
 8001c3a:	4995      	ldr	r1, [pc, #596]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c40:	e0f5      	b.n	8001e2e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8085 	beq.w	8001d58 <HAL_RCC_OscConfig+0x504>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c60:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	2301      	movs	r3, #1
 8001c78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fcf9 	bl	8001670 <HAL_GetTick>
 8001c7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff fcf4 	bl	8001670 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d902      	bls.n	8001c9a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f000 bceb 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001cac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x476>
 8001cc4:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e013      	b.n	8001cf2 <HAL_RCC_OscConfig+0x49e>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ce2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cee:	4b68      	ldr	r3, [pc, #416]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001cf8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001d04:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f002 021f 	and.w	r2, r2, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0af      	beq.n	8001c84 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	21f8      	movs	r1, #248	; 0xf8
 8001d34:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001d3c:	fa91 f1a1 	rbit	r1, r1
 8001d40:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001d44:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d48:	fab1 f181 	clz	r1, r1
 8001d4c:	b2c9      	uxtb	r1, r1
 8001d4e:	408b      	lsls	r3, r1
 8001d50:	494f      	ldr	r1, [pc, #316]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
 8001d56:	e06a      	b.n	8001e2e <HAL_RCC_OscConfig+0x5da>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fc74 	bl	8001670 <HAL_GetTick>
 8001d88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fc6f 	bl	8001670 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d902      	bls.n	8001da4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	f000 bc66 	b.w	8002670 <HAL_RCC_OscConfig+0xe1c>
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001db6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x580>
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x5a8>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001dec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCC_OscConfig+0x63c>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e02:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e06:	fa92 f2a2 	rbit	r2, r2
 8001e0a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001e0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f002 021f 	and.w	r2, r2, #31
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1af      	bne.n	8001d8e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80da 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d069      	beq.n	8001f1c <HAL_RCC_OscConfig+0x6c8>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x640>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2301      	movs	r3, #1
 8001e70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fbfd 	bl	8001670 <HAL_GetTick>
 8001e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e00d      	b.n	8001e98 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fbf8 	bl	8001670 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d905      	bls.n	8001e98 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e3ef      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	10908120 	.word	0x10908120
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ec8:	2202      	movs	r2, #2
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001eda:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001edc:	4ba4      	ldr	r3, [pc, #656]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 8001ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	6019      	str	r1, [r3, #0]
 8001ee8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f1a3 	rbit	r1, r3
 8001ef2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ef6:	6019      	str	r1, [r3, #0]
  return result;
 8001ef8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0b0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x628>
 8001f1a:	e06a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x79e>
 8001f1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f32:	601a      	str	r2, [r3, #0]
  return result;
 8001f34:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b8c      	ldr	r3, [pc, #560]	; (8002174 <HAL_RCC_OscConfig+0x920>)
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fb8f 	bl	8001670 <HAL_GetTick>
 8001f52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f56:	e009      	b.n	8001f6c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fb8a 	bl	8001670 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e381      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 8001f6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f70:	2202      	movs	r2, #2
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f88:	2202      	movs	r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f2a3 	rbit	r2, r3
 8001f96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 8001fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	6019      	str	r1, [r3, #0]
 8001fc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f1a3 	rbit	r1, r3
 8001fca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fce:	6019      	str	r1, [r3, #0]
  return result;
 8001fd0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1b2      	bne.n	8001f58 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8157 	beq.w	80022b0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	61d3      	str	r3, [r2, #28]
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_RCC_OscConfig+0x924>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11a      	bne.n	800207c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x924>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_RCC_OscConfig+0x924>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff fb0d 	bl	8001670 <HAL_GetTick>
 8002056:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	e009      	b.n	8002070 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7ff fb08 	bl	8001670 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	; 0x64
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e2ff      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x924>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x840>
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a39      	ldr	r2, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	e02f      	b.n	80020f4 <HAL_RCC_OscConfig+0x8a0>
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x864>
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a33      	ldr	r2, [pc, #204]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0x8a0>
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x888>
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x8a0>
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d06a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fab7 	bl	8001670 <HAL_GetTick>
 8002102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff fab2 	bl	8001670 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e2a7      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 8002120:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800213c:	2202      	movs	r2, #2
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002154:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d108      	bne.n	800217c <HAL_RCC_OscConfig+0x928>
 800216a:	4b01      	ldr	r3, [pc, #4]	; (8002170 <HAL_RCC_OscConfig+0x91c>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	e013      	b.n	8002198 <HAL_RCC_OscConfig+0x944>
 8002170:	40021000 	.word	0x40021000
 8002174:	10908120 	.word	0x10908120
 8002178:	40007000 	.word	0x40007000
 800217c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002180:	2202      	movs	r2, #2
 8002182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4bc0      	ldr	r3, [pc, #768]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800219c:	2102      	movs	r1, #2
 800219e:	6011      	str	r1, [r2, #0]
 80021a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	fa92 f1a2 	rbit	r1, r2
 80021aa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021ae:	6011      	str	r1, [r2, #0]
  return result;
 80021b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 021f 	and.w	r2, r2, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d09a      	beq.n	8002108 <HAL_RCC_OscConfig+0x8b4>
 80021d2:	e063      	b.n	800229c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff fa4c 	bl	8001670 <HAL_GetTick>
 80021d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00b      	b.n	80021f6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff fa47 	bl	8001670 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e23c      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 80021f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800222a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0x9f2>
 8002240:	4b95      	ldr	r3, [pc, #596]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	e00d      	b.n	8002262 <HAL_RCC_OscConfig+0xa0e>
 8002246:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800224a:	2202      	movs	r2, #2
 800224c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f2a3 	rbit	r2, r3
 8002258:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4b8e      	ldr	r3, [pc, #568]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002266:	2102      	movs	r1, #2
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	fa92 f1a2 	rbit	r1, r2
 8002274:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002278:	6011      	str	r1, [r2, #0]
  return result;
 800227a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1a0      	bne.n	80021de <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a7b      	ldr	r2, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 81d9 	beq.w	800266e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	f000 81a6 	beq.w	8002616 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f040 811e 	bne.w	8002512 <HAL_RCC_OscConfig+0xcbe>
 80022d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022ee:	601a      	str	r2, [r3, #0]
  return result;
 80022f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002300:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	461a      	mov	r2, r3
 8002308:	2300      	movs	r3, #0
 800230a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f9b0 	bl	8001670 <HAL_GetTick>
 8002310:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	e009      	b.n	800232a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f9ab 	bl	8001670 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1a2      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 800232a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800232e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002342:	601a      	str	r2, [r3, #0]
  return result;
 8002344:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002348:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d102      	bne.n	8002364 <HAL_RCC_OscConfig+0xb10>
 800235e:	4b4e      	ldr	r3, [pc, #312]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	e01b      	b.n	800239c <HAL_RCC_OscConfig+0xb48>
 8002364:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023a4:	6011      	str	r1, [r2, #0]
 80023a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	fa92 f1a2 	rbit	r1, r2
 80023b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023b4:	6011      	str	r1, [r2, #0]
  return result;
 80023b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d19e      	bne.n	8002316 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f023 020f 	bic.w	r2, r3, #15
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	492c      	ldr	r1, [pc, #176]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a19      	ldr	r1, [r3, #32]
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	430b      	orrs	r3, r1
 8002402:	4925      	ldr	r1, [pc, #148]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
 8002408:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800240c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	fa93 f2a3 	rbit	r2, r3
 800241c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002420:	601a      	str	r2, [r3, #0]
  return result;
 8002422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002426:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002432:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	461a      	mov	r2, r3
 800243a:	2301      	movs	r3, #1
 800243c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff f917 	bl	8001670 <HAL_GetTick>
 8002442:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002446:	e009      	b.n	800245c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7ff f912 	bl	8001670 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e109      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 800245c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002474:	601a      	str	r2, [r3, #0]
  return result;
 8002476:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800247a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0xc48>
 8002490:	4b01      	ldr	r3, [pc, #4]	; (8002498 <HAL_RCC_OscConfig+0xc44>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	e01e      	b.n	80024d4 <HAL_RCC_OscConfig+0xc80>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0xe28>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80024d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024dc:	6011      	str	r1, [r2, #0]
 80024de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	fa92 f1a2 	rbit	r1, r2
 80024e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024ec:	6011      	str	r1, [r2, #0]
  return result;
 80024ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f002 021f 	and.w	r2, r2, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d09b      	beq.n	8002448 <HAL_RCC_OscConfig+0xbf4>
 8002510:	e0ad      	b.n	800266e <HAL_RCC_OscConfig+0xe1a>
 8002512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002516:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800252a:	601a      	str	r2, [r3, #0]
  return result;
 800252c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002530:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800253c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	461a      	mov	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff f892 	bl	8001670 <HAL_GetTick>
 800254c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e009      	b.n	8002566 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff f88d 	bl	8001670 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e084      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
 8002566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f2a3 	rbit	r2, r3
 800257a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800257e:	601a      	str	r2, [r3, #0]
  return result;
 8002580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002584:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0xd4c>
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_RCC_OscConfig+0xe28>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e01b      	b.n	80025d8 <HAL_RCC_OscConfig+0xd84>
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f107 0320 	add.w	r3, r7, #32
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_RCC_OscConfig+0xe28>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f107 0214 	add.w	r2, r7, #20
 80025dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e0:	6011      	str	r1, [r2, #0]
 80025e2:	f107 0214 	add.w	r2, r7, #20
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	fa92 f1a2 	rbit	r1, r2
 80025ec:	f107 0210 	add.w	r2, r7, #16
 80025f0:	6011      	str	r1, [r2, #0]
  return result;
 80025f2:	f107 0210 	add.w	r2, r7, #16
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d19e      	bne.n	8002552 <HAL_RCC_OscConfig+0xcfe>
 8002614:	e02b      	b.n	800266e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e025      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0xe28>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_RCC_OscConfig+0xe28>)
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002634:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002638:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	429a      	cmp	r2, r3
 8002644:	d111      	bne.n	800266a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002646:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800264a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002654:	429a      	cmp	r2, r3
 8002656:	d108      	bne.n	800266a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b09e      	sub	sp, #120	; 0x78
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e162      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b90      	ldr	r3, [pc, #576]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	498b      	ldr	r1, [pc, #556]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b89      	ldr	r3, [pc, #548]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e14a      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b82      	ldr	r3, [pc, #520]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	497f      	ldr	r1, [pc, #508]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80dc 	beq.w	80028ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d13c      	bne.n	8002776 <HAL_RCC_ClockConfig+0xf6>
 80026fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002700:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d102      	bne.n	8002726 <HAL_RCC_ClockConfig+0xa6>
 8002720:	4b6f      	ldr	r3, [pc, #444]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e00f      	b.n	8002746 <HAL_RCC_ClockConfig+0xc6>
 8002726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800272a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	667b      	str	r3, [r7, #100]	; 0x64
 8002734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002738:	663b      	str	r3, [r7, #96]	; 0x60
 800273a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800274a:	65ba      	str	r2, [r7, #88]	; 0x58
 800274c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002756:	fab2 f282 	clz	r2, r2
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f002 021f 	and.w	r2, r2, #31
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d17b      	bne.n	800286a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0f3      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d13c      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x178>
 800277e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002782:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x128>
 80027a2:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	e00f      	b.n	80027c8 <HAL_RCC_ClockConfig+0x148>
 80027a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	647b      	str	r3, [r7, #68]	; 0x44
 80027b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
 80027bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c4:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80027ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d0:	fa92 f2a2 	rbit	r2, r2
 80027d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f002 021f 	and.w	r2, r2, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d13a      	bne.n	800286a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b2      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
 80027f8:	2302      	movs	r3, #2
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1a0>
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e00d      	b.n	800283c <HAL_RCC_ClockConfig+0x1bc>
 8002820:	2302      	movs	r3, #2
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	2302      	movs	r3, #2
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2202      	movs	r2, #2
 800283e:	61ba      	str	r2, [r7, #24]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	fa92 f2a2 	rbit	r2, r2
 8002846:	617a      	str	r2, [r7, #20]
  return result;
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e079      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	491a      	ldr	r1, [pc, #104]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe fef8 	bl	8001670 <HAL_GetTick>
 8002880:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fef4 	bl	8001670 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e061      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_ClockConfig+0x260>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d214      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e040      	b.n	800295e <HAL_RCC_ClockConfig+0x2de>
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_RCC_ClockConfig+0x2e8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	491a      	ldr	r1, [pc, #104]	; (8002968 <HAL_RCC_ClockConfig+0x2e8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x2e8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4912      	ldr	r1, [pc, #72]	; (8002968 <HAL_RCC_ClockConfig+0x2e8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002922:	f000 f829 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002926:	4601      	mov	r1, r0
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCC_ClockConfig+0x2e8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002930:	22f0      	movs	r2, #240	; 0xf0
 8002932:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	fa92 f2a2 	rbit	r2, r2
 800293a:	60fa      	str	r2, [r7, #12]
  return result;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	fab2 f282 	clz	r2, r2
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	40d3      	lsrs	r3, r2
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x2ec>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	fa21 f303 	lsr.w	r3, r1, r3
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <HAL_RCC_ClockConfig+0x2f0>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_ClockConfig+0x2f4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fe46 	bl	80015e8 <HAL_InitTick>
  
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3778      	adds	r7, #120	; 0x78
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	08003e88 	.word	0x08003e88
 8002970:	20000004 	.word	0x20000004
 8002974:	20000008 	.word	0x20000008

08002978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b08b      	sub	sp, #44	; 0x2c
 800297c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d002      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x30>
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x36>
 80029a6:	e03f      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029aa:	623b      	str	r3, [r7, #32]
      break;
 80029ac:	e03f      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	607a      	str	r2, [r7, #4]
  return result;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	40d3      	lsrs	r3, r2
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	220f      	movs	r2, #15
 80029dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	fa92 f2a2 	rbit	r2, r2
 80029e4:	60fa      	str	r2, [r7, #12]
  return result;
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a00:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	e007      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a12:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	623b      	str	r3, [r7, #32]
      break;
 8002a26:	e002      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a2a:	623b      	str	r3, [r7, #32]
      break;
 8002a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	372c      	adds	r7, #44	; 0x2c
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	08003e98 	.word	0x08003e98
 8002a48:	08003ea8 	.word	0x08003ea8

08002a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b092      	sub	sp, #72	; 0x48
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d4 	beq.w	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a70:	4b4e      	ldr	r3, [pc, #312]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10e      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	61d3      	str	r3, [r2, #28]
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fddd 	bl	8001670 <HAL_GetTick>
 8002ab6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fdd9 	bl	8001670 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	; 0x64
 8002ac6:	d901      	bls.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1d6      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad8:	4b34      	ldr	r3, [pc, #208]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8084 	beq.w	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d07c      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af8:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	461a      	mov	r2, r3
 8002b22:	2301      	movs	r3, #1
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	2300      	movs	r3, #0
 8002b48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04b      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fd89 	bl	8001670 <HAL_GetTick>
 8002b5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe fd85 	bl	8001670 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e180      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d108      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ba6:	4b01      	ldr	r3, [pc, #4]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	e00d      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	10908100 	.word	0x10908100
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	4ba0      	ldr	r3, [pc, #640]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2202      	movs	r2, #2
 8002bca:	613a      	str	r2, [r7, #16]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f002 021f 	and.w	r2, r2, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0b7      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bf2:	4b95      	ldr	r3, [pc, #596]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4992      	ldr	r1, [pc, #584]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	4a8d      	ldr	r2, [pc, #564]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c24:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f023 0203 	bic.w	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4985      	ldr	r1, [pc, #532]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	497e      	ldr	r1, [pc, #504]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c60:	4b79      	ldr	r3, [pc, #484]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	4976      	ldr	r1, [pc, #472]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7e:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f023 0210 	bic.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	496f      	ldr	r1, [pc, #444]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	4967      	ldr	r1, [pc, #412]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f023 0220 	bic.w	r2, r3, #32
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4960      	ldr	r1, [pc, #384]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	4958      	ldr	r1, [pc, #352]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf6:	4b54      	ldr	r3, [pc, #336]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4951      	ldr	r1, [pc, #324]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4949      	ldr	r1, [pc, #292]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d32:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4942      	ldr	r1, [pc, #264]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d50:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	493a      	ldr	r1, [pc, #232]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	4933      	ldr	r1, [pc, #204]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	492b      	ldr	r1, [pc, #172]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4924      	ldr	r1, [pc, #144]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	491c      	ldr	r1, [pc, #112]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	4915      	ldr	r1, [pc, #84]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e04:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	490d      	ldr	r1, [pc, #52]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2e:	4906      	ldr	r1, [pc, #24]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00c      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	e002      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	490b      	ldr	r1, [pc, #44]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3748      	adds	r7, #72	; 0x48
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <LL_ADC_REG_SetSequencerLength>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f023 020f 	bic.w	r2, r3, #15
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_IsEnabled>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <LL_ADC_CommonInit+0xa8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10f      	bne.n	8002f0a <LL_ADC_CommonInit+0x36>
 8002eea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002eee:	f7ff ffde 	bl	8002eae <LL_ADC_IsEnabled>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4822      	ldr	r0, [pc, #136]	; (8002f80 <LL_ADC_CommonInit+0xac>)
 8002ef6:	f7ff ffda 	bl	8002eae <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4323      	orrs	r3, r4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e00d      	b.n	8002f26 <LL_ADC_CommonInit+0x52>
 8002f0a:	481e      	ldr	r0, [pc, #120]	; (8002f84 <LL_ADC_CommonInit+0xb0>)
 8002f0c:	f7ff ffcf 	bl	8002eae <LL_ADC_IsEnabled>
 8002f10:	4604      	mov	r4, r0
 8002f12:	481d      	ldr	r0, [pc, #116]	; (8002f88 <LL_ADC_CommonInit+0xb4>)
 8002f14:	f7ff ffcb 	bl	8002eae <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4323      	orrs	r3, r4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d020      	beq.n	8002f6c <LL_ADC_CommonInit+0x98>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <LL_ADC_CommonInit+0x84>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <LL_ADC_CommonInit+0xb8>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	6852      	ldr	r2, [r2, #4]
 8002f42:	4311      	orrs	r1, r2
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	e00b      	b.n	8002f70 <LL_ADC_CommonInit+0x9c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <LL_ADC_CommonInit+0xb8>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	e001      	b.n	8002f70 <LL_ADC_CommonInit+0x9c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000400 	.word	0x50000400
 8002f88:	50000500 	.word	0x50000500
 8002f8c:	fffc30e0 	.word	0xfffc30e0

08002f90 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff85 	bl	8002eae <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d111      	bne.n	8002fce <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6852      	ldr	r2, [r2, #4]
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	6892      	ldr	r2, [r2, #8]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	e001      	b.n	8002fd2 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff5f 	bl	8002eae <LL_ADC_IsEnabled>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d132      	bne.n	800305c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d015      	beq.n	800302a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <LL_ADC_REG_Init+0x90>)
 8003004:	4013      	ands	r3, r2
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	6811      	ldr	r1, [r2, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	4311      	orrs	r1, r2
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	4311      	orrs	r1, r2
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	6912      	ldr	r2, [r2, #16]
 800301a:	4311      	orrs	r1, r2
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	6952      	ldr	r2, [r2, #20]
 8003020:	430a      	orrs	r2, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	e011      	b.n	800304e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <LL_ADC_REG_Init+0x90>)
 8003030:	4013      	ands	r3, r2
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	6811      	ldr	r1, [r2, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	68d2      	ldr	r2, [r2, #12]
 800303a:	4311      	orrs	r1, r2
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	6912      	ldr	r2, [r2, #16]
 8003040:	4311      	orrs	r1, r2
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	6952      	ldr	r2, [r2, #20]
 8003046:	430a      	orrs	r2, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff17 	bl	8002e88 <LL_ADC_REG_SetSequencerLength>
 800305a:	e001      	b.n	8003060 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	fff0c03c 	.word	0xfff0c03c

08003070 <LL_DAC_IsEnabled>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2101      	movs	r1, #1
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	429a      	cmp	r2, r3
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff ffd5 	bl	8003070 <LL_DAC_IsEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d13a      	bne.n	8003142 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01e      	beq.n	8003112 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	f640 71fa 	movw	r1, #4090	; 0xffa
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	401a      	ands	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4319      	orrs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4319      	orrs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4319      	orrs	r1, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	431a      	orrs	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e019      	b.n	8003146 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	21fa      	movs	r1, #250	; 0xfa
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	401a      	ands	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4319      	orrs	r1, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	431a      	orrs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e001      	b.n	8003146 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	613b      	str	r3, [r7, #16]
  return result;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2103      	movs	r1, #3
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	61bb      	str	r3, [r7, #24]
  return result;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	601a      	str	r2, [r3, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	401a      	ands	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80031de:	b480      	push	{r7}
 80031e0:	b089      	sub	sp, #36	; 0x24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	613b      	str	r3, [r7, #16]
  return result;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2103      	movs	r1, #3
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	61bb      	str	r3, [r7, #24]
  return result;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003230:	bf00      	nop
 8003232:	3724      	adds	r7, #36	; 0x24
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	613b      	str	r3, [r7, #16]
  return result;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2103      	movs	r1, #3
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	401a      	ands	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	61bb      	str	r3, [r7, #24]
  return result;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	60da      	str	r2, [r3, #12]
}
 800328e:	bf00      	nop
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800329a:	b480      	push	{r7}
 800329c:	b089      	sub	sp, #36	; 0x24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	613b      	str	r3, [r7, #16]
  return result;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	210f      	movs	r1, #15
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	401a      	ands	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	61bb      	str	r3, [r7, #24]
  return result;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80032ec:	bf00      	nop
 80032ee:	3724      	adds	r7, #36	; 0x24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	613b      	str	r3, [r7, #16]
  return result;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	210f      	movs	r1, #15
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	61bb      	str	r3, [r7, #24]
  return result;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800334e:	bf00      	nop
 8003350:	3724      	adds	r7, #36	; 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b088      	sub	sp, #32
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	613b      	str	r3, [r7, #16]
  return result;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800337c:	e051      	b.n	8003422 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d043      	beq.n	800341c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d003      	beq.n	80033a4 <LL_GPIO_Init+0x4a>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d10e      	bne.n	80033c2 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	461a      	mov	r2, r3
 80033aa:	69b9      	ldr	r1, [r7, #24]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff16 	bl	80031de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	461a      	mov	r2, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fef6 	bl	80031ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	461a      	mov	r2, r3
 80033c8:	69b9      	ldr	r1, [r7, #24]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff36 	bl	800323c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11a      	bne.n	800340e <LL_GPIO_Init+0xb4>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	60bb      	str	r3, [r7, #8]
  return result;
 80033e4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b07      	cmp	r3, #7
 80033ee:	d807      	bhi.n	8003400 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	461a      	mov	r2, r3
 80033f6:	69b9      	ldr	r1, [r7, #24]
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff4e 	bl	800329a <LL_GPIO_SetAFPin_0_7>
 80033fe:	e006      	b.n	800340e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	461a      	mov	r2, r3
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff75 	bl	80032f8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	461a      	mov	r2, r3
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff fe9a 	bl	8003150 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1a6      	bne.n	800337e <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <LL_TIM_SetPrescaler>:
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_TIM_SetAutoReload>:
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_TIM_SetRepetitionCounter>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_TIM_OC_SetCompareCH1>:
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_TIM_OC_SetCompareCH2>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_TIM_OC_SetCompareCH3>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_TIM_OC_SetCompareCH4>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_TIM_OC_SetCompareCH5>:
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_TIM_OC_SetCompareCH6>:
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	615a      	str	r2, [r3, #20]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3f      	ldr	r2, [pc, #252]	; (800366c <LL_TIM_Init+0x110>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d013      	beq.n	800359c <LL_TIM_Init+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d00f      	beq.n	800359c <LL_TIM_Init+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <LL_TIM_Init+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <LL_TIM_Init+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <LL_TIM_Init+0x118>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <LL_TIM_Init+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <LL_TIM_Init+0x11c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <LL_TIM_Init+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a39      	ldr	r2, [pc, #228]	; (800367c <LL_TIM_Init+0x120>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d106      	bne.n	80035aa <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2f      	ldr	r2, [pc, #188]	; (800366c <LL_TIM_Init+0x110>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01f      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d01b      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	; (8003670 <LL_TIM_Init+0x114>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d017      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <LL_TIM_Init+0x118>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <LL_TIM_Init+0x11c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00f      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2a      	ldr	r2, [pc, #168]	; (8003680 <LL_TIM_Init+0x124>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <LL_TIM_Init+0x128>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d007      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a28      	ldr	r2, [pc, #160]	; (8003688 <LL_TIM_Init+0x12c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <LL_TIM_Init+0x96>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a23      	ldr	r2, [pc, #140]	; (800367c <LL_TIM_Init+0x120>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d106      	bne.n	8003600 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff22 	bl	8003456 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff0e 	bl	800343a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <LL_TIM_Init+0x110>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <LL_TIM_Init+0xf2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <LL_TIM_Init+0x11c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <LL_TIM_Init+0xf2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <LL_TIM_Init+0x124>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <LL_TIM_Init+0xf2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a12      	ldr	r2, [pc, #72]	; (8003684 <LL_TIM_Init+0x128>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <LL_TIM_Init+0xf2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a11      	ldr	r2, [pc, #68]	; (8003688 <LL_TIM_Init+0x12c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <LL_TIM_Init+0xf2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <LL_TIM_Init+0x120>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d105      	bne.n	800365a <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff0c 	bl	8003472 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ff6d 	bl	800353a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40013400 	.word	0x40013400
 800367c:	40015000 	.word	0x40015000
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800

0800368c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d01f      	beq.n	80036e4 <LL_TIM_OC_Init+0x58>
 80036a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a8:	d804      	bhi.n	80036b4 <LL_TIM_OC_Init+0x28>
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d00c      	beq.n	80036c8 <LL_TIM_OC_Init+0x3c>
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d011      	beq.n	80036d6 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80036b2:	e033      	b.n	800371c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d022      	beq.n	8003700 <LL_TIM_OC_Init+0x74>
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036be:	d026      	beq.n	800370e <LL_TIM_OC_Init+0x82>
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d015      	beq.n	80036f2 <LL_TIM_OC_Init+0x66>
      break;
 80036c6:	e029      	b.n	800371c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8b0 	bl	8003830 <OC1Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]
      break;
 80036d4:	e022      	b.n	800371c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f92f 	bl	800393c <OC2Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]
      break;
 80036e2:	e01b      	b.n	800371c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f9b2 	bl	8003a50 <OC3Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]
      break;
 80036f0:	e014      	b.n	800371c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa35 	bl	8003b64 <OC4Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	e00d      	b.n	800371c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 faa0 	bl	8003c48 <OC5Config>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]
      break;
 800370c:	e006      	b.n	800371c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fb03 	bl	8003d1c <OC6Config>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]
      break;
 800371a:	bf00      	nop
  }

  return result;
 800371c:	7dfb      	ldrb	r3, [r7, #23]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	7b12      	ldrb	r2, [r2, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	89d2      	ldrh	r2, [r2, #14]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <LL_TIM_BDTR_Init+0xfc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <LL_TIM_BDTR_Init+0x96>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <LL_TIM_BDTR_Init+0x100>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <LL_TIM_BDTR_Init+0x96>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <LL_TIM_BDTR_Init+0x104>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d106      	bne.n	80037cc <LL_TIM_BDTR_Init+0xa4>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <LL_TIM_BDTR_Init+0xfc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <LL_TIM_BDTR_Init+0xbc>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <LL_TIM_BDTR_Init+0x100>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <LL_TIM_BDTR_Init+0xbc>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <LL_TIM_BDTR_Init+0x104>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d114      	bne.n	800380e <LL_TIM_BDTR_Init+0xe6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40013400 	.word	0x40013400
 800382c:	40015000 	.word	0x40015000

08003830 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0202 	bic.w	r2, r3, #2
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <OC1Config+0xf4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <OC1Config+0x8e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a23      	ldr	r2, [pc, #140]	; (8003928 <OC1Config+0xf8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00f      	beq.n	80038be <OC1Config+0x8e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <OC1Config+0xfc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00b      	beq.n	80038be <OC1Config+0x8e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a21      	ldr	r2, [pc, #132]	; (8003930 <OC1Config+0x100>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <OC1Config+0x8e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a20      	ldr	r2, [pc, #128]	; (8003934 <OC1Config+0x104>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d003      	beq.n	80038be <OC1Config+0x8e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <OC1Config+0x108>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d11e      	bne.n	80038fc <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 0208 	bic.w	r2, r3, #8
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0204 	bic.w	r2, r3, #4
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fdbd 	bl	800348e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40013400 	.word	0x40013400
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	40015000 	.word	0x40015000

0800393c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f023 0210 	bic.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	0212      	lsls	r2, r2, #8
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 0220 	bic.w	r2, r3, #32
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0210 	bic.w	r2, r3, #16
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <OC2Config+0xfc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d013      	beq.n	80039d0 <OC2Config+0x94>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <OC2Config+0x100>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00f      	beq.n	80039d0 <OC2Config+0x94>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <OC2Config+0x104>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <OC2Config+0x94>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <OC2Config+0x108>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <OC2Config+0x94>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <OC2Config+0x10c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <OC2Config+0x94>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <OC2Config+0x110>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d11f      	bne.n	8003a10 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	019b      	lsls	r3, r3, #6
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fd41 	bl	80034aa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40013400 	.word	0x40013400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800
 8003a4c:	40015000 	.word	0x40015000

08003a50 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <OC3Config+0xfc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <OC3Config+0x92>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <OC3Config+0x100>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00f      	beq.n	8003ae2 <OC3Config+0x92>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <OC3Config+0x104>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <OC3Config+0x92>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <OC3Config+0x108>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <OC3Config+0x92>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <OC3Config+0x10c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <OC3Config+0x92>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <OC3Config+0x110>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d11f      	bne.n	8003b22 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	029b      	lsls	r3, r3, #10
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	029b      	lsls	r3, r3, #10
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	015b      	lsls	r3, r3, #5
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fcc6 	bl	80034c6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800
 8003b60:	40015000 	.word	0x40015000

08003b64 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	0212      	lsls	r2, r2, #8
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	031b      	lsls	r3, r3, #12
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	031b      	lsls	r3, r3, #12
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <OC4Config+0xcc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <OC4Config+0x94>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <OC4Config+0xd0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <OC4Config+0x94>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <OC4Config+0xd4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <OC4Config+0x94>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <OC4Config+0xd8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <OC4Config+0x94>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <OC4Config+0xdc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <OC4Config+0x94>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <OC4Config+0xe0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d107      	bne.n	8003c08 <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fc61 	bl	80034e2 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40013400 	.word	0x40013400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800
 8003c44:	40015000 	.word	0x40015000

08003c48 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a19      	ldr	r2, [pc, #100]	; (8003d04 <OC5Config+0xbc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <OC5Config+0x84>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <OC5Config+0xc0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00f      	beq.n	8003ccc <OC5Config+0x84>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <OC5Config+0xc4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00b      	beq.n	8003ccc <OC5Config+0x84>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <OC5Config+0xc8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <OC5Config+0x84>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <OC5Config+0xcc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <OC5Config+0x84>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <OC5Config+0xd0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fc06 	bl	80034fe <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40013400 	.word	0x40013400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800
 8003d18:	40015000 	.word	0x40015000

08003d1c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	0212      	lsls	r2, r2, #8
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	051b      	lsls	r3, r3, #20
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	051b      	lsls	r3, r3, #20
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <OC6Config+0xbc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <OC6Config+0x86>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <OC6Config+0xc0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <OC6Config+0x86>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <OC6Config+0xc4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <OC6Config+0x86>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <OC6Config+0xc8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <OC6Config+0x86>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <OC6Config+0xcc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <OC6Config+0x86>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <OC6Config+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d109      	bne.n	8003db6 <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fbab 	bl	800351e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40013400 	.word	0x40013400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800
 8003dec:	40015000 	.word	0x40015000

08003df0 <__libc_init_array>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0d      	ldr	r6, [pc, #52]	; (8003e28 <__libc_init_array+0x38>)
 8003df4:	4c0d      	ldr	r4, [pc, #52]	; (8003e2c <__libc_init_array+0x3c>)
 8003df6:	1ba4      	subs	r4, r4, r6
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	2500      	movs	r5, #0
 8003dfc:	42a5      	cmp	r5, r4
 8003dfe:	d109      	bne.n	8003e14 <__libc_init_array+0x24>
 8003e00:	4e0b      	ldr	r6, [pc, #44]	; (8003e30 <__libc_init_array+0x40>)
 8003e02:	4c0c      	ldr	r4, [pc, #48]	; (8003e34 <__libc_init_array+0x44>)
 8003e04:	f000 f820 	bl	8003e48 <_init>
 8003e08:	1ba4      	subs	r4, r4, r6
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	42a5      	cmp	r5, r4
 8003e10:	d105      	bne.n	8003e1e <__libc_init_array+0x2e>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e18:	4798      	blx	r3
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	e7ee      	b.n	8003dfc <__libc_init_array+0xc>
 8003e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e22:	4798      	blx	r3
 8003e24:	3501      	adds	r5, #1
 8003e26:	e7f2      	b.n	8003e0e <__libc_init_array+0x1e>
 8003e28:	08003eb8 	.word	0x08003eb8
 8003e2c:	08003eb8 	.word	0x08003eb8
 8003e30:	08003eb8 	.word	0x08003eb8
 8003e34:	08003ebc 	.word	0x08003ebc

08003e38 <memset>:
 8003e38:	4402      	add	r2, r0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <memset+0xa>
 8003e40:	4770      	bx	lr
 8003e42:	f803 1b01 	strb.w	r1, [r3], #1
 8003e46:	e7f9      	b.n	8003e3c <memset+0x4>

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
