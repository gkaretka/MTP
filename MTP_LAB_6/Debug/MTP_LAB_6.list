
MTP_LAB_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f30  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800310c  0800310c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800310c  0800310c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800310c  0800310c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08003120  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08003120  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000147f  00000000  00000000  00026ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000660  00000000  00000000  00028478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00028ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e49  00000000  00000000  00029080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006745  00000000  00000000  00049ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6cdf  00000000  00000000  0005060e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001172ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001884  00000000  00000000  00117368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080030ac 	.word	0x080030ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080030ac 	.word	0x080030ac

080001d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__NVIC_GetPriorityGrouping+0x18>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	0a1b      	lsrs	r3, r3, #8
 80001de:	f003 0307 	and.w	r3, r3, #7
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db0b      	blt.n	800021a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 021f 	and.w	r2, r3, #31
 8000208:	4907      	ldr	r1, [pc, #28]	; (8000228 <__NVIC_EnableIRQ+0x38>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	095b      	lsrs	r3, r3, #5
 8000210:	2001      	movs	r0, #1
 8000212:	fa00 f202 	lsl.w	r2, r0, r2
 8000216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000e100 	.word	0xe000e100

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	; (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	; (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	; 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0201 	orr.w	r2, r3, #1
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6a1a      	ldr	r2, [r3, #32]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	621a      	str	r2, [r3, #32]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d028      	beq.n	80003aa <LL_TIM_OC_DisableFast+0x62>
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b04      	cmp	r3, #4
 800035c:	d023      	beq.n	80003a6 <LL_TIM_OC_DisableFast+0x5e>
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b10      	cmp	r3, #16
 8000362:	d01e      	beq.n	80003a2 <LL_TIM_OC_DisableFast+0x5a>
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2b40      	cmp	r3, #64	; 0x40
 8000368:	d019      	beq.n	800039e <LL_TIM_OC_DisableFast+0x56>
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d013      	beq.n	800039a <LL_TIM_OC_DisableFast+0x52>
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000378:	d00d      	beq.n	8000396 <LL_TIM_OC_DisableFast+0x4e>
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000380:	d007      	beq.n	8000392 <LL_TIM_OC_DisableFast+0x4a>
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000388:	d101      	bne.n	800038e <LL_TIM_OC_DisableFast+0x46>
 800038a:	2307      	movs	r3, #7
 800038c:	e00e      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 800038e:	2308      	movs	r3, #8
 8000390:	e00c      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 8000392:	2306      	movs	r3, #6
 8000394:	e00a      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 8000396:	2305      	movs	r3, #5
 8000398:	e008      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 800039a:	2304      	movs	r3, #4
 800039c:	e006      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 800039e:	2303      	movs	r3, #3
 80003a0:	e004      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 80003a2:	2302      	movs	r3, #2
 80003a4:	e002      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 80003a6:	2301      	movs	r3, #1
 80003a8:	e000      	b.n	80003ac <LL_TIM_OC_DisableFast+0x64>
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3318      	adds	r3, #24
 80003b2:	4619      	mov	r1, r3
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <LL_TIM_OC_DisableFast+0x9c>)
 80003b8:	5cd3      	ldrb	r3, [r2, r3]
 80003ba:	440b      	add	r3, r1
 80003bc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	4908      	ldr	r1, [pc, #32]	; (80003e8 <LL_TIM_OC_DisableFast+0xa0>)
 80003c6:	5ccb      	ldrb	r3, [r1, r3]
 80003c8:	4619      	mov	r1, r3
 80003ca:	2304      	movs	r3, #4
 80003cc:	408b      	lsls	r3, r1
 80003ce:	43db      	mvns	r3, r3
 80003d0:	401a      	ands	r2, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	601a      	str	r2, [r3, #0]

}
 80003d6:	bf00      	nop
 80003d8:	3714      	adds	r7, #20
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	080030c4 	.word	0x080030c4
 80003e8:	080030d0 	.word	0x080030d0

080003ec <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d028      	beq.n	800044e <LL_TIM_OC_EnablePreload+0x62>
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d023      	beq.n	800044a <LL_TIM_OC_EnablePreload+0x5e>
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2b10      	cmp	r3, #16
 8000406:	d01e      	beq.n	8000446 <LL_TIM_OC_EnablePreload+0x5a>
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	2b40      	cmp	r3, #64	; 0x40
 800040c:	d019      	beq.n	8000442 <LL_TIM_OC_EnablePreload+0x56>
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000414:	d013      	beq.n	800043e <LL_TIM_OC_EnablePreload+0x52>
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800041c:	d00d      	beq.n	800043a <LL_TIM_OC_EnablePreload+0x4e>
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000424:	d007      	beq.n	8000436 <LL_TIM_OC_EnablePreload+0x4a>
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800042c:	d101      	bne.n	8000432 <LL_TIM_OC_EnablePreload+0x46>
 800042e:	2307      	movs	r3, #7
 8000430:	e00e      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 8000432:	2308      	movs	r3, #8
 8000434:	e00c      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 8000436:	2306      	movs	r3, #6
 8000438:	e00a      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 800043a:	2305      	movs	r3, #5
 800043c:	e008      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 800043e:	2304      	movs	r3, #4
 8000440:	e006      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 8000442:	2303      	movs	r3, #3
 8000444:	e004      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 8000446:	2302      	movs	r3, #2
 8000448:	e002      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 800044a:	2301      	movs	r3, #1
 800044c:	e000      	b.n	8000450 <LL_TIM_OC_EnablePreload+0x64>
 800044e:	2300      	movs	r3, #0
 8000450:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3318      	adds	r3, #24
 8000456:	4619      	mov	r1, r3
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <LL_TIM_OC_EnablePreload+0x98>)
 800045c:	5cd3      	ldrb	r3, [r2, r3]
 800045e:	440b      	add	r3, r1
 8000460:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <LL_TIM_OC_EnablePreload+0x9c>)
 800046a:	5ccb      	ldrb	r3, [r1, r3]
 800046c:	4619      	mov	r1, r3
 800046e:	2308      	movs	r3, #8
 8000470:	408b      	lsls	r3, r1
 8000472:	431a      	orrs	r2, r3
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	601a      	str	r2, [r3, #0]
}
 8000478:	bf00      	nop
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	080030c4 	.word	0x080030c4
 8000488:	080030d0 	.word	0x080030d0

0800048c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	683a      	ldr	r2, [r7, #0]
 80004a4:	431a      	orrs	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	609a      	str	r2, [r3, #8]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	431a      	orrs	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	605a      	str	r2, [r3, #4]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @note   OC5 and OC6 are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	431a      	orrs	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	605a      	str	r2, [r3, #4]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	609a      	str	r2, [r3, #8]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f06f 0201 	mvn.w	r2, #1
 8000550:	611a      	str	r2, [r3, #16]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	f043 0201 	orr.w	r2, r3, #1
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	60da      	str	r2, [r3, #12]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	4907      	ldr	r1, [pc, #28]	; (80005dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005c6:	699a      	ldr	r2, [r3, #24]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fa80 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f958 	bl	80008a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f0:	f000 f876 	bl	80006e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N);
 80005f4:	2155      	movs	r1, #85	; 0x55
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <main+0x3c>)
 80005f8:	f7ff fe95 	bl	8000326 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableAllOutputs(TIM1);
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <main+0x3c>)
 80005fe:	f7ff ff90 	bl	8000522 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x3c>)
 8000604:	f7ff fe6f 	bl	80002e6 <LL_TIM_EnableCounter>

  LL_TIM_ClearFlag_UPDATE(TIM1);
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <main+0x3c>)
 800060a:	f7ff ff9a 	bl	8000542 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x3c>)
 8000610:	f7ff ffa5 	bl	800055e <LL_TIM_EnableIT_UPDATE>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8000614:	f000 f96f 	bl	80008f6 <loop>
 8000618:	e7fc      	b.n	8000614 <main+0x34>
 800061a:	bf00      	nop
 800061c:	40012c00 	.word	0x40012c00

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a6      	sub	sp, #152	; 0x98
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fd34 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2258      	movs	r2, #88	; 0x58
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fd26 	bl	800309c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800066c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fb7e 	bl	8000d80 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800068a:	f000 f92d 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fa7e 	bl	8001bac <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b6:	f000 f917 	bl	80008e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fc56 	bl	8001f78 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006d2:	f000 f909 	bl	80008e8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3798      	adds	r7, #152	; 0x98
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09e      	sub	sp, #120	; 0x78
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80006e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80006f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006fa:	2220      	movs	r2, #32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fccc 	bl	800309c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	2228      	movs	r2, #40	; 0x28
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fcc5 	bl	800309c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000722:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000726:	f7ff ff43 	bl	80005b0 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800072a:	f7ff fd53 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 800072e:	4603      	mov	r3, r0
 8000730:	2200      	movs	r2, #0
 8000732:	2104      	movs	r1, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fda3 	bl	8000280 <NVIC_EncodePriority>
 800073a:	4603      	mov	r3, r0
 800073c:	4619      	mov	r1, r3
 800073e:	2019      	movs	r0, #25
 8000740:	f7ff fd74 	bl	800022c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000744:	2019      	movs	r0, #25
 8000746:	f7ff fd53 	bl	80001f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 6399;
 8000754:	f641 03ff 	movw	r3, #6399	; 0x18ff
 8000758:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000762:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000766:	4619      	mov	r1, r3
 8000768:	484b      	ldr	r0, [pc, #300]	; (8000898 <MX_TIM1_Init+0x1b8>)
 800076a:	f002 f829 	bl	80027c0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800076e:	484a      	ldr	r0, [pc, #296]	; (8000898 <MX_TIM1_Init+0x1b8>)
 8000770:	f7ff fdc9 	bl	8000306 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000774:	2100      	movs	r1, #0
 8000776:	4848      	ldr	r0, [pc, #288]	; (8000898 <MX_TIM1_Init+0x1b8>)
 8000778:	f7ff fe88 	bl	800048c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800077c:	2101      	movs	r1, #1
 800077e:	4846      	ldr	r0, [pc, #280]	; (8000898 <MX_TIM1_Init+0x1b8>)
 8000780:	f7ff fe34 	bl	80003ec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 1600;
 8000790:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000794:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80007a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007aa:	461a      	mov	r2, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	483a      	ldr	r0, [pc, #232]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007b0:	f002 f89e 	bl	80028f0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80007b4:	2101      	movs	r1, #1
 80007b6:	4838      	ldr	r0, [pc, #224]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007b8:	f7ff fdc6 	bl	8000348 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 80007bc:	2110      	movs	r1, #16
 80007be:	4836      	ldr	r0, [pc, #216]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007c0:	f7ff fe14 	bl	80003ec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80007cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007d0:	461a      	mov	r2, r3
 80007d2:	2110      	movs	r1, #16
 80007d4:	4830      	ldr	r0, [pc, #192]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007d6:	f002 f88b 	bl	80028f0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 80007da:	2110      	movs	r1, #16
 80007dc:	482e      	ldr	r0, [pc, #184]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007de:	f7ff fdb3 	bl	8000348 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80007e2:	2100      	movs	r1, #0
 80007e4:	482c      	ldr	r0, [pc, #176]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007e6:	f7ff fe66 	bl	80004b6 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80007ea:	2100      	movs	r1, #0
 80007ec:	482a      	ldr	r0, [pc, #168]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007ee:	f7ff fe75 	bl	80004dc <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80007f2:	4829      	ldr	r0, [pc, #164]	; (8000898 <MX_TIM1_Init+0x1b8>)
 80007f4:	f7ff fe85 	bl	8000502 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0x90;
 8000804:	2390      	movs	r3, #144	; 0x90
 8000806:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 800081c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4819      	ldr	r0, [pc, #100]	; (8000898 <MX_TIM1_Init+0x1b8>)
 8000832:	f002 f8ab 	bl	800298c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000836:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800083a:	f7ff fea1 	bl	8000580 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800083e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000842:	f7ff fe9d 	bl	8000580 <LL_AHB1_GRP1_EnableClock>
  PB13   ------> TIM1_CH1N
  PB14   ------> TIM1_CH2N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000846:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800084a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800084c:	2302      	movs	r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800085c:	2306      	movs	r3, #6
 800085e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_TIM1_Init+0x1bc>)
 8000866:	f001 feaa 	bl	80025be <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800086a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000880:	2306      	movs	r3, #6
 8000882:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 fe97 	bl	80025be <LL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3778      	adds	r7, #120	; 0x78
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40012c00 	.word	0x40012c00
 800089c:	48000400 	.word	0x48000400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <loop>:
	S3	=	2,
	N	=	3,
} ActualState;

void loop(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
/*	HAL_Delay(100);
	q15Uax = FtoQ15(fUax);
	q15Uax2 += FtoQ15(0.1);
*/
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <my_state_1_handler>:

void my_state_1_handler(void) {
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <my_state_machine>:

void my_state_machine(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	switch(ActualState)
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <my_state_machine+0x28>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d007      	beq.n	8000930 <my_state_machine+0x1c>
 8000920:	2b02      	cmp	r3, #2
 8000922:	d007      	beq.n	8000934 <my_state_machine+0x20>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d000      	beq.n	800092a <my_state_machine+0x16>
	case S2:
		break;
	case S3:
		break;
	default:
		break;
 8000928:	e005      	b.n	8000936 <my_state_machine+0x22>
		my_state_1_handler();
 800092a:	f7ff ffeb 	bl	8000904 <my_state_1_handler>
		break;
 800092e:	e002      	b.n	8000936 <my_state_machine+0x22>
		break;
 8000930:	bf00      	nop
 8000932:	e000      	b.n	8000936 <my_state_machine+0x22>
		break;
 8000934:	bf00      	nop
	}
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000002a 	.word	0x2000002a

08000940 <my_tim_isr>:
/*
 * ISR
 * T=100us
 */
void my_tim_isr(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	my_state_machine();
 8000944:	f7ff ffe6 	bl	8000914 <my_state_machine>
	TIM1->CCR1 = UtoCCR1(q15Uax);
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <my_tim_isr+0x50>)
 800094a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094e:	0fda      	lsrs	r2, r3, #31
 8000950:	4413      	add	r3, r2
 8000952:	105b      	asrs	r3, r3, #1
 8000954:	b21b      	sxth	r3, r3
 8000956:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800095a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800095e:	fb02 f303 	mul.w	r3, r2, r3
 8000962:	13db      	asrs	r3, r3, #15
 8000964:	b21a      	sxth	r2, r3
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <my_tim_isr+0x54>)
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = UtoCCR2(q15Uax);
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <my_tim_isr+0x50>)
 800096c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000970:	425b      	negs	r3, r3
 8000972:	0fda      	lsrs	r2, r3, #31
 8000974:	4413      	add	r3, r2
 8000976:	105b      	asrs	r3, r3, #1
 8000978:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800097c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000980:	fb02 f303 	mul.w	r3, r2, r3
 8000984:	13db      	asrs	r3, r3, #15
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <my_tim_isr+0x54>)
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000002c 	.word	0x2000002c
 8000994:	40012c00 	.word	0x40012c00

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <LL_TIM_ClearFlag_UPDATE>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f06f 0201 	mvn.w	r2, #1
 80009ee:	611a      	str	r2, [r3, #16]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f890 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000a5e:	f7ff ffbf 	bl	80009e0 <LL_TIM_ClearFlag_UPDATE>
  my_tim_isr();
 8000a62:	f7ff ff6d 	bl	8000940 <my_tim_isr>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40012c00 	.word	0x40012c00

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 fac7 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff fd8b 	bl	80005e0 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000acc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	08003114 	.word	0x08003114
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	20000038 	.word	0x20000038

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f90d 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff ff48 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f917 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f8ed 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000034 	.word	0x20000034

08000b9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000034 	.word	0x20000034

08000bb4 <__NVIC_SetPriorityGrouping>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_SetPriority>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff47 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5c 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb0 	bl	8000cd4 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f000 bf01 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8160 	beq.w	800106a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000daa:	4bae      	ldr	r3, [pc, #696]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d00c      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db6:	4bab      	ldr	r3, [pc, #684]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d159      	bne.n	8000e76 <HAL_RCC_OscConfig+0xf6>
 8000dc2:	4ba8      	ldr	r3, [pc, #672]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dce:	d152      	bne.n	8000e76 <HAL_RCC_OscConfig+0xf6>
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000de4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d102      	bne.n	8000e02 <HAL_RCC_OscConfig+0x82>
 8000dfc:	4b99      	ldr	r3, [pc, #612]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0xae>
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e0e:	fa93 f3a3 	rbit	r3, r3
 8000e12:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e1e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e2a:	4b8e      	ldr	r3, [pc, #568]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e32:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e36:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e3a:	fa92 f2a2 	rbit	r2, r2
 8000e3e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e42:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	f002 021f 	and.w	r2, r2, #31
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8102 	beq.w	8001068 <HAL_RCC_OscConfig+0x2e8>
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f040 80fc 	bne.w	8001068 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f000 be93 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e80:	d106      	bne.n	8000e90 <HAL_RCC_OscConfig+0x110>
 8000e82:	4b78      	ldr	r3, [pc, #480]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a77      	ldr	r2, [pc, #476]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e030      	b.n	8000ef2 <HAL_RCC_OscConfig+0x172>
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x134>
 8000e9a:	4b72      	ldr	r3, [pc, #456]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a71      	ldr	r2, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b6f      	ldr	r3, [pc, #444]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a6e      	ldr	r2, [pc, #440]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e01e      	b.n	8000ef2 <HAL_RCC_OscConfig+0x172>
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0x15a>
 8000ec0:	4b68      	ldr	r3, [pc, #416]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a67      	ldr	r2, [pc, #412]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b65      	ldr	r3, [pc, #404]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a64      	ldr	r2, [pc, #400]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e00b      	b.n	8000ef2 <HAL_RCC_OscConfig+0x172>
 8000eda:	4b62      	ldr	r3, [pc, #392]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a61      	ldr	r2, [pc, #388]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b5f      	ldr	r3, [pc, #380]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a5e      	ldr	r2, [pc, #376]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d059      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fe4e 	bl	8000b9c <HAL_GetTick>
 8000f00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f06:	f7ff fe49 	bl	8000b9c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d902      	bls.n	8000f1c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	f000 be40 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8000f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f20:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x1ce>
 8000f48:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e015      	b.n	8000f7a <HAL_RCC_OscConfig+0x1fa>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f6a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f82:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0ab      	beq.n	8000f06 <HAL_RCC_OscConfig+0x186>
 8000fae:	e05c      	b.n	800106a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fdf4 	bl	8000b9c <HAL_GetTick>
 8000fb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fba:	f7ff fdef 	bl	8000b9c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d902      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f000 bde6 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8000fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000fe4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d102      	bne.n	8001002 <HAL_RCC_OscConfig+0x282>
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x2ae>
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800101e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_RCC_OscConfig+0x2e4>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001032:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001036:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800103a:	fa92 f2a2 	rbit	r2, r2
 800103e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001042:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001046:	fab2 f282 	clz	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	f042 0220 	orr.w	r2, r2, #32
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f002 021f 	and.w	r2, r2, #31
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1ab      	bne.n	8000fba <HAL_RCC_OscConfig+0x23a>
 8001062:	e002      	b.n	800106a <HAL_RCC_OscConfig+0x2ea>
 8001064:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 8170 	beq.w	800135a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800107a:	4bd0      	ldr	r3, [pc, #832]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001086:	4bcd      	ldr	r3, [pc, #820]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b08      	cmp	r3, #8
 8001090:	d16d      	bne.n	800116e <HAL_RCC_OscConfig+0x3ee>
 8001092:	4bca      	ldr	r3, [pc, #808]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800109a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800109e:	d166      	bne.n	800116e <HAL_RCC_OscConfig+0x3ee>
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	095b      	lsrs	r3, r3, #5
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d102      	bne.n	80010d0 <HAL_RCC_OscConfig+0x350>
 80010ca:	4bbc      	ldr	r3, [pc, #752]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	e013      	b.n	80010f8 <HAL_RCC_OscConfig+0x378>
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010f4:	4bb1      	ldr	r3, [pc, #708]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2202      	movs	r2, #2
 80010fa:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010fe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800110a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f002 021f 	and.w	r2, r2, #31
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_RCC_OscConfig+0x3ba>
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d002      	beq.n	800113a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	f000 bd31 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	4ba0      	ldr	r3, [pc, #640]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	21f8      	movs	r1, #248	; 0xf8
 800114a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001152:	fa91 f1a1 	rbit	r1, r1
 8001156:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800115a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800115e:	fab1 f181 	clz	r1, r1
 8001162:	b2c9      	uxtb	r1, r1
 8001164:	408b      	lsls	r3, r1
 8001166:	4995      	ldr	r1, [pc, #596]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116c:	e0f5      	b.n	800135a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8085 	beq.w	8001284 <HAL_RCC_OscConfig+0x504>
 800117a:	2301      	movs	r3, #1
 800117c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800118c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800119a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	2301      	movs	r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fcf9 	bl	8000b9c <HAL_GetTick>
 80011aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fcf4 	bl	8000b9c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d902      	bls.n	80011c6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f000 bceb 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80011d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x476>
 80011f0:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	e013      	b.n	800121e <HAL_RCC_OscConfig+0x49e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800120e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800121a:	4b68      	ldr	r3, [pc, #416]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2202      	movs	r2, #2
 8001220:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001224:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001228:	fa92 f2a2 	rbit	r2, r2
 800122c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001230:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0af      	beq.n	80011b0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	21f8      	movs	r1, #248	; 0xf8
 8001260:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001268:	fa91 f1a1 	rbit	r1, r1
 800126c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001270:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001274:	fab1 f181 	clz	r1, r1
 8001278:	b2c9      	uxtb	r1, r1
 800127a:	408b      	lsls	r3, r1
 800127c:	494f      	ldr	r1, [pc, #316]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
 8001282:	e06a      	b.n	800135a <HAL_RCC_OscConfig+0x5da>
 8001284:	2301      	movs	r3, #1
 8001286:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001296:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	461a      	mov	r2, r3
 80012ac:	2300      	movs	r3, #0
 80012ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc74 	bl	8000b9c <HAL_GetTick>
 80012b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fc6f 	bl	8000b9c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d902      	bls.n	80012d0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	f000 bc66 	b.w	8001b9c <HAL_RCC_OscConfig+0xe1c>
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	095b      	lsrs	r3, r3, #5
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <HAL_RCC_OscConfig+0x580>
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	e013      	b.n	8001328 <HAL_RCC_OscConfig+0x5a8>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001318:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_RCC_OscConfig+0x63c>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	2202      	movs	r2, #2
 800132a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800132e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001332:	fa92 f2a2 	rbit	r2, r2
 8001336:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800133a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800133e:	fab2 f282 	clz	r2, r2
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	f042 0220 	orr.w	r2, r2, #32
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	f002 021f 	and.w	r2, r2, #31
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1af      	bne.n	80012ba <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80da 	beq.w	800151e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d069      	beq.n	8001448 <HAL_RCC_OscConfig+0x6c8>
 8001374:	2301      	movs	r3, #1
 8001376:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001386:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x640>)
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	461a      	mov	r2, r3
 800139a:	2301      	movs	r3, #1
 800139c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbfd 	bl	8000b9c <HAL_GetTick>
 80013a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e00d      	b.n	80013c4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fbf8 	bl	8000b9c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d905      	bls.n	80013c4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e3ef      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 80013bc:	40021000 	.word	0x40021000
 80013c0:	10908120 	.word	0x10908120
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013ce:	fa93 f2a3 	rbit	r2, r3
 80013d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013dc:	2202      	movs	r2, #2
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013f4:	2202      	movs	r2, #2
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001406:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001408:	4ba4      	ldr	r3, [pc, #656]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800140a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001410:	2102      	movs	r1, #2
 8001412:	6019      	str	r1, [r3, #0]
 8001414:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f1a3 	rbit	r1, r3
 800141e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001422:	6019      	str	r1, [r3, #0]
  return result;
 8001424:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0b0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x628>
 8001446:	e06a      	b.n	800151e <HAL_RCC_OscConfig+0x79e>
 8001448:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	fa93 f2a3 	rbit	r2, r3
 800145a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800145e:	601a      	str	r2, [r3, #0]
  return result;
 8001460:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001464:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x920>)
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	461a      	mov	r2, r3
 8001476:	2300      	movs	r3, #0
 8001478:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fb8f 	bl	8000b9c <HAL_GetTick>
 800147e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001482:	e009      	b.n	8001498 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fb8a 	bl	8000b9c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e381      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001498:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b4:	2202      	movs	r2, #2
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80014de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b6e      	ldr	r3, [pc, #440]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80014e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014e8:	2102      	movs	r1, #2
 80014ea:	6019      	str	r1, [r3, #0]
 80014ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fa93 f1a3 	rbit	r1, r3
 80014f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014fa:	6019      	str	r1, [r3, #0]
  return result;
 80014fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1b2      	bne.n	8001484 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8157 	beq.w	80017dc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	4a55      	ldr	r2, [pc, #340]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	61d3      	str	r3, [r2, #28]
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d11a      	bne.n	80015a8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb0d 	bl	8000b9c <HAL_GetTick>
 8001582:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	e009      	b.n	800159c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff fb08 	bl	8000b9c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2ff      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x924>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ef      	beq.n	8001588 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x840>
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a39      	ldr	r2, [pc, #228]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	e02f      	b.n	8001620 <HAL_RCC_OscConfig+0x8a0>
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x864>
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a33      	ldr	r2, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0x8a0>
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x888>
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a2a      	ldr	r2, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x8a0>
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a20      	ldr	r2, [pc, #128]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 800161a:	f023 0304 	bic.w	r3, r3, #4
 800161e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d06a      	beq.n	8001700 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fab7 	bl	8000b9c <HAL_GetTick>
 800162e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fab2 	bl	8000b9c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e2a7      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 800164c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	fa93 f2a3 	rbit	r2, r3
 800165e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001668:	2202      	movs	r2, #2
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f2a3 	rbit	r2, r3
 8001676:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800167a:	601a      	str	r2, [r3, #0]
  return result;
 800167c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001680:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x928>
 8001696:	4b01      	ldr	r3, [pc, #4]	; (800169c <HAL_RCC_OscConfig+0x91c>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	e013      	b.n	80016c4 <HAL_RCC_OscConfig+0x944>
 800169c:	40021000 	.word	0x40021000
 80016a0:	10908120 	.word	0x10908120
 80016a4:	40007000 	.word	0x40007000
 80016a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ac:	2202      	movs	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	4bc0      	ldr	r3, [pc, #768]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016c8:	2102      	movs	r1, #2
 80016ca:	6011      	str	r1, [r2, #0]
 80016cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	fa92 f1a2 	rbit	r1, r2
 80016d6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016da:	6011      	str	r1, [r2, #0]
  return result;
 80016dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	fab2 f282 	clz	r2, r2
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f002 021f 	and.w	r2, r2, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d09a      	beq.n	8001634 <HAL_RCC_OscConfig+0x8b4>
 80016fe:	e063      	b.n	80017c8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa4c 	bl	8000b9c <HAL_GetTick>
 8001704:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fa47 	bl	8000b9c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e23c      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001726:	2202      	movs	r2, #2
 8001728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fa93 f2a3 	rbit	r2, r3
 8001734:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001750:	601a      	str	r2, [r3, #0]
  return result;
 8001752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001756:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d102      	bne.n	8001772 <HAL_RCC_OscConfig+0x9f2>
 800176c:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	e00d      	b.n	800178e <HAL_RCC_OscConfig+0xa0e>
 8001772:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f2a3 	rbit	r2, r3
 8001784:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	4b8e      	ldr	r3, [pc, #568]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001792:	2102      	movs	r1, #2
 8001794:	6011      	str	r1, [r2, #0]
 8001796:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	fa92 f1a2 	rbit	r1, r2
 80017a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017a4:	6011      	str	r1, [r2, #0]
  return result;
 80017a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1a0      	bne.n	800170a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017c8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a7b      	ldr	r2, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 81d9 	beq.w	8001b9a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e8:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	f000 81a6 	beq.w	8001b42 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 811e 	bne.w	8001a3e <HAL_RCC_OscConfig+0xcbe>
 8001802:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800181a:	601a      	str	r2, [r3, #0]
  return result;
 800181c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001820:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800182c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	461a      	mov	r2, r3
 8001834:	2300      	movs	r3, #0
 8001836:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f9b0 	bl	8000b9c <HAL_GetTick>
 800183c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f9ab 	bl	8000b9c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1a2      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001856:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800185a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f2a3 	rbit	r2, r3
 800186a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800186e:	601a      	str	r2, [r3, #0]
  return result;
 8001870:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001874:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_RCC_OscConfig+0xb10>
 800188a:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	e01b      	b.n	80018c8 <HAL_RCC_OscConfig+0xb48>
 8001890:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018d0:	6011      	str	r1, [r2, #0]
 80018d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fa92 f1a2 	rbit	r1, r2
 80018dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018e0:	6011      	str	r1, [r2, #0]
  return result;
 80018e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	fab2 f282 	clz	r2, r2
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f042 0220 	orr.w	r2, r2, #32
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f002 021f 	and.w	r2, r2, #31
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d19e      	bne.n	8001842 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f023 020f 	bic.w	r2, r3, #15
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	492c      	ldr	r1, [pc, #176]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 8001914:	4313      	orrs	r3, r2
 8001916:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a19      	ldr	r1, [r3, #32]
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	430b      	orrs	r3, r1
 800192e:	4925      	ldr	r1, [pc, #148]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194c:	601a      	str	r2, [r3, #0]
  return result;
 800194e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001952:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800195e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	461a      	mov	r2, r3
 8001966:	2301      	movs	r3, #1
 8001968:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff f917 	bl	8000b9c <HAL_GetTick>
 800196e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001972:	e009      	b.n	8001988 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f912 	bl	8000b9c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e109      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a0:	601a      	str	r2, [r3, #0]
  return result;
 80019a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0xc48>
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <HAL_RCC_OscConfig+0xc44>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	e01e      	b.n	8001a00 <HAL_RCC_OscConfig+0xc80>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a08:	6011      	str	r1, [r2, #0]
 8001a0a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fa92 f1a2 	rbit	r1, r2
 8001a14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a18:	6011      	str	r1, [r2, #0]
  return result;
 8001a1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d09b      	beq.n	8001974 <HAL_RCC_OscConfig+0xbf4>
 8001a3c:	e0ad      	b.n	8001b9a <HAL_RCC_OscConfig+0xe1a>
 8001a3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f892 	bl	8000b9c <HAL_GetTick>
 8001a78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f88d 	bl	8000b9c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e084      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_RCC_OscConfig+0xd4c>
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e01b      	b.n	8001b04 <HAL_RCC_OscConfig+0xd84>
 8001acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f107 0214 	add.w	r2, r7, #20
 8001b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	f107 0214 	add.w	r2, r7, #20
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fa92 f1a2 	rbit	r1, r2
 8001b18:	f107 0210 	add.w	r2, r7, #16
 8001b1c:	6011      	str	r1, [r2, #0]
  return result;
 8001b1e:	f107 0210 	add.w	r2, r7, #16
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d19e      	bne.n	8001a7e <HAL_RCC_OscConfig+0xcfe>
 8001b40:	e02b      	b.n	8001b9a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e025      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_OscConfig+0xe28>)
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b64:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d111      	bne.n	8001b96 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d108      	bne.n	8001b96 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b09e      	sub	sp, #120	; 0x78
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e162      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b90      	ldr	r3, [pc, #576]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	498b      	ldr	r1, [pc, #556]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e14a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	497f      	ldr	r1, [pc, #508]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80dc 	beq.w	8001dd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d13c      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xf6>
 8001c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xa6>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	e00f      	b.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
 8001c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
 8001c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c76:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c7a:	fa92 f2a2 	rbit	r2, r2
 8001c7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c82:	fab2 f282 	clz	r2, r2
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f042 0220 	orr.w	r2, r2, #32
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f002 021f 	and.w	r2, r2, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d17b      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0f3      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d13c      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x178>
 8001caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x128>
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
 8001cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d13a      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0b2      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
 8001d24:	2302      	movs	r3, #2
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x1a0>
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e00d      	b.n	8001d68 <HAL_RCC_ClockConfig+0x1bc>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2202      	movs	r2, #2
 8001d6a:	61ba      	str	r2, [r7, #24]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	fa92 f2a2 	rbit	r2, r2
 8001d72:	617a      	str	r2, [r7, #20]
  return result;
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e079      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	491a      	ldr	r1, [pc, #104]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7fe fef8 	bl	8000b9c <HAL_GetTick>
 8001dac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe fef4 	bl	8000b9c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e061      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d214      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4906      	ldr	r1, [pc, #24]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_RCC_ClockConfig+0x25c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e040      	b.n	8001e8a <HAL_RCC_ClockConfig+0x2de>
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	491a      	ldr	r1, [pc, #104]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4912      	ldr	r1, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e4e:	f000 f829 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e52:	4601      	mov	r1, r0
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCC_ClockConfig+0x2e8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e5c:	22f0      	movs	r2, #240	; 0xf0
 8001e5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	60fa      	str	r2, [r7, #12]
  return result;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	fab2 f282 	clz	r2, r2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	40d3      	lsrs	r3, r2
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x2ec>)
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	fa21 f303 	lsr.w	r3, r1, r3
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_RCC_ClockConfig+0x2f0>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_RCC_ClockConfig+0x2f4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fe46 	bl	8000b14 <HAL_InitTick>
  
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3778      	adds	r7, #120	; 0x78
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080030dc 	.word	0x080030dc
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x36>
 8001ed2:	e03f      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ed6:	623b      	str	r3, [r7, #32]
      break;
 8001ed8:	e03f      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ee0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ee4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	fa92 f2a2 	rbit	r2, r2
 8001eec:	607a      	str	r2, [r7, #4]
  return result;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	40d3      	lsrs	r3, r2
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	220f      	movs	r2, #15
 8001f08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	60fa      	str	r2, [r7, #12]
  return result;
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	40d3      	lsrs	r3, r2
 8001f1c:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e007      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	623b      	str	r3, [r7, #32]
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f56:	623b      	str	r3, [r7, #32]
      break;
 8001f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	372c      	adds	r7, #44	; 0x2c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	080030ec 	.word	0x080030ec
 8001f74:	080030fc 	.word	0x080030fc

08001f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b092      	sub	sp, #72	; 0x48
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80d4 	beq.w	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10e      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b4b      	ldr	r3, [pc, #300]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	61d3      	str	r3, [r2, #28]
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	4b45      	ldr	r3, [pc, #276]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d118      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd2:	4b42      	ldr	r3, [pc, #264]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a41      	ldr	r2, [pc, #260]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fdc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fde:	f7fe fddd 	bl	8000b9c <HAL_GetTick>
 8001fe2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7fe fdd9 	bl	8000b9c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	; 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1d6      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002004:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8084 	beq.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002020:	429a      	cmp	r2, r3
 8002022:	d07c      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002024:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	461a      	mov	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	461a      	mov	r2, r3
 8002072:	2300      	movs	r3, #0
 8002074:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d04b      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe fd89 	bl	8000b9c <HAL_GetTick>
 800208a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fd85 	bl	8000b9c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e180      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80020a4:	2302      	movs	r3, #2
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	61fb      	str	r3, [r7, #28]
  return result;
 80020bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d108      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80020d2:	4b01      	ldr	r3, [pc, #4]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	e00d      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40007000 	.word	0x40007000
 80020e0:	10908100 	.word	0x10908100
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	4ba0      	ldr	r3, [pc, #640]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2202      	movs	r2, #2
 80020f6:	613a      	str	r2, [r7, #16]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0b7      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800211e:	4b95      	ldr	r3, [pc, #596]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4992      	ldr	r1, [pc, #584]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800212c:	4313      	orrs	r3, r2
 800212e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b8e      	ldr	r3, [pc, #568]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	4a8d      	ldr	r2, [pc, #564]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002142:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002150:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	f023 0203 	bic.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4985      	ldr	r1, [pc, #532]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800216e:	4b81      	ldr	r3, [pc, #516]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	497e      	ldr	r1, [pc, #504]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800218c:	4b79      	ldr	r3, [pc, #484]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4976      	ldr	r1, [pc, #472]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021aa:	4b72      	ldr	r3, [pc, #456]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f023 0210 	bic.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	496f      	ldr	r1, [pc, #444]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	4967      	ldr	r1, [pc, #412]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f023 0220 	bic.w	r2, r3, #32
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4960      	ldr	r1, [pc, #384]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002204:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	4958      	ldr	r1, [pc, #352]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002222:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4951      	ldr	r1, [pc, #324]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4949      	ldr	r1, [pc, #292]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4942      	ldr	r1, [pc, #264]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800227c:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	493a      	ldr	r1, [pc, #232]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800229a:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	4933      	ldr	r1, [pc, #204]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	492b      	ldr	r1, [pc, #172]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4924      	ldr	r1, [pc, #144]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	491c      	ldr	r1, [pc, #112]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	4915      	ldr	r1, [pc, #84]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	490d      	ldr	r1, [pc, #52]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235a:	4906      	ldr	r1, [pc, #24]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800236c:	4b01      	ldr	r3, [pc, #4]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	e002      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	490b      	ldr	r1, [pc, #44]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002382:	4313      	orrs	r3, r2
 8002384:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3748      	adds	r7, #72	; 0x48
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000

080023b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	613b      	str	r3, [r7, #16]
  return result;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2103      	movs	r1, #3
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	61bb      	str	r3, [r7, #24]
  return result;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	601a      	str	r2, [r3, #0]
}
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002442:	b480      	push	{r7}
 8002444:	b089      	sub	sp, #36	; 0x24
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	613b      	str	r3, [r7, #16]
  return result;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2103      	movs	r1, #3
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	401a      	ands	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	61bb      	str	r3, [r7, #24]
  return result;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	431a      	orrs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	613b      	str	r3, [r7, #16]
  return result;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2103      	movs	r1, #3
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	61bb      	str	r3, [r7, #24]
  return result;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	60da      	str	r2, [r3, #12]
}
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80024fe:	b480      	push	{r7}
 8002500:	b089      	sub	sp, #36	; 0x24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	613b      	str	r3, [r7, #16]
  return result;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	210f      	movs	r1, #15
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	61bb      	str	r3, [r7, #24]
  return result;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	431a      	orrs	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002550:	bf00      	nop
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	613b      	str	r3, [r7, #16]
  return result;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	210f      	movs	r1, #15
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	401a      	ands	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	61bb      	str	r3, [r7, #24]
  return result;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80025b2:	bf00      	nop
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b088      	sub	sp, #32
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa93 f3a3 	rbit	r3, r3
 80025d4:	613b      	str	r3, [r7, #16]
  return result;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80025e0:	e051      	b.n	8002686 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d043      	beq.n	8002680 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d003      	beq.n	8002608 <LL_GPIO_Init+0x4a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d10e      	bne.n	8002626 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	461a      	mov	r2, r3
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff16 	bl	8002442 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fef6 	bl	8002412 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	461a      	mov	r2, r3
 800262c:	69b9      	ldr	r1, [r7, #24]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff36 	bl	80024a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11a      	bne.n	8002672 <LL_GPIO_Init+0xb4>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	60bb      	str	r3, [r7, #8]
  return result;
 8002648:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b07      	cmp	r3, #7
 8002652:	d807      	bhi.n	8002664 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	461a      	mov	r2, r3
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff4e 	bl	80024fe <LL_GPIO_SetAFPin_0_7>
 8002662:	e006      	b.n	8002672 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	461a      	mov	r2, r3
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff75 	bl	800255c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	69b9      	ldr	r1, [r7, #24]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fe9a 	bl	80023b4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1a6      	bne.n	80025e2 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <LL_TIM_SetPrescaler>:
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_TIM_SetAutoReload>:
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_TIM_SetRepetitionCounter>:
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_TIM_OC_SetCompareCH1>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_TIM_OC_SetCompareCH2>:
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_TIM_OC_SetCompareCH3>:
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_TIM_OC_SetCompareCH4>:
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_TIM_OC_SetCompareCH5>:
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_TIM_OC_SetCompareCH6>:
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	615a      	str	r2, [r3, #20]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <LL_TIM_Init+0x110>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <LL_TIM_Init+0x40>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d00f      	beq.n	8002800 <LL_TIM_Init+0x40>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <LL_TIM_Init+0x114>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00b      	beq.n	8002800 <LL_TIM_Init+0x40>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <LL_TIM_Init+0x118>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <LL_TIM_Init+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <LL_TIM_Init+0x11c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <LL_TIM_Init+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <LL_TIM_Init+0x120>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d106      	bne.n	800280e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <LL_TIM_Init+0x110>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <LL_TIM_Init+0x96>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d01b      	beq.n	8002856 <LL_TIM_Init+0x96>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <LL_TIM_Init+0x114>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d017      	beq.n	8002856 <LL_TIM_Init+0x96>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <LL_TIM_Init+0x118>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <LL_TIM_Init+0x96>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <LL_TIM_Init+0x11c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00f      	beq.n	8002856 <LL_TIM_Init+0x96>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <LL_TIM_Init+0x124>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00b      	beq.n	8002856 <LL_TIM_Init+0x96>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <LL_TIM_Init+0x128>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <LL_TIM_Init+0x96>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <LL_TIM_Init+0x12c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <LL_TIM_Init+0x96>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <LL_TIM_Init+0x120>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d106      	bne.n	8002864 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff22 	bl	80026ba <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff0e 	bl	800269e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <LL_TIM_Init+0x110>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <LL_TIM_Init+0xf2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <LL_TIM_Init+0x11c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <LL_TIM_Init+0xf2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <LL_TIM_Init+0x124>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <LL_TIM_Init+0xf2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <LL_TIM_Init+0x128>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <LL_TIM_Init+0xf2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <LL_TIM_Init+0x12c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <LL_TIM_Init+0xf2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <LL_TIM_Init+0x120>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d105      	bne.n	80028be <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff0c 	bl	80026d6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff6d 	bl	800279e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	40013400 	.word	0x40013400
 80028e0:	40015000 	.word	0x40015000
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800

080028f0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002906:	d01f      	beq.n	8002948 <LL_TIM_OC_Init+0x58>
 8002908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290c:	d804      	bhi.n	8002918 <LL_TIM_OC_Init+0x28>
 800290e:	2b01      	cmp	r3, #1
 8002910:	d00c      	beq.n	800292c <LL_TIM_OC_Init+0x3c>
 8002912:	2b10      	cmp	r3, #16
 8002914:	d011      	beq.n	800293a <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002916:	e033      	b.n	8002980 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d022      	beq.n	8002964 <LL_TIM_OC_Init+0x74>
 800291e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002922:	d026      	beq.n	8002972 <LL_TIM_OC_Init+0x82>
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d015      	beq.n	8002956 <LL_TIM_OC_Init+0x66>
      break;
 800292a:	e029      	b.n	8002980 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f8b0 	bl	8002a94 <OC1Config>
 8002934:	4603      	mov	r3, r0
 8002936:	75fb      	strb	r3, [r7, #23]
      break;
 8002938:	e022      	b.n	8002980 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f92f 	bl	8002ba0 <OC2Config>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	e01b      	b.n	8002980 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f9b2 	bl	8002cb4 <OC3Config>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]
      break;
 8002954:	e014      	b.n	8002980 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa35 	bl	8002dc8 <OC4Config>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]
      break;
 8002962:	e00d      	b.n	8002980 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 faa0 	bl	8002eac <OC5Config>
 800296c:	4603      	mov	r3, r0
 800296e:	75fb      	strb	r3, [r7, #23]
      break;
 8002970:	e006      	b.n	8002980 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fb03 	bl	8002f80 <OC6Config>
 800297a:	4603      	mov	r3, r0
 800297c:	75fb      	strb	r3, [r7, #23]
      break;
 800297e:	bf00      	nop
  }

  return result;
 8002980:	7dfb      	ldrb	r3, [r7, #23]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	7b12      	ldrb	r2, [r2, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	89d2      	ldrh	r2, [r2, #14]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <LL_TIM_BDTR_Init+0xfc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <LL_TIM_BDTR_Init+0x96>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <LL_TIM_BDTR_Init+0x100>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <LL_TIM_BDTR_Init+0x96>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <LL_TIM_BDTR_Init+0x104>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d106      	bne.n	8002a30 <LL_TIM_BDTR_Init+0xa4>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <LL_TIM_BDTR_Init+0xfc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d007      	beq.n	8002a48 <LL_TIM_BDTR_Init+0xbc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <LL_TIM_BDTR_Init+0x100>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <LL_TIM_BDTR_Init+0xbc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <LL_TIM_BDTR_Init+0x104>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d114      	bne.n	8002a72 <LL_TIM_BDTR_Init+0xe6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40013400 	.word	0x40013400
 8002a90:	40015000 	.word	0x40015000

08002a94 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f023 0201 	bic.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 0202 	bic.w	r2, r3, #2
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <OC1Config+0xf4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <OC1Config+0x8e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <OC1Config+0xf8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00f      	beq.n	8002b22 <OC1Config+0x8e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <OC1Config+0xfc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <OC1Config+0x8e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <OC1Config+0x100>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <OC1Config+0x8e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <OC1Config+0x104>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <OC1Config+0x8e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <OC1Config+0x108>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d11e      	bne.n	8002b60 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 0208 	bic.w	r2, r3, #8
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f023 0204 	bic.w	r2, r3, #4
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fdbd 	bl	80026f2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40013400 	.word	0x40013400
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40014400 	.word	0x40014400
 8002b98:	40014800 	.word	0x40014800
 8002b9c:	40015000 	.word	0x40015000

08002ba0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0210 	bic.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	0212      	lsls	r2, r2, #8
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0220 	bic.w	r2, r3, #32
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0210 	bic.w	r2, r3, #16
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <OC2Config+0xfc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <OC2Config+0x94>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <OC2Config+0x100>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00f      	beq.n	8002c34 <OC2Config+0x94>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <OC2Config+0x104>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <OC2Config+0x94>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <OC2Config+0x108>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <OC2Config+0x94>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a21      	ldr	r2, [pc, #132]	; (8002cac <OC2Config+0x10c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <OC2Config+0x94>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <OC2Config+0x110>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d11f      	bne.n	8002c74 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	019b      	lsls	r3, r3, #6
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fd41 	bl	800270e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40013400 	.word	0x40013400
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40014400 	.word	0x40014400
 8002cac:	40014800 	.word	0x40014800
 8002cb0:	40015000 	.word	0x40015000

08002cb4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <OC3Config+0xfc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <OC3Config+0x92>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <OC3Config+0x100>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00f      	beq.n	8002d46 <OC3Config+0x92>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <OC3Config+0x104>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <OC3Config+0x92>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <OC3Config+0x108>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <OC3Config+0x92>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <OC3Config+0x10c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <OC3Config+0x92>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a20      	ldr	r2, [pc, #128]	; (8002dc4 <OC3Config+0x110>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d11f      	bne.n	8002d86 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	029b      	lsls	r3, r3, #10
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	015b      	lsls	r3, r3, #5
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fcc6 	bl	800272a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40013400 	.word	0x40013400
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800
 8002dc4:	40015000 	.word	0x40015000

08002dc8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	0212      	lsls	r2, r2, #8
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	031b      	lsls	r3, r3, #12
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	031b      	lsls	r3, r3, #12
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <OC4Config+0xcc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <OC4Config+0x94>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <OC4Config+0xd0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00f      	beq.n	8002e5c <OC4Config+0x94>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <OC4Config+0xd4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <OC4Config+0x94>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <OC4Config+0xd8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <OC4Config+0x94>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <OC4Config+0xdc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <OC4Config+0x94>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <OC4Config+0xe0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d107      	bne.n	8002e6c <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	019b      	lsls	r3, r3, #6
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fc61 	bl	8002746 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40013400 	.word	0x40013400
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800
 8002ea8:	40015000 	.word	0x40015000

08002eac <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <OC5Config+0xbc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <OC5Config+0x84>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <OC5Config+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00f      	beq.n	8002f30 <OC5Config+0x84>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <OC5Config+0xc4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <OC5Config+0x84>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <OC5Config+0xc8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <OC5Config+0x84>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <OC5Config+0xcc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <OC5Config+0x84>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <OC5Config+0xd0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d109      	bne.n	8002f44 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fc06 	bl	8002762 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40013400 	.word	0x40013400
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800
 8002f7c:	40015000 	.word	0x40015000

08002f80 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	0212      	lsls	r2, r2, #8
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	051b      	lsls	r3, r3, #20
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	051b      	lsls	r3, r3, #20
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a18      	ldr	r2, [pc, #96]	; (800303c <OC6Config+0xbc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <OC6Config+0x86>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a17      	ldr	r2, [pc, #92]	; (8003040 <OC6Config+0xc0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00f      	beq.n	8003006 <OC6Config+0x86>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <OC6Config+0xc4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00b      	beq.n	8003006 <OC6Config+0x86>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <OC6Config+0xc8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <OC6Config+0x86>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <OC6Config+0xcc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d003      	beq.n	8003006 <OC6Config+0x86>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <OC6Config+0xd0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d109      	bne.n	800301a <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fbab 	bl	8002782 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40012c00 	.word	0x40012c00
 8003040:	40013400 	.word	0x40013400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40015000 	.word	0x40015000

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4e0d      	ldr	r6, [pc, #52]	; (800308c <__libc_init_array+0x38>)
 8003058:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305a:	1ba4      	subs	r4, r4, r6
 800305c:	10a4      	asrs	r4, r4, #2
 800305e:	2500      	movs	r5, #0
 8003060:	42a5      	cmp	r5, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	4e0b      	ldr	r6, [pc, #44]	; (8003094 <__libc_init_array+0x40>)
 8003066:	4c0c      	ldr	r4, [pc, #48]	; (8003098 <__libc_init_array+0x44>)
 8003068:	f000 f820 	bl	80030ac <_init>
 800306c:	1ba4      	subs	r4, r4, r6
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	2500      	movs	r5, #0
 8003072:	42a5      	cmp	r5, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800307c:	4798      	blx	r3
 800307e:	3501      	adds	r5, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003086:	4798      	blx	r3
 8003088:	3501      	adds	r5, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	0800310c 	.word	0x0800310c
 8003090:	0800310c 	.word	0x0800310c
 8003094:	0800310c 	.word	0x0800310c
 8003098:	08003110 	.word	0x08003110

0800309c <memset>:
 800309c:	4402      	add	r2, r0
 800309e:	4603      	mov	r3, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <_init>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	bf00      	nop
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr

080030b8 <_fini>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	bf00      	nop
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr
