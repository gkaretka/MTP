
MTP_LAB_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003004  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d0  080031d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080031d0  080031d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d0  080031d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000010  080031e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080031e8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016f3  00000000  00000000  00028619  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  0002a520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232af  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007206  00000000  00000000  0004df17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6893  00000000  00000000  0005511d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b9b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002084  00000000  00000000  0012ba2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003180 	.word	0x08003180

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003180 	.word	0x08003180

080001d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__NVIC_GetPriorityGrouping+0x18>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	0a1b      	lsrs	r3, r3, #8
 80001de:	f003 0307 	and.w	r3, r3, #7
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db0b      	blt.n	800021a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 021f 	and.w	r2, r3, #31
 8000208:	4907      	ldr	r1, [pc, #28]	; (8000228 <__NVIC_EnableIRQ+0x38>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	095b      	lsrs	r3, r3, #5
 8000210:	2001      	movs	r0, #1
 8000212:	fa00 f202 	lsl.w	r2, r0, r2
 8000216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000e100 	.word	0xe000e100

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	; (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	; (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	; 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	431a      	orrs	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	609a      	str	r2, [r3, #8]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3330      	adds	r3, #48	; 0x30
 800031c:	4619      	mov	r1, r3
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000324:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000328:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800032a:	69ba      	ldr	r2, [r7, #24]
 800032c:	fa92 f2a2 	rbit	r2, r2
 8000330:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	40d3      	lsrs	r3, r2
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	440b      	add	r3, r1
 8000340:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	f003 031f 	and.w	r3, r3, #31
 800034c:	211f      	movs	r1, #31
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43db      	mvns	r3, r3
 8000354:	401a      	ands	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	0e9b      	lsrs	r3, r3, #26
 800035a:	f003 011f 	and.w	r1, r3, #31
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	f003 031f 	and.w	r3, r3, #31
 8000364:	fa01 f303 	lsl.w	r3, r1, r3
 8000368:	431a      	orrs	r2, r3
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800036e:	bf00      	nop
 8000370:	3724      	adds	r7, #36	; 0x24
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800037a:	b480      	push	{r7}
 800037c:	b08d      	sub	sp, #52	; 0x34
 800037e:	af00      	add	r7, sp, #0
 8000380:	60f8      	str	r0, [r7, #12]
 8000382:	60b9      	str	r1, [r7, #8]
 8000384:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3314      	adds	r3, #20
 800038a:	4619      	mov	r1, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000398:	69ba      	ldr	r2, [r7, #24]
 800039a:	fa92 f2a2 	rbit	r2, r2
 800039e:	617a      	str	r2, [r7, #20]
  return result;
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	fab2 f282 	clz	r2, r2
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	40d3      	lsrs	r3, r2
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	440b      	add	r3, r1
 80003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80003b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80003ba:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80003be:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003c0:	6a39      	ldr	r1, [r7, #32]
 80003c2:	fa91 f1a1 	rbit	r1, r1
 80003c6:	61f9      	str	r1, [r7, #28]
  return result;
 80003c8:	69f9      	ldr	r1, [r7, #28]
 80003ca:	fab1 f181 	clz	r1, r1
 80003ce:	b2c9      	uxtb	r1, r1
 80003d0:	40cb      	lsrs	r3, r1
 80003d2:	2107      	movs	r1, #7
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80003e2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80003e6:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80003ea:	fa91 f1a1 	rbit	r1, r1
 80003ee:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80003f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80003f2:	fab1 f181 	clz	r1, r1
 80003f6:	b2c9      	uxtb	r1, r1
 80003f8:	40cb      	lsrs	r3, r1
 80003fa:	6879      	ldr	r1, [r7, #4]
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	431a      	orrs	r2, r3
 8000402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000404:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000406:	bf00      	nop
 8000408:	3734      	adds	r7, #52	; 0x34
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
	...

08000414 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000426:	68b9      	ldr	r1, [r7, #8]
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <LL_ADC_SetChannelSingleDiff+0x44>)
 800042a:	400b      	ands	r3, r1
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f003 0318 	and.w	r3, r3, #24
 8000436:	4908      	ldr	r1, [pc, #32]	; (8000458 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000438:	40d9      	lsrs	r1, r3
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	4019      	ands	r1, r3
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000440:	400b      	ands	r3, r1
 8000442:	431a      	orrs	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	0007fffe 	.word	0x0007fffe

0800045c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800046c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000470:	f043 0201 	orr.w	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000496:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80004a0:	4313      	orrs	r3, r2
 80004a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80004c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ca:	bf0c      	ite	eq
 80004cc:	2301      	moveq	r3, #1
 80004ce:	2300      	movne	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80004ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004f2:	f043 0204 	orr.w	r2, r3, #4
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f023 0204 	bic.w	r2, r3, #4
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f023 0208 	bic.w	r2, r3, #8
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	605a      	str	r2, [r3, #4]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <LL_DAC_EnableDMAReq>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableDMAReq(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	f003 0310 	and.w	r3, r3, #16
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	fa01 f303 	lsl.w	r3, r1, r3
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	601a      	str	r2, [r3, #0]
          DAC_CR_DMAEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	f003 0310 	and.w	r3, r3, #16
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	2104      	movs	r1, #4
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	431a      	orrs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f043 0201 	orr.w	r2, r3, #1
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800061e:	f023 0307 	bic.w	r3, r3, #7
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	431a      	orrs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	609a      	str	r2, [r3, #8]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	431a      	orrs	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	605a      	str	r2, [r3, #4]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	609a      	str	r2, [r3, #8]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f06f 0201 	mvn.w	r2, #1
 800068a:	611a      	str	r2, [r3, #16]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	f043 0201 	orr.w	r2, r3, #1
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4013      	ands	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006f2:	69da      	ldr	r2, [r3, #28]
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006fe:	69da      	ldr	r2, [r3, #28]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4013      	ands	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000

08000718 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800072c:	43db      	mvns	r3, r3
 800072e:	401a      	ands	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000736:	4904      	ldr	r1, [pc, #16]	; (8000748 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 8000738:	4313      	orrs	r3, r2
 800073a:	600b      	str	r3, [r1, #0]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40010000 	.word	0x40010000

0800074c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3b01      	subs	r3, #1
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <LL_DMA_EnableChannel+0x3c>)
 800075c:	5cd3      	ldrb	r3, [r2, r3]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	3a01      	subs	r2, #1
 800076a:	4907      	ldr	r1, [pc, #28]	; (8000788 <LL_DMA_EnableChannel+0x3c>)
 800076c:	5c8a      	ldrb	r2, [r1, r2]
 800076e:	4611      	mov	r1, r2
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	440a      	add	r2, r1
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	08003198 	.word	0x08003198

0800078c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	3b01      	subs	r3, #1
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <LL_DMA_SetDataTransferDirection+0x48>)
 800079e:	5cd3      	ldrb	r3, [r2, r3]
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007ac:	f023 0310 	bic.w	r3, r3, #16
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	3a01      	subs	r2, #1
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <LL_DMA_SetDataTransferDirection+0x48>)
 80007b6:	5c8a      	ldrb	r2, [r1, r2]
 80007b8:	4611      	mov	r1, r2
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	440a      	add	r2, r1
 80007be:	4611      	mov	r1, r2
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	08003198 	.word	0x08003198

080007d8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <LL_DMA_SetMode+0x44>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	461a      	mov	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f023 0220 	bic.w	r2, r3, #32
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4907      	ldr	r1, [pc, #28]	; (800081c <LL_DMA_SetMode+0x44>)
 80007fe:	5ccb      	ldrb	r3, [r1, r3]
 8000800:	4619      	mov	r1, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	440b      	add	r3, r1
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	08003198 	.word	0x08003198

08000820 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	3b01      	subs	r3, #1
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <LL_DMA_SetPeriphIncMode+0x44>)
 8000832:	5cd3      	ldrb	r3, [r2, r3]
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3b01      	subs	r3, #1
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <LL_DMA_SetPeriphIncMode+0x44>)
 8000846:	5ccb      	ldrb	r3, [r1, r3]
 8000848:	4619      	mov	r1, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	440b      	add	r3, r1
 800084e:	4619      	mov	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08003198 	.word	0x08003198

08000868 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3b01      	subs	r3, #1
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <LL_DMA_SetMemoryIncMode+0x44>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	461a      	mov	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3b01      	subs	r3, #1
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <LL_DMA_SetMemoryIncMode+0x44>)
 800088e:	5ccb      	ldrb	r3, [r1, r3]
 8000890:	4619      	mov	r1, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	440b      	add	r3, r1
 8000896:	4619      	mov	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4313      	orrs	r3, r2
 800089c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	08003198 	.word	0x08003198

080008b0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3b01      	subs	r3, #1
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <LL_DMA_SetPeriphSize+0x44>)
 80008c2:	5cd3      	ldrb	r3, [r2, r3]
 80008c4:	461a      	mov	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <LL_DMA_SetPeriphSize+0x44>)
 80008d6:	5ccb      	ldrb	r3, [r1, r3]
 80008d8:	4619      	mov	r1, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	440b      	add	r3, r1
 80008de:	4619      	mov	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	08003198 	.word	0x08003198

080008f8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3b01      	subs	r3, #1
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <LL_DMA_SetMemorySize+0x44>)
 800090a:	5cd3      	ldrb	r3, [r2, r3]
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	3b01      	subs	r3, #1
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <LL_DMA_SetMemorySize+0x44>)
 800091e:	5ccb      	ldrb	r3, [r1, r3]
 8000920:	4619      	mov	r1, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	440b      	add	r3, r1
 8000926:	4619      	mov	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	08003198 	.word	0x08003198

08000940 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3b01      	subs	r3, #1
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	461a      	mov	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4413      	add	r3, r2
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3b01      	subs	r3, #1
 8000964:	4907      	ldr	r1, [pc, #28]	; (8000984 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000966:	5ccb      	ldrb	r3, [r1, r3]
 8000968:	4619      	mov	r1, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	440b      	add	r3, r1
 800096e:	4619      	mov	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4313      	orrs	r3, r2
 8000974:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	08003198 	.word	0x08003198

08000988 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <LL_DMA_SetDataLength+0x44>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	461a      	mov	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4413      	add	r3, r2
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	0c1b      	lsrs	r3, r3, #16
 80009a6:	041b      	lsls	r3, r3, #16
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	3a01      	subs	r2, #1
 80009ac:	4907      	ldr	r1, [pc, #28]	; (80009cc <LL_DMA_SetDataLength+0x44>)
 80009ae:	5c8a      	ldrb	r2, [r1, r2]
 80009b0:	4611      	mov	r1, r2
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	440a      	add	r2, r1
 80009b6:	4611      	mov	r1, r2
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	08003198 	.word	0x08003198

080009d0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	3b01      	subs	r3, #1
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <LL_DMA_SetMemoryAddress+0x2c>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	08003198 	.word	0x08003198

08000a00 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <LL_DMA_SetPeriphAddress+0x2c>)
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6093      	str	r3, [r2, #8]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	08003198 	.word	0x08003198

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f000 fb66 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f000 f86a 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f000 fa84 	bl	8000f48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a40:	f000 fa4c 	bl	8000edc <MX_DMA_Init>
  MX_ADC1_Init();
 8000a44:	f000 f8c8 	bl	8000bd8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000a48:	f000 f99a 	bl	8000d80 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000a4c:	f000 fa04 	bl	8000e58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&adcData);
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <main+0xc4>)
 8000a52:	461a      	mov	r2, r3
 8000a54:	2101      	movs	r1, #1
 8000a56:	4828      	ldr	r0, [pc, #160]	; (8000af8 <main+0xc8>)
 8000a58:	f7ff ffba 	bl	80009d0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 2);
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0xc8>)
 8000a62:	f7ff ff91 	bl	8000988 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ADC1->DR);
 8000a66:	4a25      	ldr	r2, [pc, #148]	; (8000afc <main+0xcc>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <main+0xc8>)
 8000a6c:	f7ff ffc8 	bl	8000a00 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000a70:	2101      	movs	r1, #1
 8000a72:	4821      	ldr	r0, [pc, #132]	; (8000af8 <main+0xc8>)
 8000a74:	f7ff fe6a 	bl	800074c <LL_DMA_EnableChannel>

  LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8000a78:	217f      	movs	r1, #127	; 0x7f
 8000a7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a7e:	f7ff fd01 	bl	8000484 <LL_ADC_StartCalibration>
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8000a82:	bf00      	nop
 8000a84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a88:	f7ff fd15 	bl	80004b6 <LL_ADC_IsCalibrationOnGoing>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f8      	bne.n	8000a84 <main+0x54>

  LL_ADC_Enable(ADC1);
 8000a92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a96:	f7ff fce1 	bl	800045c <LL_ADC_Enable>
  LL_ADC_REG_StartConversion(ADC1);
 8000a9a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000a9e:	f7ff fd1e 	bl	80004de <LL_ADC_REG_StartConversion>

  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)DACdata);
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <main+0xd0>)
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <main+0xc8>)
 8000aaa:	f7ff ff91 	bl	80009d0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 2);
 8000aae:	2202      	movs	r2, #2
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <main+0xc8>)
 8000ab4:	f7ff ff68 	bl	8000988 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&DAC1->DHR12R1);
 8000ab8:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <main+0xd4>)
 8000aba:	2103      	movs	r1, #3
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <main+0xc8>)
 8000abe:	f7ff ff9f 	bl	8000a00 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <main+0xc8>)
 8000ac6:	f7ff fe41 	bl	800074c <LL_DMA_EnableChannel>

  LL_DAC_EnableDMAReq(DAC1, LL_DAC_CHANNEL_1);
 8000aca:	490f      	ldr	r1, [pc, #60]	; (8000b08 <main+0xd8>)
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <main+0xdc>)
 8000ace:	f7ff fd3a 	bl	8000546 <LL_DAC_EnableDMAReq>
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <main+0xd8>)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <main+0xdc>)
 8000ad6:	f7ff fd4d 	bl	8000574 <LL_DAC_Enable>

  LL_TIM_ClearFlag_UPDATE(TIM2);
 8000ada:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ade:	f7ff fdcd 	bl	800067c <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8000ae2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ae6:	f7ff fdd7 	bl	8000698 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8000aea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aee:	f7ff fd6d 	bl	80005cc <LL_TIM_EnableCounter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <main+0xc2>
 8000af4:	20000034 	.word	0x20000034
 8000af8:	40020000 	.word	0x40020000
 8000afc:	50000040 	.word	0x50000040
 8000b00:	20000000 	.word	0x20000000
 8000b04:	40007408 	.word	0x40007408
 8000b08:	02100001 	.word	0x02100001
 8000b0c:	40007400 	.word	0x40007400

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0a6      	sub	sp, #152	; 0x98
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b1a:	2228      	movs	r2, #40	; 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fb26 	bl	8003170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2258      	movs	r2, #88	; 0x58
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fb18 	bl	8003170 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b44:	2301      	movs	r3, #1
 8000b46:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b5c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000b60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fc14 	bl	800139c <HAL_RCC_OscConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 fa09 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	230f      	movs	r3, #15
 8000b80:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b82:	2302      	movs	r3, #2
 8000b84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fb14 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ba6:	f000 f9f3 	bl	8000f90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <SystemClock_Config+0xc4>)
 8000bac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fcea 	bl	8002594 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000bc6:	f000 f9e3 	bl	8000f90 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3798      	adds	r7, #152	; 0x98
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	00100080 	.word	0x00100080

08000bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000bde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000c1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c1e:	f7ff fd4b 	bl	80006b8 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000c22:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c26:	f7ff fd47 	bl	80006b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c2e:	f7ff fd43 	bl	80006b8 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PC0   ------> ADC1_IN6
  PA0   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000c32:	2301      	movs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	484a      	ldr	r0, [pc, #296]	; (8000d6c <MX_ADC1_Init+0x194>)
 8000c44:	f002 f92d 	bl	8002ea2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f002 f921 	bl	8002ea2 <LL_GPIO_Init>

  /* ADC1 DMA Init */
  
  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4842      	ldr	r0, [pc, #264]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000c66:	f7ff fd91 	bl	800078c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4840      	ldr	r0, [pc, #256]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000c70:	f7ff fe66 	bl	8000940 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000c74:	2220      	movs	r2, #32
 8000c76:	2101      	movs	r1, #1
 8000c78:	483d      	ldr	r0, [pc, #244]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000c7a:	f7ff fdad 	bl	80007d8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2101      	movs	r1, #1
 8000c82:	483b      	ldr	r0, [pc, #236]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000c84:	f7ff fdcc 	bl	8000820 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4838      	ldr	r0, [pc, #224]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000c8e:	f7ff fdeb 	bl	8000868 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	2101      	movs	r1, #1
 8000c98:	4835      	ldr	r0, [pc, #212]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000c9a:	f7ff fe09 	bl	80008b0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4832      	ldr	r0, [pc, #200]	; (8000d70 <MX_ADC1_Init+0x198>)
 8000ca6:	f7ff fe27 	bl	80008f8 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000caa:	2300      	movs	r3, #0
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000cb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cc0:	f001 ff0a 	bl	8002ad8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cea:	f001 ff1b 	bl	8002b24 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8000cee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cf2:	f7ff fc08 	bl	8000506 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000cf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000cfa:	f7ff fc14 	bl	8000526 <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4819      	ldr	r0, [pc, #100]	; (8000d74 <MX_ADC1_Init+0x19c>)
 8000d0e:	f001 fe85 	bl	8002a1c <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000d12:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <MX_ADC1_Init+0x1a0>)
 8000d14:	2106      	movs	r1, #6
 8000d16:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d1a:	f7ff faf7 	bl	800030c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_61CYCLES_5);
 8000d1e:	2205      	movs	r2, #5
 8000d20:	4915      	ldr	r1, [pc, #84]	; (8000d78 <MX_ADC1_Init+0x1a0>)
 8000d22:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d26:	f7ff fb28 	bl	800037a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000d2a:	227f      	movs	r2, #127	; 0x7f
 8000d2c:	4912      	ldr	r1, [pc, #72]	; (8000d78 <MX_ADC1_Init+0x1a0>)
 8000d2e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d32:	f7ff fb6f 	bl	8000414 <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_VREFINT);
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <MX_ADC1_Init+0x1a4>)
 8000d38:	210c      	movs	r1, #12
 8000d3a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d3e:	f7ff fae5 	bl	800030c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_181CYCLES_5);
 8000d42:	2206      	movs	r2, #6
 8000d44:	490d      	ldr	r1, [pc, #52]	; (8000d7c <MX_ADC1_Init+0x1a4>)
 8000d46:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d4a:	f7ff fb16 	bl	800037a <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 8000d4e:	227f      	movs	r2, #127	; 0x7f
 8000d50:	490a      	ldr	r1, [pc, #40]	; (8000d7c <MX_ADC1_Init+0x1a4>)
 8000d52:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d56:	f7ff fb5d 	bl	8000414 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8000d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_ADC1_Init+0x19c>)
 8000d60:	f7ff fac1 	bl	80002e6 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3750      	adds	r7, #80	; 0x50
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	50000300 	.word	0x50000300
 8000d78:	04300002 	.word	0x04300002
 8000d7c:	cb840000 	.word	0xcb840000

08000d80 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8000da4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000da8:	f7ff fc9e 	bl	80006e8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000dac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000db0:	f7ff fc82 	bl	80006b8 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000db4:	2310      	movs	r3, #16
 8000db6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000db8:	2303      	movs	r3, #3
 8000dba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f002 f86b 	bl	8002ea2 <LL_GPIO_Init>

  /* DAC1 DMA Init */
  
  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000dcc:	2210      	movs	r2, #16
 8000dce:	2103      	movs	r1, #3
 8000dd0:	481d      	ldr	r0, [pc, #116]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000dd2:	f7ff fcdb 	bl	800078c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2103      	movs	r1, #3
 8000dda:	481b      	ldr	r0, [pc, #108]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000ddc:	f7ff fdb0 	bl	8000940 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 8000de0:	2220      	movs	r2, #32
 8000de2:	2103      	movs	r1, #3
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000de6:	f7ff fcf7 	bl	80007d8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2103      	movs	r1, #3
 8000dee:	4816      	ldr	r0, [pc, #88]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000df0:	f7ff fd16 	bl	8000820 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_NOINCREMENT);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2103      	movs	r1, #3
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000dfa:	f7ff fd35 	bl	8000868 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	2103      	movs	r1, #3
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000e06:	f7ff fd53 	bl	80008b0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2103      	movs	r1, #3
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_DAC1_Init+0xc8>)
 8000e12:	f7ff fd71 	bl	80008f8 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_DAC1_Init+0xcc>)
 8000e18:	f7ff fc7e 	bl	8000718 <LL_SYSCFG_SetRemapDMA_DAC>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM2_TRGO;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <MX_DAC1_Init+0xd0>)
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <MX_DAC1_Init+0xd4>)
 8000e32:	f001 fee0 	bl	8002bf6 <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8000e36:	4906      	ldr	r1, [pc, #24]	; (8000e50 <MX_DAC1_Init+0xd0>)
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_DAC1_Init+0xd4>)
 8000e3a:	f7ff fbb1 	bl	80005a0 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	00202000 	.word	0x00202000
 8000e50:	02100001 	.word	0x02100001
 8000e54:	40007400 	.word	0x40007400

08000e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff fc3b 	bl	80006e8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e72:	f7ff f9af 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f9ff 	bl	8000280 <NVIC_EncodePriority>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4619      	mov	r1, r3
 8000e86:	201c      	movs	r0, #28
 8000e88:	f7ff f9d0 	bl	800022c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f7ff f9af 	bl	80001f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 63;
 8000e9a:	233f      	movs	r3, #63	; 0x3f
 8000e9c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eaa:	f002 f8a5 	bl	8002ff8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eb2:	f7ff fb9b 	bl	80005ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ebc:	f7ff fba6 	bl	800060c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ec6:	f7ff fbb6 	bl	8000636 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000eca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ece:	f7ff fbc5 	bl	800065c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_DMA_Init+0x68>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <MX_DMA_Init+0x68>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_DMA_Init+0x68>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000efa:	f7ff f96b 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f9bb 	bl	8000280 <NVIC_EncodePriority>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	200b      	movs	r0, #11
 8000f10:	f7ff f98c 	bl	800022c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f14:	200b      	movs	r0, #11
 8000f16:	f7ff f96b 	bl	80001f0 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f1a:	f7ff f95b 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff f9ab 	bl	8000280 <NVIC_EncodePriority>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	200d      	movs	r0, #13
 8000f30:	f7ff f97c 	bl	800022c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f34:	200d      	movs	r0, #13
 8000f36:	f7ff f95b 	bl	80001f0 <__NVIC_EnableIRQ>

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_GPIO_Init+0x44>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <MX_GPIO_Init+0x44>)
 8000f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_GPIO_Init+0x44>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_GPIO_Init+0x44>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <MX_GPIO_Init+0x44>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_GPIO_Init+0x44>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x44>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <LL_TIM_ClearFlag_UPDATE>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f06f 0201 	mvn.w	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f89a 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  LL_TIM_ClearFlag_UPDATE(TIM2);
 8001080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001084:	f7ff ffb0 	bl	8000fe8 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0b      	ldr	r4, [pc, #44]	; (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010da:	f7ff ffd7 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f002 f823 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff fca5 	bl	8000a30 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010f4:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 80010f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010fc:	2000003c 	.word	0x2000003c

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>
	...

08001104 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x28>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f90d 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff ff3e 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40022000 	.word	0x40022000

08001130 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f917 	bl	8001382 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 f8ed 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000004 	.word	0x20000004
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000038 	.word	0x20000038

080011b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000038 	.word	0x20000038

080011d0 <__NVIC_SetPriorityGrouping>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_SetPriority>:
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff47 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff5c 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffb0 	bl	80012f0 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f000 bf01 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8160 	beq.w	8001686 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013c6:	4bae      	ldr	r3, [pc, #696]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d00c      	beq.n	80013ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d2:	4bab      	ldr	r3, [pc, #684]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d159      	bne.n	8001492 <HAL_RCC_OscConfig+0xf6>
 80013de:	4ba8      	ldr	r3, [pc, #672]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d152      	bne.n	8001492 <HAL_RCC_OscConfig+0xf6>
 80013ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001400:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d102      	bne.n	800141e <HAL_RCC_OscConfig+0x82>
 8001418:	4b99      	ldr	r3, [pc, #612]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0xae>
 800141e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001422:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001436:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800143a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001446:	4b8e      	ldr	r3, [pc, #568]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800144e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001452:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001456:	fa92 f2a2 	rbit	r2, r2
 800145a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800145e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001462:	fab2 f282 	clz	r2, r2
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f042 0220 	orr.w	r2, r2, #32
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	f002 021f 	and.w	r2, r2, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8102 	beq.w	8001684 <HAL_RCC_OscConfig+0x2e8>
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 80fc 	bne.w	8001684 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	f000 be93 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x110>
 800149e:	4b78      	ldr	r3, [pc, #480]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a77      	ldr	r2, [pc, #476]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e030      	b.n	800150e <HAL_RCC_OscConfig+0x172>
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x134>
 80014b6:	4b72      	ldr	r3, [pc, #456]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a71      	ldr	r2, [pc, #452]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01e      	b.n	800150e <HAL_RCC_OscConfig+0x172>
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x15a>
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a67      	ldr	r2, [pc, #412]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a64      	ldr	r2, [pc, #400]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x172>
 80014f6:	4b62      	ldr	r3, [pc, #392]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a61      	ldr	r2, [pc, #388]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 80014fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a5e      	ldr	r2, [pc, #376]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 8001508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d059      	beq.n	80015cc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fe4e 	bl	80011b8 <HAL_GetTick>
 800151c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fe49 	bl	80011b8 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d902      	bls.n	8001538 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	f000 be40 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>
 8001538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800154c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d102      	bne.n	800156a <HAL_RCC_OscConfig+0x1ce>
 8001564:	4b46      	ldr	r3, [pc, #280]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x1fa>
 800156a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800157e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001582:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001586:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800159e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015a2:	fa92 f2a2 	rbit	r2, r2
 80015a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015ae:	fab2 f282 	clz	r2, r2
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	f002 021f 	and.w	r2, r2, #31
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0ab      	beq.n	8001522 <HAL_RCC_OscConfig+0x186>
 80015ca:	e05c      	b.n	8001686 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fdf4 	bl	80011b8 <HAL_GetTick>
 80015d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d6:	f7ff fdef 	bl	80011b8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d902      	bls.n	80015ec <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f000 bde6 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>
 80015ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001600:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x282>
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x2ae>
 800161e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001622:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001636:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800163a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_RCC_OscConfig+0x2e4>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800164e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001652:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001656:	fa92 f2a2 	rbit	r2, r2
 800165a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800165e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001662:	fab2 f282 	clz	r2, r2
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f002 021f 	and.w	r2, r2, #31
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ab      	bne.n	80015d6 <HAL_RCC_OscConfig+0x23a>
 800167e:	e002      	b.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001680:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8170 	beq.w	8001976 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001696:	4bd0      	ldr	r3, [pc, #832]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00c      	beq.n	80016bc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016a2:	4bcd      	ldr	r3, [pc, #820]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d16d      	bne.n	800178a <HAL_RCC_OscConfig+0x3ee>
 80016ae:	4bca      	ldr	r3, [pc, #808]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ba:	d166      	bne.n	800178a <HAL_RCC_OscConfig+0x3ee>
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0x350>
 80016e6:	4bbc      	ldr	r3, [pc, #752]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	e013      	b.n	8001714 <HAL_RCC_OscConfig+0x378>
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001704:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001710:	4bb1      	ldr	r3, [pc, #708]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	2202      	movs	r2, #2
 8001716:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800171a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800171e:	fa92 f2a2 	rbit	r2, r2
 8001722:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001726:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	f002 021f 	and.w	r2, r2, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_RCC_OscConfig+0x3ba>
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d002      	beq.n	8001756 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	f000 bd31 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4ba0      	ldr	r3, [pc, #640]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	21f8      	movs	r1, #248	; 0xf8
 8001766:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800176e:	fa91 f1a1 	rbit	r1, r1
 8001772:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001776:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800177a:	fab1 f181 	clz	r1, r1
 800177e:	b2c9      	uxtb	r1, r1
 8001780:	408b      	lsls	r3, r1
 8001782:	4995      	ldr	r1, [pc, #596]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001788:	e0f5      	b.n	8001976 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8085 	beq.w	80018a0 <HAL_RCC_OscConfig+0x504>
 8001796:	2301      	movs	r3, #1
 8001798:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80017a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	461a      	mov	r2, r3
 80017be:	2301      	movs	r3, #1
 80017c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fcf9 	bl	80011b8 <HAL_GetTick>
 80017c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fcf4 	bl	80011b8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d902      	bls.n	80017e2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	f000 bceb 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80017f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	fab3 f383 	clz	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d102      	bne.n	8001812 <HAL_RCC_OscConfig+0x476>
 800180c:	4b72      	ldr	r3, [pc, #456]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e013      	b.n	800183a <HAL_RCC_OscConfig+0x49e>
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001824:	2302      	movs	r3, #2
 8001826:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800182a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2202      	movs	r2, #2
 800183c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001840:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001844:	fa92 f2a2 	rbit	r2, r2
 8001848:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800184c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0af      	beq.n	80017cc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	21f8      	movs	r1, #248	; 0xf8
 800187c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001884:	fa91 f1a1 	rbit	r1, r1
 8001888:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800188c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001890:	fab1 f181 	clz	r1, r1
 8001894:	b2c9      	uxtb	r1, r1
 8001896:	408b      	lsls	r3, r1
 8001898:	494f      	ldr	r1, [pc, #316]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
 800189e:	e06a      	b.n	8001976 <HAL_RCC_OscConfig+0x5da>
 80018a0:	2301      	movs	r3, #1
 80018a2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80018b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	461a      	mov	r2, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fc74 	bl	80011b8 <HAL_GetTick>
 80018d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc6f 	bl	80011b8 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d902      	bls.n	80018ec <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f000 bc66 	b.w	80021b8 <HAL_RCC_OscConfig+0xe1c>
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80018fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0x580>
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e013      	b.n	8001944 <HAL_RCC_OscConfig+0x5a8>
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001934:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x63c>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2202      	movs	r2, #2
 8001946:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800194a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800194e:	fa92 f2a2 	rbit	r2, r2
 8001952:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001956:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1af      	bne.n	80018d6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80da 	beq.w	8001b3a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d069      	beq.n	8001a64 <HAL_RCC_OscConfig+0x6c8>
 8001990:	2301      	movs	r3, #1
 8001992:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80019a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x640>)
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	461a      	mov	r2, r3
 80019b6:	2301      	movs	r3, #1
 80019b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fbfd 	bl	80011b8 <HAL_GetTick>
 80019be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e00d      	b.n	80019e0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fbf8 	bl	80011b8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d905      	bls.n	80019e0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e3ef      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	10908120 	.word	0x10908120
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019f8:	2202      	movs	r2, #2
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a24:	4ba4      	ldr	r3, [pc, #656]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	6019      	str	r1, [r3, #0]
 8001a30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f1a3 	rbit	r1, r3
 8001a3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a3e:	6019      	str	r1, [r3, #0]
  return result;
 8001a40:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0b0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x628>
 8001a62:	e06a      	b.n	8001b3a <HAL_RCC_OscConfig+0x79e>
 8001a64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a7a:	601a      	str	r2, [r3, #0]
  return result;
 8001a7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <HAL_RCC_OscConfig+0x920>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	461a      	mov	r2, r3
 8001a92:	2300      	movs	r3, #0
 8001a94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fb8f 	bl	80011b8 <HAL_GetTick>
 8001a9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fb8a 	bl	80011b8 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e381      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 8001ab4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ab8:	2202      	movs	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ae8:	2202      	movs	r2, #2
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001afa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b04:	2102      	movs	r1, #2
 8001b06:	6019      	str	r1, [r3, #0]
 8001b08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f1a3 	rbit	r1, r3
 8001b12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b16:	6019      	str	r1, [r3, #0]
  return result;
 8001b18:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1b2      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8157 	beq.w	8001df8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d112      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	4b56      	ldr	r3, [pc, #344]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a55      	ldr	r2, [pc, #340]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	61d3      	str	r3, [r2, #28]
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_OscConfig+0x924>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d11a      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x924>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a4b      	ldr	r2, [pc, #300]	; (8001cc0 <HAL_RCC_OscConfig+0x924>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fb0d 	bl	80011b8 <HAL_GetTick>
 8001b9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba2:	e009      	b.n	8001bb8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba4:	f7ff fb08 	bl	80011b8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	; 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e2ff      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x924>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ef      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x840>
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	e02f      	b.n	8001c3c <HAL_RCC_OscConfig+0x8a0>
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x864>
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a30      	ldr	r2, [pc, #192]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	e01d      	b.n	8001c3c <HAL_RCC_OscConfig+0x8a0>
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x888>
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0x8a0>
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001c36:	f023 0304 	bic.w	r3, r3, #4
 8001c3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d06a      	beq.n	8001d1c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fab7 	bl	80011b8 <HAL_GetTick>
 8001c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff fab2 	bl	80011b8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e2a7      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 8001c68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c84:	2202      	movs	r2, #2
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d108      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x928>
 8001cb2:	4b01      	ldr	r3, [pc, #4]	; (8001cb8 <HAL_RCC_OscConfig+0x91c>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	e013      	b.n	8001ce0 <HAL_RCC_OscConfig+0x944>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	10908120 	.word	0x10908120
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cc8:	2202      	movs	r2, #2
 8001cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	4bc0      	ldr	r3, [pc, #768]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	6011      	str	r1, [r2, #0]
 8001ce8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	fa92 f1a2 	rbit	r1, r2
 8001cf2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cf6:	6011      	str	r1, [r2, #0]
  return result;
 8001cf8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d09a      	beq.n	8001c50 <HAL_RCC_OscConfig+0x8b4>
 8001d1a:	e063      	b.n	8001de4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fa4c 	bl	80011b8 <HAL_GetTick>
 8001d20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	e00b      	b.n	8001d3e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fa47 	bl	80011b8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e23c      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 8001d3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d42:	2202      	movs	r2, #2
 8001d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	fa93 f2a3 	rbit	r2, r3
 8001d50:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d6c:	601a      	str	r2, [r3, #0]
  return result;
 8001d6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d102      	bne.n	8001d8e <HAL_RCC_OscConfig+0x9f2>
 8001d88:	4b95      	ldr	r3, [pc, #596]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	e00d      	b.n	8001daa <HAL_RCC_OscConfig+0xa0e>
 8001d8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d92:	2202      	movs	r2, #2
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001dae:	2102      	movs	r1, #2
 8001db0:	6011      	str	r1, [r2, #0]
 8001db2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fa92 f1a2 	rbit	r1, r2
 8001dbc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dc0:	6011      	str	r1, [r2, #0]
  return result;
 8001dc2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1a0      	bne.n	8001d26 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001de4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	4a7b      	ldr	r2, [pc, #492]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 81d9 	beq.w	80021b6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	f000 81a6 	beq.w	800215e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f040 811e 	bne.w	800205a <HAL_RCC_OscConfig+0xcbe>
 8001e1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e36:	601a      	str	r2, [r3, #0]
  return result;
 8001e38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e3c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff f9b0 	bl	80011b8 <HAL_GetTick>
 8001e58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7ff f9ab 	bl	80011b8 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1a2      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 8001e72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e8a:	601a      	str	r2, [r3, #0]
  return result;
 8001e8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0xb10>
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e01b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xb48>
 8001eac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ee8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eec:	6011      	str	r1, [r2, #0]
 8001eee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fa92 f1a2 	rbit	r1, r2
 8001ef8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001efc:	6011      	str	r1, [r2, #0]
  return result;
 8001efe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fab2 f282 	clz	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f042 0220 	orr.w	r2, r2, #32
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f002 021f 	and.w	r2, r2, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d19e      	bne.n	8001e5e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f023 020f 	bic.w	r2, r3, #15
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a19      	ldr	r1, [r3, #32]
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f68:	601a      	str	r2, [r3, #0]
  return result;
 8001f6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff f917 	bl	80011b8 <HAL_GetTick>
 8001f8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff f912 	bl	80011b8 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e109      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 8001fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fbc:	601a      	str	r2, [r3, #0]
  return result;
 8001fbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xc48>
 8001fd8:	4b01      	ldr	r3, [pc, #4]	; (8001fe0 <HAL_RCC_OscConfig+0xc44>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	e01e      	b.n	800201c <HAL_RCC_OscConfig+0xc80>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0xe28>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002024:	6011      	str	r1, [r2, #0]
 8002026:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	fa92 f1a2 	rbit	r1, r2
 8002030:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002034:	6011      	str	r1, [r2, #0]
  return result;
 8002036:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f002 021f 	and.w	r2, r2, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f202 	lsl.w	r2, r1, r2
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d09b      	beq.n	8001f90 <HAL_RCC_OscConfig+0xbf4>
 8002058:	e0ad      	b.n	80021b6 <HAL_RCC_OscConfig+0xe1a>
 800205a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800205e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002072:	601a      	str	r2, [r3, #0]
  return result;
 8002074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002078:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002084:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff f892 	bl	80011b8 <HAL_GetTick>
 8002094:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	e009      	b.n	80020ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff f88d 	bl	80011b8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e084      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
 80020ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c6:	601a      	str	r2, [r3, #0]
  return result;
 80020c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_OscConfig+0xd4c>
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_OscConfig+0xe28>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e01b      	b.n	8002120 <HAL_RCC_OscConfig+0xd84>
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCC_OscConfig+0xe28>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	f107 0214 	add.w	r2, r7, #20
 8002124:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	f107 0214 	add.w	r2, r7, #20
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fa92 f1a2 	rbit	r1, r2
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	6011      	str	r1, [r2, #0]
  return result;
 800213a:	f107 0210 	add.w	r2, r7, #16
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f002 021f 	and.w	r2, r2, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f202 	lsl.w	r2, r1, r2
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d19e      	bne.n	800209a <HAL_RCC_OscConfig+0xcfe>
 800215c:	e02b      	b.n	80021b6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e025      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0xe28>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_RCC_OscConfig+0xe28>)
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800217c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002180:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	429a      	cmp	r2, r3
 800218c:	d111      	bne.n	80021b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800218e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800219c:	429a      	cmp	r2, r3
 800219e:	d108      	bne.n	80021b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80021a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021a4:	f003 020f 	and.w	r2, r3, #15
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b09e      	sub	sp, #120	; 0x78
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e162      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b90      	ldr	r3, [pc, #576]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b8d      	ldr	r3, [pc, #564]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	498b      	ldr	r1, [pc, #556]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e14a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b82      	ldr	r3, [pc, #520]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	497f      	ldr	r1, [pc, #508]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80dc 	beq.w	80023f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d13c      	bne.n	80022be <HAL_RCC_ClockConfig+0xf6>
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d102      	bne.n	800226e <HAL_RCC_ClockConfig+0xa6>
 8002268:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	e00f      	b.n	800228e <HAL_RCC_ClockConfig+0xc6>
 800226e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002272:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	667b      	str	r3, [r7, #100]	; 0x64
 800227c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002292:	65ba      	str	r2, [r7, #88]	; 0x58
 8002294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800229c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d17b      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0f3      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d13c      	bne.n	8002340 <HAL_RCC_ClockConfig+0x178>
 80022c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x128>
 80022ea:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_ClockConfig+0x148>
 80022f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
 8002304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002314:	63ba      	str	r2, [r7, #56]	; 0x38
 8002316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002318:	fa92 f2a2 	rbit	r2, r2
 800231c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800231e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 021f 	and.w	r2, r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d13a      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b2      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
 8002340:	2302      	movs	r3, #2
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_RCC_ClockConfig+0x1a0>
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	e00d      	b.n	8002384 <HAL_RCC_ClockConfig+0x1bc>
 8002368:	2302      	movs	r3, #2
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2202      	movs	r2, #2
 8002386:	61ba      	str	r2, [r7, #24]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	fa92 f2a2 	rbit	r2, r2
 800238e:	617a      	str	r2, [r7, #20]
  return result;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f002 021f 	and.w	r2, r2, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e079      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	491a      	ldr	r1, [pc, #104]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fef8 	bl	80011b8 <HAL_GetTick>
 80023c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fef4 	bl	80011b8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e061      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d214      	bcs.n	800242c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4906      	ldr	r1, [pc, #24]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_RCC_ClockConfig+0x25c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e040      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2de>
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	491a      	ldr	r1, [pc, #104]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4912      	ldr	r1, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800246a:	f000 f829 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800246e:	4601      	mov	r1, r0
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002478:	22f0      	movs	r2, #240	; 0xf0
 800247a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	60fa      	str	r2, [r7, #12]
  return result;
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	fab2 f282 	clz	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	40d3      	lsrs	r3, r2
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002490:	5cd3      	ldrb	r3, [r2, r3]
 8002492:	fa21 f303 	lsr.w	r3, r1, r3
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCC_ClockConfig+0x2f4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fe46 	bl	8001130 <HAL_InitTick>
  
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3778      	adds	r7, #120	; 0x78
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	080031a0 	.word	0x080031a0
 80024b8:	20000004 	.word	0x20000004
 80024bc:	20000008 	.word	0x20000008

080024c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ee:	e03f      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024f2:	623b      	str	r3, [r7, #32]
      break;
 80024f4:	e03f      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002500:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	fa92 f2a2 	rbit	r2, r2
 8002508:	607a      	str	r2, [r7, #4]
  return result;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	40d3      	lsrs	r3, r2
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	220f      	movs	r2, #15
 8002524:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	fa92 f2a2 	rbit	r2, r2
 800252c:	60fa      	str	r2, [r7, #12]
  return result;
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	40d3      	lsrs	r3, r2
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_RCC_GetSysClockFreq+0xd0>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002548:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc8>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	e007      	b.n	800256a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc8>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	623b      	str	r3, [r7, #32]
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002576:	6a3b      	ldr	r3, [r7, #32]
}
 8002578:	4618      	mov	r0, r3
 800257a:	372c      	adds	r7, #44	; 0x2c
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	080031b0 	.word	0x080031b0
 8002590:	080031c0 	.word	0x080031c0

08002594 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b092      	sub	sp, #72	; 0x48
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80d4 	beq.w	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10e      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a4a      	ldr	r2, [pc, #296]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	61d3      	str	r3, [r2, #28]
 80025d0:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d118      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ee:	4b42      	ldr	r3, [pc, #264]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a41      	ldr	r2, [pc, #260]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fddd 	bl	80011b8 <HAL_GetTick>
 80025fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	e008      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7fe fdd9 	bl	80011b8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d901      	bls.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1d6      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002628:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8084 	beq.w	800273a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800263c:	429a      	cmp	r2, r3
 800263e:	d07c      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	461a      	mov	r2, r3
 800266a:	2301      	movs	r3, #1
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	461a      	mov	r2, r3
 800268e:	2300      	movs	r3, #0
 8002690:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d04b      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fd89 	bl	80011b8 <HAL_GetTick>
 80026a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fd85 	bl	80011b8 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e180      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026c0:	2302      	movs	r3, #2
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	2302      	movs	r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	61fb      	str	r3, [r7, #28]
  return result;
 80026d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d108      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026ee:	4b01      	ldr	r3, [pc, #4]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	e00d      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	10908100 	.word	0x10908100
 8002700:	2302      	movs	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2202      	movs	r2, #2
 8002712:	613a      	str	r2, [r7, #16]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	fa92 f2a2 	rbit	r2, r2
 800271a:	60fa      	str	r2, [r7, #12]
  return result;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f002 021f 	and.w	r2, r2, #31
 800272e:	2101      	movs	r1, #1
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0b7      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800273a:	4b95      	ldr	r3, [pc, #596]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4992      	ldr	r1, [pc, #584]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800274c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	4a8d      	ldr	r2, [pc, #564]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800275a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276c:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f023 0203 	bic.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4985      	ldr	r1, [pc, #532]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800278a:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	497e      	ldr	r1, [pc, #504]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a8:	4b79      	ldr	r3, [pc, #484]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4976      	ldr	r1, [pc, #472]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f023 0210 	bic.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	496f      	ldr	r1, [pc, #444]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027e4:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	4967      	ldr	r1, [pc, #412]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002802:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f023 0220 	bic.w	r2, r3, #32
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4960      	ldr	r1, [pc, #384]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002820:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	4958      	ldr	r1, [pc, #352]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4951      	ldr	r1, [pc, #324]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800284c:	4313      	orrs	r3, r2
 800284e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800285c:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4949      	ldr	r1, [pc, #292]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800287a:	4b45      	ldr	r3, [pc, #276]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4942      	ldr	r1, [pc, #264]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002898:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	493a      	ldr	r1, [pc, #232]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028b6:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	4933      	ldr	r1, [pc, #204]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	492b      	ldr	r1, [pc, #172]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4924      	ldr	r1, [pc, #144]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	491c      	ldr	r1, [pc, #112]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	4915      	ldr	r1, [pc, #84]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	490d      	ldr	r1, [pc, #52]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	4906      	ldr	r1, [pc, #24]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	e002      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299c:	490b      	ldr	r1, [pc, #44]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ba:	4904      	ldr	r1, [pc, #16]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3748      	adds	r7, #72	; 0x48
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <LL_ADC_REG_SetSequencerLength>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_ADC_IsEnabled>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <LL_ADC_CommonInit+0xa8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10f      	bne.n	8002a52 <LL_ADC_CommonInit+0x36>
 8002a32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a36:	f7ff ffde 	bl	80029f6 <LL_ADC_IsEnabled>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4822      	ldr	r0, [pc, #136]	; (8002ac8 <LL_ADC_CommonInit+0xac>)
 8002a3e:	f7ff ffda 	bl	80029f6 <LL_ADC_IsEnabled>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4323      	orrs	r3, r4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	e00d      	b.n	8002a6e <LL_ADC_CommonInit+0x52>
 8002a52:	481e      	ldr	r0, [pc, #120]	; (8002acc <LL_ADC_CommonInit+0xb0>)
 8002a54:	f7ff ffcf 	bl	80029f6 <LL_ADC_IsEnabled>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <LL_ADC_CommonInit+0xb4>)
 8002a5c:	f7ff ffcb 	bl	80029f6 <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4323      	orrs	r3, r4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d020      	beq.n	8002ab4 <LL_ADC_CommonInit+0x98>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <LL_ADC_CommonInit+0x84>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <LL_ADC_CommonInit+0xb8>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	6811      	ldr	r1, [r2, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6852      	ldr	r2, [r2, #4]
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	4311      	orrs	r1, r2
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	e00b      	b.n	8002ab8 <LL_ADC_CommonInit+0x9c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <LL_ADC_CommonInit+0xb8>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	e001      	b.n	8002ab8 <LL_ADC_CommonInit+0x9c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	50000300 	.word	0x50000300
 8002ac8:	50000100 	.word	0x50000100
 8002acc:	50000400 	.word	0x50000400
 8002ad0:	50000500 	.word	0x50000500
 8002ad4:	fffc30e0 	.word	0xfffc30e0

08002ad8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ff85 	bl	80029f6 <LL_ADC_IsEnabled>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d111      	bne.n	8002b16 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002afa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6811      	ldr	r1, [r2, #0]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	6852      	ldr	r2, [r2, #4]
 8002b06:	4311      	orrs	r1, r2
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	6892      	ldr	r2, [r2, #8]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	e001      	b.n	8002b1a <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff5f 	bl	80029f6 <LL_ADC_IsEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d132      	bne.n	8002ba4 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <LL_ADC_REG_Init+0x90>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	4311      	orrs	r1, r2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	68d2      	ldr	r2, [r2, #12]
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	6912      	ldr	r2, [r2, #16]
 8002b62:	4311      	orrs	r1, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	6952      	ldr	r2, [r2, #20]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e011      	b.n	8002b96 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <LL_ADC_REG_Init+0x90>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	4311      	orrs	r1, r2
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	6912      	ldr	r2, [r2, #16]
 8002b88:	4311      	orrs	r1, r2
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	6952      	ldr	r2, [r2, #20]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff17 	bl	80029d0 <LL_ADC_REG_SetSequencerLength>
 8002ba2:	e001      	b.n	8002ba8 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	fff0c03c 	.word	0xfff0c03c

08002bb8 <LL_DAC_IsEnabled>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	429a      	cmp	r2, r3
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff ffd5 	bl	8002bb8 <LL_DAC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d13a      	bne.n	8002c8a <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01e      	beq.n	8002c5a <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	f640 71fa 	movw	r1, #4090	; 0xffa
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4319      	orrs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4319      	orrs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e019      	b.n	8002c8e <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	21fa      	movs	r1, #250	; 0xfa
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4319      	orrs	r1, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e001      	b.n	8002c8e <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	613b      	str	r3, [r7, #16]
  return result;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
  return result;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b089      	sub	sp, #36	; 0x24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	613b      	str	r3, [r7, #16]
  return result;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	61bb      	str	r3, [r7, #24]
  return result;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002d78:	bf00      	nop
 8002d7a:	3724      	adds	r7, #36	; 0x24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	613b      	str	r3, [r7, #16]
  return result;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2103      	movs	r1, #3
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	61bb      	str	r3, [r7, #24]
  return result;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	60da      	str	r2, [r3, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b089      	sub	sp, #36	; 0x24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	613b      	str	r3, [r7, #16]
  return result;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	210f      	movs	r1, #15
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002e34:	bf00      	nop
 8002e36:	3724      	adds	r7, #36	; 0x24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	613b      	str	r3, [r7, #16]
  return result;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	210f      	movs	r1, #15
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	401a      	ands	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61bb      	str	r3, [r7, #24]
  return result;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	; 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b088      	sub	sp, #32
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	613b      	str	r3, [r7, #16]
  return result;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ec4:	e051      	b.n	8002f6a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d043      	beq.n	8002f64 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d003      	beq.n	8002eec <LL_GPIO_Init+0x4a>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d10e      	bne.n	8002f0a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff16 	bl	8002d26 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6819      	ldr	r1, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	461a      	mov	r2, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fef6 	bl	8002cf6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	69b9      	ldr	r1, [r7, #24]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff36 	bl	8002d84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d11a      	bne.n	8002f56 <LL_GPIO_Init+0xb4>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	60bb      	str	r3, [r7, #8]
  return result;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d807      	bhi.n	8002f48 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff4e 	bl	8002de2 <LL_GPIO_SetAFPin_0_7>
 8002f46:	e006      	b.n	8002f56 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff75 	bl	8002e40 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	69b9      	ldr	r1, [r7, #24]
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fe9a 	bl	8002c98 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1a6      	bne.n	8002ec6 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <LL_TIM_SetPrescaler>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_TIM_SetAutoReload>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_TIM_SetRepetitionCounter>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	615a      	str	r2, [r3, #20]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3f      	ldr	r2, [pc, #252]	; (8003108 <LL_TIM_Init+0x110>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <LL_TIM_Init+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003016:	d00f      	beq.n	8003038 <LL_TIM_Init+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3c      	ldr	r2, [pc, #240]	; (800310c <LL_TIM_Init+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00b      	beq.n	8003038 <LL_TIM_Init+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <LL_TIM_Init+0x118>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <LL_TIM_Init+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <LL_TIM_Init+0x11c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <LL_TIM_Init+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a39      	ldr	r2, [pc, #228]	; (8003118 <LL_TIM_Init+0x120>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d106      	bne.n	8003046 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <LL_TIM_Init+0x110>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01f      	beq.n	800308e <LL_TIM_Init+0x96>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d01b      	beq.n	800308e <LL_TIM_Init+0x96>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2c      	ldr	r2, [pc, #176]	; (800310c <LL_TIM_Init+0x114>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d017      	beq.n	800308e <LL_TIM_Init+0x96>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <LL_TIM_Init+0x118>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <LL_TIM_Init+0x96>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <LL_TIM_Init+0x11c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00f      	beq.n	800308e <LL_TIM_Init+0x96>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <LL_TIM_Init+0x124>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00b      	beq.n	800308e <LL_TIM_Init+0x96>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <LL_TIM_Init+0x128>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <LL_TIM_Init+0x96>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <LL_TIM_Init+0x12c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <LL_TIM_Init+0x96>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a23      	ldr	r2, [pc, #140]	; (8003118 <LL_TIM_Init+0x120>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d106      	bne.n	800309c <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff78 	bl	8002f9e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ff64 	bl	8002f82 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <LL_TIM_Init+0x110>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <LL_TIM_Init+0xf2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <LL_TIM_Init+0x11c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00f      	beq.n	80030ea <LL_TIM_Init+0xf2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <LL_TIM_Init+0x124>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00b      	beq.n	80030ea <LL_TIM_Init+0xf2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a12      	ldr	r2, [pc, #72]	; (8003120 <LL_TIM_Init+0x128>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <LL_TIM_Init+0xf2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a11      	ldr	r2, [pc, #68]	; (8003124 <LL_TIM_Init+0x12c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <LL_TIM_Init+0xf2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <LL_TIM_Init+0x120>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d105      	bne.n	80030f6 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff62 	bl	8002fba <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ff6d 	bl	8002fd6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800
 8003114:	40013400 	.word	0x40013400
 8003118:	40015000 	.word	0x40015000
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4e0d      	ldr	r6, [pc, #52]	; (8003160 <__libc_init_array+0x38>)
 800312c:	4c0d      	ldr	r4, [pc, #52]	; (8003164 <__libc_init_array+0x3c>)
 800312e:	1ba4      	subs	r4, r4, r6
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	2500      	movs	r5, #0
 8003134:	42a5      	cmp	r5, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	4e0b      	ldr	r6, [pc, #44]	; (8003168 <__libc_init_array+0x40>)
 800313a:	4c0c      	ldr	r4, [pc, #48]	; (800316c <__libc_init_array+0x44>)
 800313c:	f000 f820 	bl	8003180 <_init>
 8003140:	1ba4      	subs	r4, r4, r6
 8003142:	10a4      	asrs	r4, r4, #2
 8003144:	2500      	movs	r5, #0
 8003146:	42a5      	cmp	r5, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003150:	4798      	blx	r3
 8003152:	3501      	adds	r5, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800315a:	4798      	blx	r3
 800315c:	3501      	adds	r5, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	080031d0 	.word	0x080031d0
 8003164:	080031d0 	.word	0x080031d0
 8003168:	080031d0 	.word	0x080031d0
 800316c:	080031d4 	.word	0x080031d4

08003170 <memset>:
 8003170:	4402      	add	r2, r0
 8003172:	4603      	mov	r3, r0
 8003174:	4293      	cmp	r3, r2
 8003176:	d100      	bne.n	800317a <memset+0xa>
 8003178:	4770      	bx	lr
 800317a:	f803 1b01 	strb.w	r1, [r3], #1
 800317e:	e7f9      	b.n	8003174 <memset+0x4>

08003180 <_init>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr

0800318c <_fini>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr
