
MTP_LAB_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08004d18  08004d18  00014d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f28  08004f28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f28  08004f28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08004f3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004f3c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ea1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000177a  00000000  00000000  00028edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002a658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002ae70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024062  00000000  00000000  0002b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000742a  00000000  00000000  0004f622  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db1bc  00000000  00000000  00056a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000249c  00000000  00000000  00131c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004cfc 	.word	0x08004cfc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004cfc 	.word	0x08004cfc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_ADC_REG_SetTriggerEdge>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60da      	str	r2, [r3, #12]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b089      	sub	sp, #36	; 0x24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3330      	adds	r3, #48	; 0x30
 8000c82:	4619      	mov	r1, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c8e:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	fa92 f2a2 	rbit	r2, r2
 8000c96:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	40d3      	lsrs	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	211f      	movs	r1, #31
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	401a      	ands	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	0e9b      	lsrs	r3, r3, #26
 8000cc0:	f003 011f 	and.w	r1, r3, #31
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cd4:	bf00      	nop
 8000cd6:	3724      	adds	r7, #36	; 0x24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b08d      	sub	sp, #52	; 0x34
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3314      	adds	r3, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	fa92 f2a2 	rbit	r2, r2
 8000d04:	617a      	str	r2, [r7, #20]
  return result;
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	40d3      	lsrs	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	440b      	add	r3, r1
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000d20:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000d24:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d26:	6a39      	ldr	r1, [r7, #32]
 8000d28:	fa91 f1a1 	rbit	r1, r1
 8000d2c:	61f9      	str	r1, [r7, #28]
  return result;
 8000d2e:	69f9      	ldr	r1, [r7, #28]
 8000d30:	fab1 f181 	clz	r1, r1
 8000d34:	b2c9      	uxtb	r1, r1
 8000d36:	40cb      	lsrs	r3, r1
 8000d38:	2107      	movs	r1, #7
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	401a      	ands	r2, r3
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000d48:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000d4c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d50:	fa91 f1a1 	rbit	r1, r1
 8000d54:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d58:	fab1 f181 	clz	r1, r1
 8000d5c:	b2c9      	uxtb	r1, r1
 8000d5e:	40cb      	lsrs	r3, r1
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	431a      	orrs	r2, r3
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000d6c:	bf00      	nop
 8000d6e:	3734      	adds	r7, #52	; 0x34
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d8e:	400b      	ands	r3, r1
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0318 	and.w	r3, r3, #24
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d9c:	40d9      	lsrs	r1, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4019      	ands	r1, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000da4:	400b      	ands	r3, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	0007fffe 	.word	0x0007fffe

08000dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* 1. Set the intermediate state before moving the ADC voltage regulator    */
  /*    to state enable.                                                      */
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
  /* 2. Set the final state of ADC voltage regulator enable                   */
  /*    (ADVREGEN bits set to 0x01).                                          */
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000de0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN_0);
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e08:	f043 0201 	orr.w	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e62:	bf0c      	ite	eq
 8000e64:	2301      	moveq	r3, #1
 8000e66:	2300      	movne	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e8a:	f043 0204 	orr.w	r2, r3, #4
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f023 0204 	bic.w	r2, r3, #4
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	605a      	str	r2, [r3, #4]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f023 0208 	bic.w	r2, r3, #8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_DAC_EnableDMAReq>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableDMAReq(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	601a      	str	r2, [r3, #0]
          DAC_CR_DMAEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000fb6:	f023 0307 	bic.w	r3, r3, #7
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	605a      	str	r2, [r3, #4]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4013      	ands	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000

08001044 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104e:	69da      	ldr	r2, [r3, #28]
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4313      	orrs	r3, r2
 8001056:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <LL_APB1_GRP1_EnableClock+0x2c>)
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0a1b      	lsrs	r3, r3, #8
 8001084:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001088:	43db      	mvns	r3, r3
 800108a:	401a      	ands	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001092:	4904      	ldr	r1, [pc, #16]	; (80010a4 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40010000 	.word	0x40010000

080010a8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LL_DMA_EnableChannel+0x3c>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	3a01      	subs	r2, #1
 80010c6:	4907      	ldr	r1, [pc, #28]	; (80010e4 <LL_DMA_EnableChannel+0x3c>)
 80010c8:	5c8a      	ldrb	r2, [r1, r2]
 80010ca:	4611      	mov	r1, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	440a      	add	r2, r1
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6013      	str	r3, [r2, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	08004d18 	.word	0x08004d18

080010e8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <LL_DMA_SetDataTransferDirection+0x48>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001108:	f023 0310 	bic.w	r3, r3, #16
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	3a01      	subs	r2, #1
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <LL_DMA_SetDataTransferDirection+0x48>)
 8001112:	5c8a      	ldrb	r2, [r1, r2]
 8001114:	4611      	mov	r1, r2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	440a      	add	r2, r1
 800111a:	4611      	mov	r1, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	08004d18 	.word	0x08004d18

08001134 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <LL_DMA_SetMode+0x44>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 0220 	bic.w	r2, r3, #32
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3b01      	subs	r3, #1
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <LL_DMA_SetMode+0x44>)
 800115a:	5ccb      	ldrb	r3, [r1, r3]
 800115c:	4619      	mov	r1, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	440b      	add	r3, r1
 8001162:	4619      	mov	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
             Mode);
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	08004d18 	.word	0x08004d18

0800117c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3b01      	subs	r3, #1
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LL_DMA_SetPeriphIncMode+0x44>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	461a      	mov	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <LL_DMA_SetPeriphIncMode+0x44>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	4619      	mov	r1, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	440b      	add	r3, r1
 80011aa:	4619      	mov	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	08004d18 	.word	0x08004d18

080011c4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <LL_DMA_SetMemoryIncMode+0x44>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	461a      	mov	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <LL_DMA_SetMemoryIncMode+0x44>)
 80011ea:	5ccb      	ldrb	r3, [r1, r3]
 80011ec:	4619      	mov	r1, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	440b      	add	r3, r1
 80011f2:	4619      	mov	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	08004d18 	.word	0x08004d18

0800120c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3b01      	subs	r3, #1
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <LL_DMA_SetPeriphSize+0x44>)
 800121e:	5cd3      	ldrb	r3, [r2, r3]
 8001220:	461a      	mov	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <LL_DMA_SetPeriphSize+0x44>)
 8001232:	5ccb      	ldrb	r3, [r1, r3]
 8001234:	4619      	mov	r1, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	440b      	add	r3, r1
 800123a:	4619      	mov	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	08004d18 	.word	0x08004d18

08001254 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <LL_DMA_SetMemorySize+0x44>)
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	461a      	mov	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <LL_DMA_SetMemorySize+0x44>)
 800127a:	5ccb      	ldrb	r3, [r1, r3]
 800127c:	4619      	mov	r1, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	440b      	add	r3, r1
 8001282:	4619      	mov	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	08004d18 	.word	0x08004d18

0800129c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80012c2:	5ccb      	ldrb	r3, [r1, r3]
 80012c4:	4619      	mov	r1, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	440b      	add	r3, r1
 80012ca:	4619      	mov	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
             Priority);
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	08004d18 	.word	0x08004d18

080012e4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <LL_DMA_SetDataLength+0x44>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	3a01      	subs	r2, #1
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <LL_DMA_SetDataLength+0x44>)
 800130a:	5c8a      	ldrb	r2, [r1, r2]
 800130c:	4611      	mov	r1, r2
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	440a      	add	r2, r1
 8001312:	4611      	mov	r1, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	08004d18 	.word	0x08004d18

0800132c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3b01      	subs	r3, #1
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <LL_DMA_SetMemoryAddress+0x2c>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	08004d18 	.word	0x08004d18

0800135c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3b01      	subs	r3, #1
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <LL_DMA_SetPeriphAddress+0x2c>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6093      	str	r3, [r2, #8]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	08004d18 	.word	0x08004d18
 800138c:	00000000 	.word	0x00000000

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  for (uint16_t i = 0; i < (int)RESOLUTION; i++) {
 8001396:	2300      	movs	r3, #0
 8001398:	80fb      	strh	r3, [r7, #6]
 800139a:	e03b      	b.n	8001414 <main+0x84>
	  ubSinValues[i] = (uint8_t)((sin((double)M_PI*2.0*(double)i/RESOLUTION) * (double)0.5)*(double)(RESOLUTION));
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f85c 	bl	800045c <__aeabi_ui2d>
 80013a4:	a387      	add	r3, pc, #540	; (adr r3, 80015c4 <main+0x234>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f8d1 	bl	8000550 <__aeabi_dmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	4618      	mov	r0, r3
 80013b4:	4621      	mov	r1, r4
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <main+0x1e8>)
 80013bc:	f7ff f9f2 	bl	80007a4 <__aeabi_ddiv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	ec44 3b17 	vmov	d7, r3, r4
 80013c8:	eeb0 0a47 	vmov.f32	s0, s14
 80013cc:	eef0 0a67 	vmov.f32	s1, s15
 80013d0:	f002 fc82 	bl	8003cd8 <sin>
 80013d4:	ec51 0b10 	vmov	r0, r1, d0
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4b67      	ldr	r3, [pc, #412]	; (800157c <main+0x1ec>)
 80013de:	f7ff f8b7 	bl	8000550 <__aeabi_dmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	4618      	mov	r0, r3
 80013e8:	4621      	mov	r1, r4
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <main+0x1e8>)
 80013f0:	f7ff f8ae 	bl	8000550 <__aeabi_dmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	88fc      	ldrh	r4, [r7, #6]
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb67 	bl	8000ad4 <__aeabi_d2uiz>
 8001406:	4603      	mov	r3, r0
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <main+0x1f0>)
 800140c:	551a      	strb	r2, [r3, r4]
  for (uint16_t i = 0; i < (int)RESOLUTION; i++) {
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3301      	adds	r3, #1
 8001412:	80fb      	strh	r3, [r7, #6]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d9c0      	bls.n	800139c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141a:	f000 fbfd 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141e:	f000 f8d5 	bl	80015cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001422:	f000 fb27 	bl	8001a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8001426:	f000 faef 	bl	8001a08 <MX_DMA_Init>
  MX_ADC1_Init();
 800142a:	f000 f933 	bl	8001694 <MX_ADC1_Init>
  MX_DAC1_Init();
 800142e:	f000 fa15 	bl	800185c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001432:	f000 fa7d 	bl	8001930 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001436:	f000 fabf 	bl	80019b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&adcData);
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <main+0x1f4>)
 800143c:	461a      	mov	r2, r3
 800143e:	2101      	movs	r1, #1
 8001440:	4851      	ldr	r0, [pc, #324]	; (8001588 <main+0x1f8>)
 8001442:	f7ff ff73 	bl	800132c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 3);
 8001446:	2203      	movs	r2, #3
 8001448:	2101      	movs	r1, #1
 800144a:	484f      	ldr	r0, [pc, #316]	; (8001588 <main+0x1f8>)
 800144c:	f7ff ff4a 	bl	80012e4 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&ADC1->DR);
 8001450:	4a4e      	ldr	r2, [pc, #312]	; (800158c <main+0x1fc>)
 8001452:	2101      	movs	r1, #1
 8001454:	484c      	ldr	r0, [pc, #304]	; (8001588 <main+0x1f8>)
 8001456:	f7ff ff81 	bl	800135c <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800145a:	2101      	movs	r1, #1
 800145c:	484a      	ldr	r0, [pc, #296]	; (8001588 <main+0x1f8>)
 800145e:	f7ff fe23 	bl	80010a8 <LL_DMA_EnableChannel>

  LL_ADC_EnableInternalRegulator(ADC1);
 8001462:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001466:	f7ff fcab 	bl	8000dc0 <LL_ADC_EnableInternalRegulator>
  HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 fc3a 	bl	8001ce4 <HAL_Delay>

  ADC12_COMMON->CCR |= ADC_CCR_TSEN | ADC_CCR_VREFEN;
 8001470:	4b47      	ldr	r3, [pc, #284]	; (8001590 <main+0x200>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a46      	ldr	r2, [pc, #280]	; (8001590 <main+0x200>)
 8001476:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800147a:	6093      	str	r3, [r2, #8]
  HAL_Delay(1);
 800147c:	2001      	movs	r0, #1
 800147e:	f000 fc31 	bl	8001ce4 <HAL_Delay>

  LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8001482:	217f      	movs	r1, #127	; 0x7f
 8001484:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001488:	f7ff fcc8 	bl	8000e1c <LL_ADC_StartCalibration>
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800148c:	bf00      	nop
 800148e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001492:	f7ff fcdc 	bl	8000e4e <LL_ADC_IsCalibrationOnGoing>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f8      	bne.n	800148e <main+0xfe>

  LL_ADC_REG_StartConversion(ADC1);
 800149c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014a0:	f7ff fce9 	bl	8000e76 <LL_ADC_REG_StartConversion>
  LL_ADC_Enable(ADC1);
 80014a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014a8:	f7ff fca4 	bl	8000df4 <LL_ADC_Enable>

  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)ubSinValues);
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <main+0x1f0>)
 80014ae:	461a      	mov	r2, r3
 80014b0:	2103      	movs	r1, #3
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <main+0x1f8>)
 80014b4:	f7ff ff3a 	bl	800132c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, RESOLUTION);
 80014b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014bc:	2103      	movs	r1, #3
 80014be:	4832      	ldr	r0, [pc, #200]	; (8001588 <main+0x1f8>)
 80014c0:	f7ff ff10 	bl	80012e4 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&DAC1->DHR8R1);
 80014c4:	4a33      	ldr	r2, [pc, #204]	; (8001594 <main+0x204>)
 80014c6:	2103      	movs	r1, #3
 80014c8:	482f      	ldr	r0, [pc, #188]	; (8001588 <main+0x1f8>)
 80014ca:	f7ff ff47 	bl	800135c <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 80014ce:	2103      	movs	r1, #3
 80014d0:	482d      	ldr	r0, [pc, #180]	; (8001588 <main+0x1f8>)
 80014d2:	f7ff fde9 	bl	80010a8 <LL_DMA_EnableChannel>

  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 80014d6:	4930      	ldr	r1, [pc, #192]	; (8001598 <main+0x208>)
 80014d8:	4830      	ldr	r0, [pc, #192]	; (800159c <main+0x20c>)
 80014da:	f7ff fd17 	bl	8000f0c <LL_DAC_Enable>
  LL_DAC_EnableDMAReq(DAC1, LL_DAC_CHANNEL_1);
 80014de:	492e      	ldr	r1, [pc, #184]	; (8001598 <main+0x208>)
 80014e0:	482e      	ldr	r0, [pc, #184]	; (800159c <main+0x20c>)
 80014e2:	f7ff fcfc 	bl	8000ede <LL_DAC_EnableDMAReq>

  LL_TIM_EnableCounter(TIM2);
 80014e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014ea:	f7ff fd3b 	bl	8000f64 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM6);
 80014ee:	482c      	ldr	r0, [pc, #176]	; (80015a0 <main+0x210>)
 80014f0:	f7ff fd38 	bl	8000f64 <LL_TIM_EnableCounter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(10); // wait load data otherwise hardfault
 80014f4:	200a      	movs	r0, #10
 80014f6:	f000 fbf5 	bl	8001ce4 <HAL_Delay>
  while (1)
  {
	  vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE((uint32_t)adcData.usVrefInt, LL_ADC_RESOLUTION_12B);
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <main+0x214>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001504:	fb03 f202 	mul.w	r2, r3, r2
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <main+0x1f4>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <main+0x218>)
 8001512:	6013      	str	r3, [r2, #0]
	  vcalc = __LL_ADC_CALC_DATA_TO_VOLTAGE(vref, (uint32_t)adcData.usCh1, LL_ADC_RESOLUTION_12B);
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <main+0x1f4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <main+0x218>)
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	fb02 f203 	mul.w	r2, r2, r3
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <main+0x21c>)
 8001522:	fba3 1302 	umull	r1, r3, r3, r2
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	0852      	lsrs	r2, r2, #1
 800152a:	4413      	add	r3, r2
 800152c:	0adb      	lsrs	r3, r3, #11
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <main+0x220>)
 8001530:	6013      	str	r3, [r2, #0]
	  vtemp = __LL_ADC_CALC_TEMPERATURE(vref, (uint32_t)adcData.usTemInt, LL_ADC_RESOLUTION_12B);
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <main+0x1f4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <main+0x218>)
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <main+0x224>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	461a      	mov	r2, r3
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <main+0x228>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	1ad2      	subs	r2, r2, r3
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	461a      	mov	r2, r3
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <main+0x22c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <main+0x228>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	1acb      	subs	r3, r1, r3
 8001566:	fb92 f3f3 	sdiv	r3, r2, r3
 800156a:	331e      	adds	r3, #30
 800156c:	461a      	mov	r2, r3
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <main+0x230>)
 8001570:	601a      	str	r2, [r3, #0]
	  vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE((uint32_t)adcData.usVrefInt, LL_ADC_RESOLUTION_12B);
 8001572:	e7c2      	b.n	80014fa <main+0x16a>
 8001574:	f3af 8000 	nop.w
 8001578:	40700000 	.word	0x40700000
 800157c:	3fe00000 	.word	0x3fe00000
 8001580:	20000030 	.word	0x20000030
 8001584:	20000138 	.word	0x20000138
 8001588:	40020000 	.word	0x40020000
 800158c:	50000040 	.word	0x50000040
 8001590:	50000300 	.word	0x50000300
 8001594:	40007410 	.word	0x40007410
 8001598:	02100001 	.word	0x02100001
 800159c:	40007400 	.word	0x40007400
 80015a0:	40001000 	.word	0x40001000
 80015a4:	1ffff7ba 	.word	0x1ffff7ba
 80015a8:	20000134 	.word	0x20000134
 80015ac:	00100101 	.word	0x00100101
 80015b0:	20000028 	.word	0x20000028
 80015b4:	09ee009f 	.word	0x09ee009f
 80015b8:	1ffff7b8 	.word	0x1ffff7b8
 80015bc:	1ffff7c2 	.word	0x1ffff7c2
 80015c0:	20000130 	.word	0x20000130
 80015c4:	54442d18 	.word	0x54442d18
 80015c8:	401921fb 	.word	0x401921fb

080015cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0a6      	sub	sp, #152	; 0x98
 80015d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015d6:	2228      	movs	r2, #40	; 0x28
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fb74 	bl	8003cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2258      	movs	r2, #88	; 0x58
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fb66 	bl	8003cc8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fc:	2302      	movs	r3, #2
 80015fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	2310      	movs	r3, #16
 8001606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001618:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800161c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fc62 	bl	8001ef4 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001636:	f000 fa35 	bl	8001aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001650:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001654:	2102      	movs	r1, #2
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fb62 	bl	8002d20 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001662:	f000 fa1f 	bl	8001aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <SystemClock_Config+0xc4>)
 8001668:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001670:	2300      	movs	r3, #0
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f001 fd38 	bl	80030ec <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001682:	f000 fa0f 	bl	8001aa4 <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3798      	adds	r7, #152	; 0x98
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	00100080 	.word	0x00100080

08001694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	; 0x50
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800169a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80016a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80016d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80016da:	f7ff fc9b 	bl	8001014 <LL_AHB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016e2:	f7ff fc97 	bl	8001014 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PA0   ------> ADC1_IN1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80016e6:	2301      	movs	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f002 f97e 	bl	80039fa <LL_GPIO_Init>

  /* ADC1 DMA Init */
  
  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	4851      	ldr	r0, [pc, #324]	; (8001848 <MX_ADC1_Init+0x1b4>)
 8001704:	f7ff fcf0 	bl	80010e8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 8001708:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800170c:	2101      	movs	r1, #1
 800170e:	484e      	ldr	r0, [pc, #312]	; (8001848 <MX_ADC1_Init+0x1b4>)
 8001710:	f7ff fdc4 	bl	800129c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001714:	2220      	movs	r2, #32
 8001716:	2101      	movs	r1, #1
 8001718:	484b      	ldr	r0, [pc, #300]	; (8001848 <MX_ADC1_Init+0x1b4>)
 800171a:	f7ff fd0b 	bl	8001134 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800171e:	2200      	movs	r2, #0
 8001720:	2101      	movs	r1, #1
 8001722:	4849      	ldr	r0, [pc, #292]	; (8001848 <MX_ADC1_Init+0x1b4>)
 8001724:	f7ff fd2a 	bl	800117c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	2101      	movs	r1, #1
 800172c:	4846      	ldr	r0, [pc, #280]	; (8001848 <MX_ADC1_Init+0x1b4>)
 800172e:	f7ff fd49 	bl	80011c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8001732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001736:	2101      	movs	r1, #1
 8001738:	4843      	ldr	r0, [pc, #268]	; (8001848 <MX_ADC1_Init+0x1b4>)
 800173a:	f7ff fd67 	bl	800120c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 800173e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001742:	2101      	movs	r1, #1
 8001744:	4840      	ldr	r0, [pc, #256]	; (8001848 <MX_ADC1_Init+0x1b4>)
 8001746:	f7ff fd85 	bl	8001254 <LL_DMA_SetMemorySize>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800174a:	2300      	movs	r3, #0
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800174e:	2300      	movs	r3, #0
 8001750:	64bb      	str	r3, [r7, #72]	; 0x48
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001756:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001760:	f001 ff66 	bl	8003630 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM6_TRGO_ADC12;
 8001764:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 800176a:	2302      	movs	r3, #2
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001776:	2303      	movs	r3, #3
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800178a:	f001 ff77 	bl	800367c <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 800178e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001792:	f7ff fb84 	bl	8000e9e <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001796:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800179a:	f7ff fb90 	bl	8000ebe <LL_ADC_DisableIT_EOS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4827      	ldr	r0, [pc, #156]	; (800184c <MX_ADC1_Init+0x1b8>)
 80017ae:	f001 fee1 	bl	8003574 <LL_ADC_CommonInit>
  LL_ADC_REG_SetTriggerEdge(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017ba:	f7ff fa47 	bl	8000c4c <LL_ADC_REG_SetTriggerEdge>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <MX_ADC1_Init+0x1bc>)
 80017c0:	2106      	movs	r1, #6
 80017c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017c6:	f7ff fa54 	bl	8000c72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 80017ca:	2203      	movs	r2, #3
 80017cc:	4920      	ldr	r1, [pc, #128]	; (8001850 <MX_ADC1_Init+0x1bc>)
 80017ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017d2:	f7ff fa85 	bl	8000ce0 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80017d6:	227f      	movs	r2, #127	; 0x7f
 80017d8:	491d      	ldr	r1, [pc, #116]	; (8001850 <MX_ADC1_Init+0x1bc>)
 80017da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017de:	f7ff facb 	bl	8000d78 <LL_ADC_SetChannelSingleDiff>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_TEMPSENSOR);
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <MX_ADC1_Init+0x1c0>)
 80017e4:	210c      	movs	r1, #12
 80017e6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017ea:	f7ff fa42 	bl	8000c72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_181CYCLES_5);
 80017ee:	2206      	movs	r2, #6
 80017f0:	4918      	ldr	r1, [pc, #96]	; (8001854 <MX_ADC1_Init+0x1c0>)
 80017f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017f6:	f7ff fa73 	bl	8000ce0 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SINGLE_ENDED);
 80017fa:	227f      	movs	r2, #127	; 0x7f
 80017fc:	4915      	ldr	r1, [pc, #84]	; (8001854 <MX_ADC1_Init+0x1c0>)
 80017fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001802:	f7ff fab9 	bl	8000d78 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_TEMPSENSOR);
 8001806:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <MX_ADC1_Init+0x1b8>)
 800180c:	f7ff fa0b 	bl	8000c26 <LL_ADC_SetCommonPathInternalCh>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_VREFINT);
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <MX_ADC1_Init+0x1c4>)
 8001812:	2112      	movs	r1, #18
 8001814:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001818:	f7ff fa2b 	bl	8000c72 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_181CYCLES_5);
 800181c:	2206      	movs	r2, #6
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <MX_ADC1_Init+0x1c4>)
 8001820:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001824:	f7ff fa5c 	bl	8000ce0 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 8001828:	227f      	movs	r2, #127	; 0x7f
 800182a:	490b      	ldr	r1, [pc, #44]	; (8001858 <MX_ADC1_Init+0x1c4>)
 800182c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001830:	f7ff faa2 	bl	8000d78 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8001834:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_ADC1_Init+0x1b8>)
 800183a:	f7ff f9f4 	bl	8000c26 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3750      	adds	r7, #80	; 0x50
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40020000 	.word	0x40020000
 800184c:	50000300 	.word	0x50000300
 8001850:	04300002 	.word	0x04300002
 8001854:	c3210000 	.word	0xc3210000
 8001858:	cb840000 	.word	0xcb840000

0800185c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8001880:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001884:	f7ff fbde 	bl	8001044 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001888:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800188c:	f7ff fbc2 	bl	8001014 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001890:	2310      	movs	r3, #16
 8001892:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001894:	2303      	movs	r3, #3
 8001896:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f002 f8a9 	bl	80039fa <LL_GPIO_Init>

  /* DAC1 DMA Init */
  
  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80018a8:	2210      	movs	r2, #16
 80018aa:	2103      	movs	r1, #3
 80018ac:	481c      	ldr	r0, [pc, #112]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018ae:	f7ff fc1b 	bl	80010e8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_VERYHIGH);
 80018b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80018b6:	2103      	movs	r1, #3
 80018b8:	4819      	ldr	r0, [pc, #100]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018ba:	f7ff fcef 	bl	800129c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 80018be:	2220      	movs	r2, #32
 80018c0:	2103      	movs	r1, #3
 80018c2:	4817      	ldr	r0, [pc, #92]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018c4:	f7ff fc36 	bl	8001134 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2103      	movs	r1, #3
 80018cc:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018ce:	f7ff fc55 	bl	800117c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	2103      	movs	r1, #3
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018d8:	f7ff fc74 	bl	80011c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80018dc:	2200      	movs	r2, #0
 80018de:	2103      	movs	r1, #3
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018e2:	f7ff fc93 	bl	800120c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2103      	movs	r1, #3
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_DAC1_Init+0xc4>)
 80018ec:	f7ff fcb2 	bl	8001254 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_DAC1_Init+0xc8>)
 80018f2:	f7ff fbbf 	bl	8001074 <LL_SYSCFG_SetRemapDMA_DAC>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM2_TRGO;
 80018f6:	2320      	movs	r3, #32
 80018f8:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	461a      	mov	r2, r3
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <MX_DAC1_Init+0xcc>)
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <MX_DAC1_Init+0xd0>)
 800190c:	f001 ff1f 	bl	800374e <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8001910:	4905      	ldr	r1, [pc, #20]	; (8001928 <MX_DAC1_Init+0xcc>)
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <MX_DAC1_Init+0xd0>)
 8001914:	f7ff fb10 	bl	8000f38 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000
 8001924:	00202000 	.word	0x00202000
 8001928:	02100001 	.word	0x02100001
 800192c:	40007400 	.word	0x40007400

08001930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff fb7d 	bl	8001044 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800194a:	f7ff f8e3 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 800194e:	4603      	mov	r3, r0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f933 	bl	8000bc0 <NVIC_EncodePriority>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	201c      	movs	r0, #28
 8001960:	f7ff f904 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001964:	201c      	movs	r0, #28
 8001966:	f7ff f8e3 	bl	8000b30 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 800196a:	f641 03ff 	movw	r3, #6399	; 0x18ff
 800196e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8001974:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001978:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001986:	f002 f8e3 	bl	8003b50 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800198a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800198e:	f7ff faf9 	bl	8000f84 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001992:	2100      	movs	r1, #0
 8001994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001998:	f7ff fb04 	bl	8000fa4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 800199c:	2120      	movs	r1, #32
 800199e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019a2:	f7ff fb14 	bl	8000fce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80019a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019aa:	f7ff fb23 	bl	8000ff4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80019cc:	2010      	movs	r0, #16
 80019ce:	f7ff fb39 	bl	8001044 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 63;
 80019da:	233f      	movs	r3, #63	; 0x3f
 80019dc:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <MX_TIM6_Init+0x4c>)
 80019e4:	f002 f8b4 	bl	8003b50 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80019e8:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_TIM6_Init+0x4c>)
 80019ea:	f7ff facb 	bl	8000f84 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_UPDATE);
 80019ee:	2120      	movs	r1, #32
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_TIM6_Init+0x4c>)
 80019f2:	f7ff faec 	bl	8000fce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM6_Init+0x4c>)
 80019f8:	f7ff fafc 	bl	8000ff4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40001000 	.word	0x40001000

08001a08 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_DMA_Init+0x68>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <MX_DMA_Init+0x68>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_DMA_Init+0x68>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a26:	f7ff f875 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f8c5 	bl	8000bc0 <NVIC_EncodePriority>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	200b      	movs	r0, #11
 8001a3c:	f7ff f896 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a40:	200b      	movs	r0, #11
 8001a42:	f7ff f875 	bl	8000b30 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a46:	f7ff f865 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f8b5 	bl	8000bc0 <NVIC_EncodePriority>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	200d      	movs	r0, #13
 8001a5c:	f7ff f886 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a60:	200d      	movs	r0, #13
 8001a62:	f7ff f865 	bl	8000b30 <__NVIC_EnableIRQ>

}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_GPIO_Init+0x2c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <MX_GPIO_Init+0x2c>)
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a84:	6153      	str	r3, [r2, #20]
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_GPIO_Init+0x2c>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_MspInit+0x44>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_MspInit+0x44>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6193      	str	r3, [r2, #24]
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_MspInit+0x44>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_MspInit+0x44>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_MspInit+0x44>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_MspInit+0x44>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f06f 0201 	mvn.w	r2, #1
 8001b0a:	611a      	str	r2, [r3, #16]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f89a 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  LL_TIM_ClearFlag_UPDATE(TIM2);
 8001b94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b98:	f7ff ffb0 	bl	8001afc <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f002 f845 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7ff fbcb 	bl	8001390 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bfc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c08:	08004f30 	.word	0x08004f30
  ldr r2, =_sbss
 8001c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c10:	20000148 	.word	0x20000148

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f92f 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff ff3e 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f939 	bl	8001eda <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f90f 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000144 	.word	0x20000144

08001ccc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000144 	.word	0x20000144

08001ce4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_Delay+0x40>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000008 	.word	0x20000008

08001d28 <__NVIC_SetPriorityGrouping>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_SetPriority>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff47 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff5c 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb0 	bl	8001e48 <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f000 bf01 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8160 	beq.w	80021de <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f1e:	4bae      	ldr	r3, [pc, #696]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f2a:	4bab      	ldr	r3, [pc, #684]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d159      	bne.n	8001fea <HAL_RCC_OscConfig+0xf6>
 8001f36:	4ba8      	ldr	r3, [pc, #672]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d152      	bne.n	8001fea <HAL_RCC_OscConfig+0xf6>
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001f58:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x82>
 8001f70:	4b99      	ldr	r3, [pc, #612]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0xae>
 8001f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f92:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001faa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001fb6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fba:	fab2 f282 	clz	r2, r2
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f042 0220 	orr.w	r2, r2, #32
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f002 021f 	and.w	r2, r2, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8102 	beq.w	80021dc <HAL_RCC_OscConfig+0x2e8>
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80fc 	bne.w	80021dc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f000 be93 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_OscConfig+0x110>
 8001ff6:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e030      	b.n	8002066 <HAL_RCC_OscConfig+0x172>
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x134>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01e      	b.n	8002066 <HAL_RCC_OscConfig+0x172>
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x15a>
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 800203a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a64      	ldr	r2, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x172>
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a61      	ldr	r2, [pc, #388]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5e      	ldr	r2, [pc, #376]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d059      	beq.n	8002124 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fe2c 	bl	8001ccc <HAL_GetTick>
 8002074:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207a:	f7ff fe27 	bl	8001ccc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d902      	bls.n	8002090 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	f000 be40 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002094:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80020a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x1ce>
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x1fa>
 80020c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80020d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80020f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002102:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f042 0220 	orr.w	r2, r2, #32
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f002 021f 	and.w	r2, r2, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f202 	lsl.w	r2, r1, r2
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ab      	beq.n	800207a <HAL_RCC_OscConfig+0x186>
 8002122:	e05c      	b.n	80021de <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fdd2 	bl	8001ccc <HAL_GetTick>
 8002128:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212e:	f7ff fdcd 	bl	8001ccc <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d902      	bls.n	8002144 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	f000 bde6 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002158:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0x282>
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x2ae>
 8002176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800218a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800218e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002192:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_RCC_OscConfig+0x2e4>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80021aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80021b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ab      	bne.n	800212e <HAL_RCC_OscConfig+0x23a>
 80021d6:	e002      	b.n	80021de <HAL_RCC_OscConfig+0x2ea>
 80021d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8170 	beq.w	80024ce <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021ee:	4bd0      	ldr	r3, [pc, #832]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021fa:	4bcd      	ldr	r3, [pc, #820]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d16d      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3ee>
 8002206:	4bca      	ldr	r3, [pc, #808]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	d166      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3ee>
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002226:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x350>
 800223e:	4bbc      	ldr	r3, [pc, #752]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e013      	b.n	800226c <HAL_RCC_OscConfig+0x378>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800225c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002268:	4bb1      	ldr	r3, [pc, #708]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2202      	movs	r2, #2
 800226e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002272:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800227e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0220 	orr.w	r2, r2, #32
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_RCC_OscConfig+0x3ba>
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d002      	beq.n	80022ae <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f000 bd31 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	21f8      	movs	r1, #248	; 0xf8
 80022be:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80022c6:	fa91 f1a1 	rbit	r1, r1
 80022ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80022ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022d2:	fab1 f181 	clz	r1, r1
 80022d6:	b2c9      	uxtb	r1, r1
 80022d8:	408b      	lsls	r3, r1
 80022da:	4995      	ldr	r1, [pc, #596]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e0:	e0f5      	b.n	80024ce <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8085 	beq.w	80023f8 <HAL_RCC_OscConfig+0x504>
 80022ee:	2301      	movs	r3, #1
 80022f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002300:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800230e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	461a      	mov	r2, r3
 8002316:	2301      	movs	r3, #1
 8002318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fcd7 	bl	8001ccc <HAL_GetTick>
 800231e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fcd2 	bl	8001ccc <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d902      	bls.n	800233a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	f000 bceb 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800234c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_RCC_OscConfig+0x476>
 8002364:	4b72      	ldr	r3, [pc, #456]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	e013      	b.n	8002392 <HAL_RCC_OscConfig+0x49e>
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002382:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800238e:	4b68      	ldr	r3, [pc, #416]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2202      	movs	r2, #2
 8002394:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002398:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800239c:	fa92 f2a2 	rbit	r2, r2
 80023a0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80023a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f042 0220 	orr.w	r2, r2, #32
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f002 021f 	and.w	r2, r2, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0af      	beq.n	8002324 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	21f8      	movs	r1, #248	; 0xf8
 80023d4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80023dc:	fa91 f1a1 	rbit	r1, r1
 80023e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80023e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023e8:	fab1 f181 	clz	r1, r1
 80023ec:	b2c9      	uxtb	r1, r1
 80023ee:	408b      	lsls	r3, r1
 80023f0:	494f      	ldr	r1, [pc, #316]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
 80023f6:	e06a      	b.n	80024ce <HAL_RCC_OscConfig+0x5da>
 80023f8:	2301      	movs	r3, #1
 80023fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800240a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	461a      	mov	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fc52 	bl	8001ccc <HAL_GetTick>
 8002428:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7ff fc4d 	bl	8001ccc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	f000 bc66 	b.w	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002456:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_RCC_OscConfig+0x580>
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e013      	b.n	800249c <HAL_RCC_OscConfig+0x5a8>
 8002474:	2302      	movs	r3, #2
 8002476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800248c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_OscConfig+0x63c>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2202      	movs	r2, #2
 800249e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80024a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80024a6:	fa92 f2a2 	rbit	r2, r2
 80024aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80024ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024b2:	fab2 f282 	clz	r2, r2
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f042 0220 	orr.w	r2, r2, #32
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f002 021f 	and.w	r2, r2, #31
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f202 	lsl.w	r2, r1, r2
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1af      	bne.n	800242e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80da 	beq.w	8002692 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d069      	beq.n	80025bc <HAL_RCC_OscConfig+0x6c8>
 80024e8:	2301      	movs	r3, #1
 80024ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80024fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x640>)
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	461a      	mov	r2, r3
 800250e:	2301      	movs	r3, #1
 8002510:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fbdb 	bl	8001ccc <HAL_GetTick>
 8002516:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	e00d      	b.n	8002538 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251c:	f7ff fbd6 	bl	8001ccc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d905      	bls.n	8002538 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e3ef      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002530:	40021000 	.word	0x40021000
 8002534:	10908120 	.word	0x10908120
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002550:	2202      	movs	r2, #2
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f2a3 	rbit	r2, r3
 800255e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002568:	2202      	movs	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800257a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257c:	4ba4      	ldr	r3, [pc, #656]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800257e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002580:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002584:	2102      	movs	r1, #2
 8002586:	6019      	str	r1, [r3, #0]
 8002588:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f1a3 	rbit	r1, r3
 8002592:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002596:	6019      	str	r1, [r3, #0]
  return result;
 8002598:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0b0      	beq.n	800251c <HAL_RCC_OscConfig+0x628>
 80025ba:	e06a      	b.n	8002692 <HAL_RCC_OscConfig+0x79e>
 80025bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c0:	2201      	movs	r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025d2:	601a      	str	r2, [r3, #0]
  return result;
 80025d4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80025d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_OscConfig+0x920>)
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb6d 	bl	8001ccc <HAL_GetTick>
 80025f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f6:	e009      	b.n	800260c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb68 	bl	8001ccc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e381      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 800260c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002640:	2202      	movs	r2, #2
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002652:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b6e      	ldr	r3, [pc, #440]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002658:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800265c:	2102      	movs	r1, #2
 800265e:	6019      	str	r1, [r3, #0]
 8002660:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f1a3 	rbit	r1, r3
 800266a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800266e:	6019      	str	r1, [r3, #0]
  return result;
 8002670:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1b2      	bne.n	80025f8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8157 	beq.w	8002950 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d112      	bne.n	80026da <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a55      	ldr	r2, [pc, #340]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	61d3      	str	r3, [r2, #28]
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <HAL_RCC_OscConfig+0x924>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11a      	bne.n	800271c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <HAL_RCC_OscConfig+0x924>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4b      	ldr	r2, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x924>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7ff faeb 	bl	8001ccc <HAL_GetTick>
 80026f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	e009      	b.n	8002710 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fc:	f7ff fae6 	bl	8001ccc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e2ff      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_OscConfig+0x924>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ef      	beq.n	80026fc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d106      	bne.n	8002734 <HAL_RCC_OscConfig+0x840>
 8002726:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	e02f      	b.n	8002794 <HAL_RCC_OscConfig+0x8a0>
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x864>
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a33      	ldr	r2, [pc, #204]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a30      	ldr	r2, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0x8a0>
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x888>
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a2a      	ldr	r2, [pc, #168]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0x8a0>
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d06a      	beq.n	8002874 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff fa95 	bl	8001ccc <HAL_GetTick>
 80027a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7ff fa90 	bl	8001ccc <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e2a7      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 80027c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027c4:	2202      	movs	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027ee:	601a      	str	r2, [r3, #0]
  return result;
 80027f0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80027f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d108      	bne.n	800281c <HAL_RCC_OscConfig+0x928>
 800280a:	4b01      	ldr	r3, [pc, #4]	; (8002810 <HAL_RCC_OscConfig+0x91c>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	e013      	b.n	8002838 <HAL_RCC_OscConfig+0x944>
 8002810:	40021000 	.word	0x40021000
 8002814:	10908120 	.word	0x10908120
 8002818:	40007000 	.word	0x40007000
 800281c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fa93 f2a3 	rbit	r2, r3
 800282e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	4bc0      	ldr	r3, [pc, #768]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800283c:	2102      	movs	r1, #2
 800283e:	6011      	str	r1, [r2, #0]
 8002840:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	fa92 f1a2 	rbit	r1, r2
 800284a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800284e:	6011      	str	r1, [r2, #0]
  return result;
 8002850:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	f002 021f 	and.w	r2, r2, #31
 8002866:	2101      	movs	r1, #1
 8002868:	fa01 f202 	lsl.w	r2, r1, r2
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d09a      	beq.n	80027a8 <HAL_RCC_OscConfig+0x8b4>
 8002872:	e063      	b.n	800293c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7ff fa2a 	bl	8001ccc <HAL_GetTick>
 8002878:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00b      	b.n	8002896 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff fa25 	bl	8001ccc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e23c      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002896:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800289a:	2202      	movs	r2, #2
 800289c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f2a3 	rbit	r2, r3
 80028a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028b2:	2202      	movs	r2, #2
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028c4:	601a      	str	r2, [r3, #0]
  return result;
 80028c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d102      	bne.n	80028e6 <HAL_RCC_OscConfig+0x9f2>
 80028e0:	4b95      	ldr	r3, [pc, #596]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	e00d      	b.n	8002902 <HAL_RCC_OscConfig+0xa0e>
 80028e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	fa93 f2a3 	rbit	r2, r3
 80028f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b8e      	ldr	r3, [pc, #568]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002906:	2102      	movs	r1, #2
 8002908:	6011      	str	r1, [r2, #0]
 800290a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	fa92 f1a2 	rbit	r1, r2
 8002914:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002918:	6011      	str	r1, [r2, #0]
  return result;
 800291a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f002 021f 	and.w	r2, r2, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1a0      	bne.n	800287e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800293c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002944:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a7b      	ldr	r2, [pc, #492]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 81d9 	beq.w	8002d0e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295c:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	f000 81a6 	beq.w	8002cb6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b02      	cmp	r3, #2
 8002972:	f040 811e 	bne.w	8002bb2 <HAL_RCC_OscConfig+0xcbe>
 8002976:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800297a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800297e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	fa93 f2a3 	rbit	r2, r3
 800298a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800298e:	601a      	str	r2, [r3, #0]
  return result;
 8002990:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002994:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	461a      	mov	r2, r3
 80029a8:	2300      	movs	r3, #0
 80029aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff f98e 	bl	8001ccc <HAL_GetTick>
 80029b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b4:	e009      	b.n	80029ca <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b6:	f7ff f989 	bl	8001ccc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1a2      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 80029ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029e2:	601a      	str	r2, [r3, #0]
  return result;
 80029e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0xb10>
 80029fe:	4b4e      	ldr	r3, [pc, #312]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0xb48>
 8002a04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002a40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a54:	6011      	str	r1, [r2, #0]
  return result;
 8002a56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f002 021f 	and.w	r2, r2, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d19e      	bne.n	80029b6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a78:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f023 020f 	bic.w	r2, r3, #15
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	492c      	ldr	r1, [pc, #176]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a19      	ldr	r1, [r3, #32]
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	4925      	ldr	r1, [pc, #148]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ac0:	601a      	str	r2, [r3, #0]
  return result;
 8002ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ac6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2301      	movs	r3, #1
 8002adc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7ff f8f5 	bl	8001ccc <HAL_GetTick>
 8002ae2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae6:	e009      	b.n	8002afc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7ff f8f0 	bl	8001ccc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e109      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002afc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b14:	601a      	str	r2, [r3, #0]
  return result;
 8002b16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0xc48>
 8002b30:	4b01      	ldr	r3, [pc, #4]	; (8002b38 <HAL_RCC_OscConfig+0xc44>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	e01e      	b.n	8002b74 <HAL_RCC_OscConfig+0xc80>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0xe28>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b7c:	6011      	str	r1, [r2, #0]
 8002b7e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	fa92 f1a2 	rbit	r1, r2
 8002b88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b8c:	6011      	str	r1, [r2, #0]
  return result;
 8002b8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d09b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xbf4>
 8002bb0:	e0ad      	b.n	8002d0e <HAL_RCC_OscConfig+0xe1a>
 8002bb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bca:	601a      	str	r2, [r3, #0]
  return result;
 8002bcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	461a      	mov	r2, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7ff f870 	bl	8001ccc <HAL_GetTick>
 8002bec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7ff f86b 	bl	8001ccc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e084      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
 8002c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c1e:	601a      	str	r2, [r3, #0]
  return result;
 8002c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_OscConfig+0xd4c>
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_RCC_OscConfig+0xe28>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	e01b      	b.n	8002c78 <HAL_RCC_OscConfig+0xd84>
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f2a3 	rbit	r2, r3
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f107 0318 	add.w	r3, r7, #24
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_RCC_OscConfig+0xe28>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f107 0214 	add.w	r2, r7, #20
 8002c7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	f107 0214 	add.w	r2, r7, #20
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fa92 f1a2 	rbit	r1, r2
 8002c8c:	f107 0210 	add.w	r2, r7, #16
 8002c90:	6011      	str	r1, [r2, #0]
  return result;
 8002c92:	f107 0210 	add.w	r2, r7, #16
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	fab2 f282 	clz	r2, r2
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f002 021f 	and.w	r2, r2, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d19e      	bne.n	8002bf2 <HAL_RCC_OscConfig+0xcfe>
 8002cb4:	e02b      	b.n	8002d0e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e025      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCC_OscConfig+0xe28>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_RCC_OscConfig+0xe28>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002cd8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d111      	bne.n	8002d0a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ce6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d108      	bne.n	8002d0a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b09e      	sub	sp, #120	; 0x78
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e162      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b90      	ldr	r3, [pc, #576]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	498b      	ldr	r1, [pc, #556]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e14a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	497f      	ldr	r1, [pc, #508]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80dc 	beq.w	8002f4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d13c      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xf6>
 8002d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xa6>
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	e00f      	b.n	8002de6 <HAL_RCC_ClockConfig+0xc6>
 8002dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002de2:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002df4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002df6:	fab2 f282 	clz	r2, r2
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f002 021f 	and.w	r2, r2, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d17b      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0f3      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d13c      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x178>
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d102      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x128>
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e00f      	b.n	8002e68 <HAL_RCC_ClockConfig+0x148>
 8002e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
 8002e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e70:	fa92 f2a2 	rbit	r2, r2
 8002e74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e78:	fab2 f282 	clz	r2, r2
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	f042 0220 	orr.w	r2, r2, #32
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f002 021f 	and.w	r2, r2, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13a      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b2      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d102      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x1a0>
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e00d      	b.n	8002edc <HAL_RCC_ClockConfig+0x1bc>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	2302      	movs	r3, #2
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2202      	movs	r2, #2
 8002ede:	61ba      	str	r2, [r7, #24]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	fa92 f2a2 	rbit	r2, r2
 8002ee6:	617a      	str	r2, [r7, #20]
  return result;
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	fab2 f282 	clz	r2, r2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f042 0220 	orr.w	r2, r2, #32
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f002 021f 	and.w	r2, r2, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e079      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	491a      	ldr	r1, [pc, #104]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fed6 	bl	8001ccc <HAL_GetTick>
 8002f20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe fed2 	bl	8001ccc <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e061      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_ClockConfig+0x260>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d214      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4906      	ldr	r1, [pc, #24]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCC_ClockConfig+0x25c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e040      	b.n	8002ffe <HAL_RCC_ClockConfig+0x2de>
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	491a      	ldr	r1, [pc, #104]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fc2:	f000 f829 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_RCC_ClockConfig+0x2e8>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd0:	22f0      	movs	r2, #240	; 0xf0
 8002fd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	60fa      	str	r2, [r7, #12]
  return result;
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	40d3      	lsrs	r3, r2
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x2ec>)
 8002fe8:	5cd3      	ldrb	r3, [r2, r3]
 8002fea:	fa21 f303 	lsr.w	r3, r1, r3
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_RCC_ClockConfig+0x2f0>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_ClockConfig+0x2f4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fe24 	bl	8001c44 <HAL_InitTick>
  
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3778      	adds	r7, #120	; 0x78
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08004d20 	.word	0x08004d20
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b08b      	sub	sp, #44	; 0x2c
 800301c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x30>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x36>
 8003046:	e03f      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e03f      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003054:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003058:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	fa92 f2a2 	rbit	r2, r2
 8003060:	607a      	str	r2, [r7, #4]
  return result;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	40d3      	lsrs	r3, r2
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	220f      	movs	r2, #15
 800307c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	fa92 f2a2 	rbit	r2, r2
 8003084:	60fa      	str	r2, [r7, #12]
  return result;
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	40d3      	lsrs	r3, r2
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030a0:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	e007      	b.n	80030c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	623b      	str	r3, [r7, #32]
      break;
 80030c6:	e002      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030ca:	623b      	str	r3, [r7, #32]
      break;
 80030cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ce:	6a3b      	ldr	r3, [r7, #32]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	372c      	adds	r7, #44	; 0x2c
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40021000 	.word	0x40021000
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	08004d30 	.word	0x08004d30
 80030e8:	08004d40 	.word	0x08004d40

080030ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b092      	sub	sp, #72	; 0x48
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80d4 	beq.w	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003110:	4b4e      	ldr	r3, [pc, #312]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10e      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4a4a      	ldr	r2, [pc, #296]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	61d3      	str	r3, [r2, #28]
 8003128:	4b48      	ldr	r3, [pc, #288]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003146:	4b42      	ldr	r3, [pc, #264]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a41      	ldr	r2, [pc, #260]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003152:	f7fe fdbb 	bl	8001ccc <HAL_GetTick>
 8003156:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	e008      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315a:	f7fe fdb7 	bl	8001ccc <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	; 0x64
 8003166:	d901      	bls.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1d6      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8084 	beq.w	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003194:	429a      	cmp	r2, r3
 8003196:	d07c      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	2301      	movs	r3, #1
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	461a      	mov	r2, r3
 80031e6:	2300      	movs	r3, #0
 80031e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ea:	4a18      	ldr	r2, [pc, #96]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04b      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fd67 	bl	8001ccc <HAL_GetTick>
 80031fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	e00a      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fe fd63 	bl	8001ccc <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e180      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003218:	2302      	movs	r3, #2
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	61fb      	str	r3, [r7, #28]
  return result;
 8003230:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d108      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003246:	4b01      	ldr	r3, [pc, #4]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	e00d      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	10908100 	.word	0x10908100
 8003258:	2302      	movs	r3, #2
 800325a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	4ba0      	ldr	r3, [pc, #640]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2202      	movs	r2, #2
 800326a:	613a      	str	r2, [r7, #16]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	fa92 f2a2 	rbit	r2, r2
 8003272:	60fa      	str	r2, [r7, #12]
  return result;
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	fab2 f282 	clz	r2, r2
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	f002 021f 	and.w	r2, r2, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f202 	lsl.w	r2, r1, r2
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0b7      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003292:	4b95      	ldr	r3, [pc, #596]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4992      	ldr	r1, [pc, #584]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b8e      	ldr	r3, [pc, #568]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a8d      	ldr	r2, [pc, #564]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c4:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	f023 0203 	bic.w	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4985      	ldr	r1, [pc, #532]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e2:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	497e      	ldr	r1, [pc, #504]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003300:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	4976      	ldr	r1, [pc, #472]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f023 0210 	bic.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	496f      	ldr	r1, [pc, #444]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	4967      	ldr	r1, [pc, #412]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f023 0220 	bic.w	r2, r3, #32
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4960      	ldr	r1, [pc, #384]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003378:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	4958      	ldr	r1, [pc, #352]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003396:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4951      	ldr	r1, [pc, #324]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4949      	ldr	r1, [pc, #292]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d2:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4942      	ldr	r1, [pc, #264]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033f0:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	493a      	ldr	r1, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800340e:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	4933      	ldr	r1, [pc, #204]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800342c:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	492b      	ldr	r1, [pc, #172]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4924      	ldr	r1, [pc, #144]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	491c      	ldr	r1, [pc, #112]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	4915      	ldr	r1, [pc, #84]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	490d      	ldr	r1, [pc, #52]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	4906      	ldr	r1, [pc, #24]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80034e0:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	e002      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	490b      	ldr	r1, [pc, #44]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003512:	4904      	ldr	r1, [pc, #16]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003514:	4313      	orrs	r3, r2
 8003516:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3748      	adds	r7, #72	; 0x48
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000

08003528 <LL_ADC_REG_SetSequencerLength>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f023 020f 	bic.w	r2, r3, #15
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <LL_ADC_IsEnabled>:
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <LL_ADC_CommonInit+0xa8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10f      	bne.n	80035aa <LL_ADC_CommonInit+0x36>
 800358a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800358e:	f7ff ffde 	bl	800354e <LL_ADC_IsEnabled>
 8003592:	4604      	mov	r4, r0
 8003594:	4822      	ldr	r0, [pc, #136]	; (8003620 <LL_ADC_CommonInit+0xac>)
 8003596:	f7ff ffda 	bl	800354e <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	4323      	orrs	r3, r4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e00d      	b.n	80035c6 <LL_ADC_CommonInit+0x52>
 80035aa:	481e      	ldr	r0, [pc, #120]	; (8003624 <LL_ADC_CommonInit+0xb0>)
 80035ac:	f7ff ffcf 	bl	800354e <LL_ADC_IsEnabled>
 80035b0:	4604      	mov	r4, r0
 80035b2:	481d      	ldr	r0, [pc, #116]	; (8003628 <LL_ADC_CommonInit+0xb4>)
 80035b4:	f7ff ffcb 	bl	800354e <LL_ADC_IsEnabled>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4323      	orrs	r3, r4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d020      	beq.n	800360c <LL_ADC_CommonInit+0x98>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <LL_ADC_CommonInit+0x84>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <LL_ADC_CommonInit+0xb8>)
 80035d8:	4013      	ands	r3, r2
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	6852      	ldr	r2, [r2, #4]
 80035e2:	4311      	orrs	r1, r2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	4311      	orrs	r1, r2
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	68d2      	ldr	r2, [r2, #12]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	e00b      	b.n	8003610 <LL_ADC_CommonInit+0x9c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <LL_ADC_CommonInit+0xb8>)
 80035fe:	4013      	ands	r3, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e001      	b.n	8003610 <LL_ADC_CommonInit+0x9c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	bf00      	nop
 800361c:	50000300 	.word	0x50000300
 8003620:	50000100 	.word	0x50000100
 8003624:	50000400 	.word	0x50000400
 8003628:	50000500 	.word	0x50000500
 800362c:	fffc30e0 	.word	0xfffc30e0

08003630 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff85 	bl	800354e <LL_ADC_IsEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d111      	bne.n	800366e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003652:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6811      	ldr	r1, [r2, #0]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6852      	ldr	r2, [r2, #4]
 800365e:	4311      	orrs	r1, r2
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	6892      	ldr	r2, [r2, #8]
 8003664:	430a      	orrs	r2, r1
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	e001      	b.n	8003672 <LL_ADC_Init+0x42>
    
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff5f 	bl	800354e <LL_ADC_IsEnabled>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d132      	bne.n	80036fc <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <LL_ADC_REG_Init+0x90>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6892      	ldr	r2, [r2, #8]
 80036ae:	4311      	orrs	r1, r2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	4311      	orrs	r1, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	6912      	ldr	r2, [r2, #16]
 80036ba:	4311      	orrs	r1, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	6952      	ldr	r2, [r2, #20]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e011      	b.n	80036ee <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <LL_ADC_REG_Init+0x90>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	4311      	orrs	r1, r2
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	6912      	ldr	r2, [r2, #16]
 80036e0:	4311      	orrs	r1, r2
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6952      	ldr	r2, [r2, #20]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }
    
    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff17 	bl	8003528 <LL_ADC_REG_SetSequencerLength>
 80036fa:	e001      	b.n	8003700 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	fff0c03c 	.word	0xfff0c03c

08003710 <LL_DAC_IsEnabled>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	429a      	cmp	r2, r3
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff ffd5 	bl	8003710 <LL_DAC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d13a      	bne.n	80037e2 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01e      	beq.n	80037b2 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	f640 71fa 	movw	r1, #4090	; 0xffa
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	401a      	ands	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4319      	orrs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4319      	orrs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4319      	orrs	r1, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	431a      	orrs	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e019      	b.n	80037e6 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	21fa      	movs	r1, #250	; 0xfa
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4319      	orrs	r1, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	431a      	orrs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e001      	b.n	80037e6 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	613b      	str	r3, [r7, #16]
  return result;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2103      	movs	r1, #3
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	61bb      	str	r3, [r7, #24]
  return result;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	43db      	mvns	r3, r3
 8003862:	401a      	ands	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800387e:	b480      	push	{r7}
 8003880:	b089      	sub	sp, #36	; 0x24
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	613b      	str	r3, [r7, #16]
  return result;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	2103      	movs	r1, #3
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	401a      	ands	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	61bb      	str	r3, [r7, #24]
  return result;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80038d0:	bf00      	nop
 80038d2:	3724      	adds	r7, #36	; 0x24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	613b      	str	r3, [r7, #16]
  return result;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2103      	movs	r1, #3
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	401a      	ands	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	61bb      	str	r3, [r7, #24]
  return result;
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	60da      	str	r2, [r3, #12]
}
 800392e:	bf00      	nop
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800393a:	b480      	push	{r7}
 800393c:	b089      	sub	sp, #36	; 0x24
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	613b      	str	r3, [r7, #16]
  return result;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	210f      	movs	r1, #15
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	401a      	ands	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	61bb      	str	r3, [r7, #24]
  return result;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	431a      	orrs	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800398c:	bf00      	nop
 800398e:	3724      	adds	r7, #36	; 0x24
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	613b      	str	r3, [r7, #16]
  return result;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	210f      	movs	r1, #15
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	401a      	ands	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	61bb      	str	r3, [r7, #24]
  return result;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80039ee:	bf00      	nop
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	613b      	str	r3, [r7, #16]
  return result;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003a1c:	e051      	b.n	8003ac2 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d043      	beq.n	8003abc <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d003      	beq.n	8003a44 <LL_GPIO_Init+0x4a>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d10e      	bne.n	8003a62 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	69b9      	ldr	r1, [r7, #24]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff16 	bl	800387e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fef6 	bl	800384e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	461a      	mov	r2, r3
 8003a68:	69b9      	ldr	r1, [r7, #24]
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff36 	bl	80038dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11a      	bne.n	8003aae <LL_GPIO_Init+0xb4>
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	60bb      	str	r3, [r7, #8]
  return result;
 8003a84:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d807      	bhi.n	8003aa0 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	461a      	mov	r2, r3
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff4e 	bl	800393a <LL_GPIO_SetAFPin_0_7>
 8003a9e:	e006      	b.n	8003aae <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff75 	bl	8003998 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	69b9      	ldr	r1, [r7, #24]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe9a 	bl	80037f0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1a6      	bne.n	8003a1e <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <LL_TIM_SetPrescaler>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_TIM_SetAutoReload>:
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_TIM_SetRepetitionCounter>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	615a      	str	r2, [r3, #20]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <LL_TIM_Init+0x110>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <LL_TIM_Init+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d00f      	beq.n	8003b90 <LL_TIM_Init+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3c      	ldr	r2, [pc, #240]	; (8003c64 <LL_TIM_Init+0x114>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <LL_TIM_Init+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <LL_TIM_Init+0x118>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <LL_TIM_Init+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <LL_TIM_Init+0x11c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <LL_TIM_Init+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a39      	ldr	r2, [pc, #228]	; (8003c70 <LL_TIM_Init+0x120>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d106      	bne.n	8003b9e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <LL_TIM_Init+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01f      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d01b      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <LL_TIM_Init+0x114>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d017      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <LL_TIM_Init+0x118>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <LL_TIM_Init+0x11c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00f      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <LL_TIM_Init+0x124>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00b      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <LL_TIM_Init+0x128>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <LL_TIM_Init+0x12c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <LL_TIM_Init+0x96>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a23      	ldr	r2, [pc, #140]	; (8003c70 <LL_TIM_Init+0x120>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d106      	bne.n	8003bf4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff78 	bl	8003af6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff64 	bl	8003ada <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <LL_TIM_Init+0x110>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <LL_TIM_Init+0xf2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <LL_TIM_Init+0x11c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <LL_TIM_Init+0xf2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <LL_TIM_Init+0x124>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <LL_TIM_Init+0xf2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <LL_TIM_Init+0x128>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <LL_TIM_Init+0xf2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <LL_TIM_Init+0x12c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <LL_TIM_Init+0xf2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <LL_TIM_Init+0x120>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d105      	bne.n	8003c4e <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff62 	bl	8003b12 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ff6d 	bl	8003b2e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40013400 	.word	0x40013400
 8003c70:	40015000 	.word	0x40015000
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	40014800 	.word	0x40014800

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4e0d      	ldr	r6, [pc, #52]	; (8003cb8 <__libc_init_array+0x38>)
 8003c84:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c86:	1ba4      	subs	r4, r4, r6
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	2500      	movs	r5, #0
 8003c8c:	42a5      	cmp	r5, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	4e0b      	ldr	r6, [pc, #44]	; (8003cc0 <__libc_init_array+0x40>)
 8003c92:	4c0c      	ldr	r4, [pc, #48]	; (8003cc4 <__libc_init_array+0x44>)
 8003c94:	f001 f832 	bl	8004cfc <_init>
 8003c98:	1ba4      	subs	r4, r4, r6
 8003c9a:	10a4      	asrs	r4, r4, #2
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	42a5      	cmp	r5, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ca8:	4798      	blx	r3
 8003caa:	3501      	adds	r5, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cb2:	4798      	blx	r3
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08004f28 	.word	0x08004f28
 8003cbc:	08004f28 	.word	0x08004f28
 8003cc0:	08004f28 	.word	0x08004f28
 8003cc4:	08004f2c 	.word	0x08004f2c

08003cc8 <memset>:
 8003cc8:	4402      	add	r2, r0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <sin>:
 8003cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cda:	ec51 0b10 	vmov	r0, r1, d0
 8003cde:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <sin+0x88>)
 8003ce0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	dc07      	bgt.n	8003cf8 <sin+0x20>
 8003ce8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003d58 <sin+0x80>
 8003cec:	2000      	movs	r0, #0
 8003cee:	f000 fe37 	bl	8004960 <__kernel_sin>
 8003cf2:	ec51 0b10 	vmov	r0, r1, d0
 8003cf6:	e007      	b.n	8003d08 <sin+0x30>
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <sin+0x8c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	dd09      	ble.n	8003d12 <sin+0x3a>
 8003cfe:	ee10 2a10 	vmov	r2, s0
 8003d02:	460b      	mov	r3, r1
 8003d04:	f7fc fa6c 	bl	80001e0 <__aeabi_dsub>
 8003d08:	ec41 0b10 	vmov	d0, r0, r1
 8003d0c:	b005      	add	sp, #20
 8003d0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d12:	4668      	mov	r0, sp
 8003d14:	f000 f828 	bl	8003d68 <__ieee754_rem_pio2>
 8003d18:	f000 0003 	and.w	r0, r0, #3
 8003d1c:	2801      	cmp	r0, #1
 8003d1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d22:	ed9d 0b00 	vldr	d0, [sp]
 8003d26:	d004      	beq.n	8003d32 <sin+0x5a>
 8003d28:	2802      	cmp	r0, #2
 8003d2a:	d005      	beq.n	8003d38 <sin+0x60>
 8003d2c:	b970      	cbnz	r0, 8003d4c <sin+0x74>
 8003d2e:	2001      	movs	r0, #1
 8003d30:	e7dd      	b.n	8003cee <sin+0x16>
 8003d32:	f000 fa0d 	bl	8004150 <__kernel_cos>
 8003d36:	e7dc      	b.n	8003cf2 <sin+0x1a>
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f000 fe11 	bl	8004960 <__kernel_sin>
 8003d3e:	ec53 2b10 	vmov	r2, r3, d0
 8003d42:	ee10 0a10 	vmov	r0, s0
 8003d46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d4a:	e7dd      	b.n	8003d08 <sin+0x30>
 8003d4c:	f000 fa00 	bl	8004150 <__kernel_cos>
 8003d50:	e7f5      	b.n	8003d3e <sin+0x66>
 8003d52:	bf00      	nop
 8003d54:	f3af 8000 	nop.w
	...
 8003d60:	3fe921fb 	.word	0x3fe921fb
 8003d64:	7fefffff 	.word	0x7fefffff

08003d68 <__ieee754_rem_pio2>:
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	ec57 6b10 	vmov	r6, r7, d0
 8003d70:	4bc3      	ldr	r3, [pc, #780]	; (8004080 <__ieee754_rem_pio2+0x318>)
 8003d72:	b08d      	sub	sp, #52	; 0x34
 8003d74:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003d78:	4598      	cmp	r8, r3
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	9704      	str	r7, [sp, #16]
 8003d7e:	dc07      	bgt.n	8003d90 <__ieee754_rem_pio2+0x28>
 8003d80:	2200      	movs	r2, #0
 8003d82:	2300      	movs	r3, #0
 8003d84:	ed84 0b00 	vstr	d0, [r4]
 8003d88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003d8c:	2500      	movs	r5, #0
 8003d8e:	e027      	b.n	8003de0 <__ieee754_rem_pio2+0x78>
 8003d90:	4bbc      	ldr	r3, [pc, #752]	; (8004084 <__ieee754_rem_pio2+0x31c>)
 8003d92:	4598      	cmp	r8, r3
 8003d94:	dc75      	bgt.n	8003e82 <__ieee754_rem_pio2+0x11a>
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	4dbb      	ldr	r5, [pc, #748]	; (8004088 <__ieee754_rem_pio2+0x320>)
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	ee10 0a10 	vmov	r0, s0
 8003da0:	a3a9      	add	r3, pc, #676	; (adr r3, 8004048 <__ieee754_rem_pio2+0x2e0>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	4639      	mov	r1, r7
 8003da8:	dd36      	ble.n	8003e18 <__ieee754_rem_pio2+0xb0>
 8003daa:	f7fc fa19 	bl	80001e0 <__aeabi_dsub>
 8003dae:	45a8      	cmp	r8, r5
 8003db0:	4606      	mov	r6, r0
 8003db2:	460f      	mov	r7, r1
 8003db4:	d018      	beq.n	8003de8 <__ieee754_rem_pio2+0x80>
 8003db6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004050 <__ieee754_rem_pio2+0x2e8>)
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f7fc fa10 	bl	80001e0 <__aeabi_dsub>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	e9c4 2300 	strd	r2, r3, [r4]
 8003dc8:	4630      	mov	r0, r6
 8003dca:	4639      	mov	r1, r7
 8003dcc:	f7fc fa08 	bl	80001e0 <__aeabi_dsub>
 8003dd0:	a39f      	add	r3, pc, #636	; (adr r3, 8004050 <__ieee754_rem_pio2+0x2e8>)
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f7fc fa03 	bl	80001e0 <__aeabi_dsub>
 8003dda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dde:	2501      	movs	r5, #1
 8003de0:	4628      	mov	r0, r5
 8003de2:	b00d      	add	sp, #52	; 0x34
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	a39b      	add	r3, pc, #620	; (adr r3, 8004058 <__ieee754_rem_pio2+0x2f0>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc f9f7 	bl	80001e0 <__aeabi_dsub>
 8003df2:	a39b      	add	r3, pc, #620	; (adr r3, 8004060 <__ieee754_rem_pio2+0x2f8>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	4606      	mov	r6, r0
 8003dfa:	460f      	mov	r7, r1
 8003dfc:	f7fc f9f0 	bl	80001e0 <__aeabi_dsub>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	e9c4 2300 	strd	r2, r3, [r4]
 8003e08:	4630      	mov	r0, r6
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	f7fc f9e8 	bl	80001e0 <__aeabi_dsub>
 8003e10:	a393      	add	r3, pc, #588	; (adr r3, 8004060 <__ieee754_rem_pio2+0x2f8>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	e7de      	b.n	8003dd6 <__ieee754_rem_pio2+0x6e>
 8003e18:	f7fc f9e4 	bl	80001e4 <__adddf3>
 8003e1c:	45a8      	cmp	r8, r5
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460f      	mov	r7, r1
 8003e22:	d016      	beq.n	8003e52 <__ieee754_rem_pio2+0xea>
 8003e24:	a38a      	add	r3, pc, #552	; (adr r3, 8004050 <__ieee754_rem_pio2+0x2e8>)
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f7fc f9db 	bl	80001e4 <__adddf3>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	e9c4 2300 	strd	r2, r3, [r4]
 8003e36:	4630      	mov	r0, r6
 8003e38:	4639      	mov	r1, r7
 8003e3a:	f7fc f9d1 	bl	80001e0 <__aeabi_dsub>
 8003e3e:	a384      	add	r3, pc, #528	; (adr r3, 8004050 <__ieee754_rem_pio2+0x2e8>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc f9ce 	bl	80001e4 <__adddf3>
 8003e48:	f04f 35ff 	mov.w	r5, #4294967295
 8003e4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e50:	e7c6      	b.n	8003de0 <__ieee754_rem_pio2+0x78>
 8003e52:	a381      	add	r3, pc, #516	; (adr r3, 8004058 <__ieee754_rem_pio2+0x2f0>)
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f7fc f9c4 	bl	80001e4 <__adddf3>
 8003e5c:	a380      	add	r3, pc, #512	; (adr r3, 8004060 <__ieee754_rem_pio2+0x2f8>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	4606      	mov	r6, r0
 8003e64:	460f      	mov	r7, r1
 8003e66:	f7fc f9bd 	bl	80001e4 <__adddf3>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	e9c4 2300 	strd	r2, r3, [r4]
 8003e72:	4630      	mov	r0, r6
 8003e74:	4639      	mov	r1, r7
 8003e76:	f7fc f9b3 	bl	80001e0 <__aeabi_dsub>
 8003e7a:	a379      	add	r3, pc, #484	; (adr r3, 8004060 <__ieee754_rem_pio2+0x2f8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	e7e0      	b.n	8003e44 <__ieee754_rem_pio2+0xdc>
 8003e82:	4b82      	ldr	r3, [pc, #520]	; (800408c <__ieee754_rem_pio2+0x324>)
 8003e84:	4598      	cmp	r8, r3
 8003e86:	f300 80d0 	bgt.w	800402a <__ieee754_rem_pio2+0x2c2>
 8003e8a:	f000 fe23 	bl	8004ad4 <fabs>
 8003e8e:	ec57 6b10 	vmov	r6, r7, d0
 8003e92:	ee10 0a10 	vmov	r0, s0
 8003e96:	a374      	add	r3, pc, #464	; (adr r3, 8004068 <__ieee754_rem_pio2+0x300>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	f7fc fb57 	bl	8000550 <__aeabi_dmul>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4b7a      	ldr	r3, [pc, #488]	; (8004090 <__ieee754_rem_pio2+0x328>)
 8003ea6:	f7fc f99d 	bl	80001e4 <__adddf3>
 8003eaa:	f7fc fdeb 	bl	8000a84 <__aeabi_d2iz>
 8003eae:	4605      	mov	r5, r0
 8003eb0:	f7fc fae4 	bl	800047c <__aeabi_i2d>
 8003eb4:	a364      	add	r3, pc, #400	; (adr r3, 8004048 <__ieee754_rem_pio2+0x2e0>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ebe:	f7fc fb47 	bl	8000550 <__aeabi_dmul>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	4639      	mov	r1, r7
 8003eca:	f7fc f989 	bl	80001e0 <__aeabi_dsub>
 8003ece:	a360      	add	r3, pc, #384	; (adr r3, 8004050 <__ieee754_rem_pio2+0x2e8>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	4682      	mov	sl, r0
 8003ed6:	468b      	mov	fp, r1
 8003ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003edc:	f7fc fb38 	bl	8000550 <__aeabi_dmul>
 8003ee0:	2d1f      	cmp	r5, #31
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460f      	mov	r7, r1
 8003ee6:	dc0c      	bgt.n	8003f02 <__ieee754_rem_pio2+0x19a>
 8003ee8:	1e6a      	subs	r2, r5, #1
 8003eea:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <__ieee754_rem_pio2+0x32c>)
 8003eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef0:	4543      	cmp	r3, r8
 8003ef2:	d006      	beq.n	8003f02 <__ieee754_rem_pio2+0x19a>
 8003ef4:	4632      	mov	r2, r6
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	4650      	mov	r0, sl
 8003efa:	4659      	mov	r1, fp
 8003efc:	f7fc f970 	bl	80001e0 <__aeabi_dsub>
 8003f00:	e00e      	b.n	8003f20 <__ieee754_rem_pio2+0x1b8>
 8003f02:	4632      	mov	r2, r6
 8003f04:	463b      	mov	r3, r7
 8003f06:	4650      	mov	r0, sl
 8003f08:	4659      	mov	r1, fp
 8003f0a:	f7fc f969 	bl	80001e0 <__aeabi_dsub>
 8003f0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003f12:	9305      	str	r3, [sp, #20]
 8003f14:	9a05      	ldr	r2, [sp, #20]
 8003f16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	dc02      	bgt.n	8003f26 <__ieee754_rem_pio2+0x1be>
 8003f20:	e9c4 0100 	strd	r0, r1, [r4]
 8003f24:	e039      	b.n	8003f9a <__ieee754_rem_pio2+0x232>
 8003f26:	a34c      	add	r3, pc, #304	; (adr r3, 8004058 <__ieee754_rem_pio2+0x2f0>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f30:	f7fc fb0e 	bl	8000550 <__aeabi_dmul>
 8003f34:	4606      	mov	r6, r0
 8003f36:	460f      	mov	r7, r1
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	4659      	mov	r1, fp
 8003f40:	f7fc f94e 	bl	80001e0 <__aeabi_dsub>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4680      	mov	r8, r0
 8003f4a:	4689      	mov	r9, r1
 8003f4c:	4650      	mov	r0, sl
 8003f4e:	4659      	mov	r1, fp
 8003f50:	f7fc f946 	bl	80001e0 <__aeabi_dsub>
 8003f54:	4632      	mov	r2, r6
 8003f56:	463b      	mov	r3, r7
 8003f58:	f7fc f942 	bl	80001e0 <__aeabi_dsub>
 8003f5c:	a340      	add	r3, pc, #256	; (adr r3, 8004060 <__ieee754_rem_pio2+0x2f8>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	4606      	mov	r6, r0
 8003f64:	460f      	mov	r7, r1
 8003f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f6a:	f7fc faf1 	bl	8000550 <__aeabi_dmul>
 8003f6e:	4632      	mov	r2, r6
 8003f70:	463b      	mov	r3, r7
 8003f72:	f7fc f935 	bl	80001e0 <__aeabi_dsub>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	460f      	mov	r7, r1
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4649      	mov	r1, r9
 8003f82:	f7fc f92d 	bl	80001e0 <__aeabi_dsub>
 8003f86:	9a05      	ldr	r2, [sp, #20]
 8003f88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b31      	cmp	r3, #49	; 0x31
 8003f90:	dc20      	bgt.n	8003fd4 <__ieee754_rem_pio2+0x26c>
 8003f92:	e9c4 0100 	strd	r0, r1, [r4]
 8003f96:	46c2      	mov	sl, r8
 8003f98:	46cb      	mov	fp, r9
 8003f9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003f9e:	4650      	mov	r0, sl
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	f7fc f91b 	bl	80001e0 <__aeabi_dsub>
 8003faa:	463b      	mov	r3, r7
 8003fac:	4632      	mov	r2, r6
 8003fae:	f7fc f917 	bl	80001e0 <__aeabi_dsub>
 8003fb2:	9b04      	ldr	r3, [sp, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fba:	f6bf af11 	bge.w	8003de0 <__ieee754_rem_pio2+0x78>
 8003fbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	f8c4 8000 	str.w	r8, [r4]
 8003fc8:	60a0      	str	r0, [r4, #8]
 8003fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fce:	60e3      	str	r3, [r4, #12]
 8003fd0:	426d      	negs	r5, r5
 8003fd2:	e705      	b.n	8003de0 <__ieee754_rem_pio2+0x78>
 8003fd4:	a326      	add	r3, pc, #152	; (adr r3, 8004070 <__ieee754_rem_pio2+0x308>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fde:	f7fc fab7 	bl	8000550 <__aeabi_dmul>
 8003fe2:	4606      	mov	r6, r0
 8003fe4:	460f      	mov	r7, r1
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4640      	mov	r0, r8
 8003fec:	4649      	mov	r1, r9
 8003fee:	f7fc f8f7 	bl	80001e0 <__aeabi_dsub>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4682      	mov	sl, r0
 8003ff8:	468b      	mov	fp, r1
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	f7fc f8ef 	bl	80001e0 <__aeabi_dsub>
 8004002:	4632      	mov	r2, r6
 8004004:	463b      	mov	r3, r7
 8004006:	f7fc f8eb 	bl	80001e0 <__aeabi_dsub>
 800400a:	a31b      	add	r3, pc, #108	; (adr r3, 8004078 <__ieee754_rem_pio2+0x310>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	4606      	mov	r6, r0
 8004012:	460f      	mov	r7, r1
 8004014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004018:	f7fc fa9a 	bl	8000550 <__aeabi_dmul>
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	f7fc f8de 	bl	80001e0 <__aeabi_dsub>
 8004024:	4606      	mov	r6, r0
 8004026:	460f      	mov	r7, r1
 8004028:	e764      	b.n	8003ef4 <__ieee754_rem_pio2+0x18c>
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <__ieee754_rem_pio2+0x330>)
 800402c:	4598      	cmp	r8, r3
 800402e:	dd35      	ble.n	800409c <__ieee754_rem_pio2+0x334>
 8004030:	ee10 2a10 	vmov	r2, s0
 8004034:	463b      	mov	r3, r7
 8004036:	4630      	mov	r0, r6
 8004038:	4639      	mov	r1, r7
 800403a:	f7fc f8d1 	bl	80001e0 <__aeabi_dsub>
 800403e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004042:	e9c4 0100 	strd	r0, r1, [r4]
 8004046:	e6a1      	b.n	8003d8c <__ieee754_rem_pio2+0x24>
 8004048:	54400000 	.word	0x54400000
 800404c:	3ff921fb 	.word	0x3ff921fb
 8004050:	1a626331 	.word	0x1a626331
 8004054:	3dd0b461 	.word	0x3dd0b461
 8004058:	1a600000 	.word	0x1a600000
 800405c:	3dd0b461 	.word	0x3dd0b461
 8004060:	2e037073 	.word	0x2e037073
 8004064:	3ba3198a 	.word	0x3ba3198a
 8004068:	6dc9c883 	.word	0x6dc9c883
 800406c:	3fe45f30 	.word	0x3fe45f30
 8004070:	2e000000 	.word	0x2e000000
 8004074:	3ba3198a 	.word	0x3ba3198a
 8004078:	252049c1 	.word	0x252049c1
 800407c:	397b839a 	.word	0x397b839a
 8004080:	3fe921fb 	.word	0x3fe921fb
 8004084:	4002d97b 	.word	0x4002d97b
 8004088:	3ff921fb 	.word	0x3ff921fb
 800408c:	413921fb 	.word	0x413921fb
 8004090:	3fe00000 	.word	0x3fe00000
 8004094:	08004d50 	.word	0x08004d50
 8004098:	7fefffff 	.word	0x7fefffff
 800409c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80040a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80040a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80040a8:	4630      	mov	r0, r6
 80040aa:	460f      	mov	r7, r1
 80040ac:	f7fc fcea 	bl	8000a84 <__aeabi_d2iz>
 80040b0:	f7fc f9e4 	bl	800047c <__aeabi_i2d>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4630      	mov	r0, r6
 80040ba:	4639      	mov	r1, r7
 80040bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80040c0:	f7fc f88e 	bl	80001e0 <__aeabi_dsub>
 80040c4:	2200      	movs	r2, #0
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <__ieee754_rem_pio2+0x3dc>)
 80040c8:	f7fc fa42 	bl	8000550 <__aeabi_dmul>
 80040cc:	460f      	mov	r7, r1
 80040ce:	4606      	mov	r6, r0
 80040d0:	f7fc fcd8 	bl	8000a84 <__aeabi_d2iz>
 80040d4:	f7fc f9d2 	bl	800047c <__aeabi_i2d>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4630      	mov	r0, r6
 80040de:	4639      	mov	r1, r7
 80040e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040e4:	f7fc f87c 	bl	80001e0 <__aeabi_dsub>
 80040e8:	2200      	movs	r2, #0
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <__ieee754_rem_pio2+0x3dc>)
 80040ec:	f7fc fa30 	bl	8000550 <__aeabi_dmul>
 80040f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80040f8:	f04f 0803 	mov.w	r8, #3
 80040fc:	2600      	movs	r6, #0
 80040fe:	2700      	movs	r7, #0
 8004100:	4632      	mov	r2, r6
 8004102:	463b      	mov	r3, r7
 8004104:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004108:	f108 3aff 	add.w	sl, r8, #4294967295
 800410c:	f7fc fc88 	bl	8000a20 <__aeabi_dcmpeq>
 8004110:	b9b0      	cbnz	r0, 8004140 <__ieee754_rem_pio2+0x3d8>
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <__ieee754_rem_pio2+0x3e0>)
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	2302      	movs	r3, #2
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	462a      	mov	r2, r5
 800411c:	4643      	mov	r3, r8
 800411e:	4621      	mov	r1, r4
 8004120:	a806      	add	r0, sp, #24
 8004122:	f000 f8dd 	bl	80042e0 <__kernel_rem_pio2>
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	4605      	mov	r5, r0
 800412c:	f6bf ae58 	bge.w	8003de0 <__ieee754_rem_pio2+0x78>
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004136:	6063      	str	r3, [r4, #4]
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800413e:	e746      	b.n	8003fce <__ieee754_rem_pio2+0x266>
 8004140:	46d0      	mov	r8, sl
 8004142:	e7dd      	b.n	8004100 <__ieee754_rem_pio2+0x398>
 8004144:	41700000 	.word	0x41700000
 8004148:	08004dd0 	.word	0x08004dd0
 800414c:	00000000 	.word	0x00000000

08004150 <__kernel_cos>:
 8004150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004154:	ec59 8b10 	vmov	r8, r9, d0
 8004158:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800415c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004160:	ed2d 8b02 	vpush	{d8}
 8004164:	eeb0 8a41 	vmov.f32	s16, s2
 8004168:	eef0 8a61 	vmov.f32	s17, s3
 800416c:	da07      	bge.n	800417e <__kernel_cos+0x2e>
 800416e:	ee10 0a10 	vmov	r0, s0
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc fc86 	bl	8000a84 <__aeabi_d2iz>
 8004178:	2800      	cmp	r0, #0
 800417a:	f000 8089 	beq.w	8004290 <__kernel_cos+0x140>
 800417e:	4642      	mov	r2, r8
 8004180:	464b      	mov	r3, r9
 8004182:	4640      	mov	r0, r8
 8004184:	4649      	mov	r1, r9
 8004186:	f7fc f9e3 	bl	8000550 <__aeabi_dmul>
 800418a:	2200      	movs	r2, #0
 800418c:	4b4e      	ldr	r3, [pc, #312]	; (80042c8 <__kernel_cos+0x178>)
 800418e:	4604      	mov	r4, r0
 8004190:	460d      	mov	r5, r1
 8004192:	f7fc f9dd 	bl	8000550 <__aeabi_dmul>
 8004196:	a340      	add	r3, pc, #256	; (adr r3, 8004298 <__kernel_cos+0x148>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	4682      	mov	sl, r0
 800419e:	468b      	mov	fp, r1
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7fc f9d4 	bl	8000550 <__aeabi_dmul>
 80041a8:	a33d      	add	r3, pc, #244	; (adr r3, 80042a0 <__kernel_cos+0x150>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc f819 	bl	80001e4 <__adddf3>
 80041b2:	4622      	mov	r2, r4
 80041b4:	462b      	mov	r3, r5
 80041b6:	f7fc f9cb 	bl	8000550 <__aeabi_dmul>
 80041ba:	a33b      	add	r3, pc, #236	; (adr r3, 80042a8 <__kernel_cos+0x158>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f80e 	bl	80001e0 <__aeabi_dsub>
 80041c4:	4622      	mov	r2, r4
 80041c6:	462b      	mov	r3, r5
 80041c8:	f7fc f9c2 	bl	8000550 <__aeabi_dmul>
 80041cc:	a338      	add	r3, pc, #224	; (adr r3, 80042b0 <__kernel_cos+0x160>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f807 	bl	80001e4 <__adddf3>
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	f7fc f9b9 	bl	8000550 <__aeabi_dmul>
 80041de:	a336      	add	r3, pc, #216	; (adr r3, 80042b8 <__kernel_cos+0x168>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fb fffc 	bl	80001e0 <__aeabi_dsub>
 80041e8:	4622      	mov	r2, r4
 80041ea:	462b      	mov	r3, r5
 80041ec:	f7fc f9b0 	bl	8000550 <__aeabi_dmul>
 80041f0:	a333      	add	r3, pc, #204	; (adr r3, 80042c0 <__kernel_cos+0x170>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fb fff5 	bl	80001e4 <__adddf3>
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	f7fc f9a7 	bl	8000550 <__aeabi_dmul>
 8004202:	4622      	mov	r2, r4
 8004204:	462b      	mov	r3, r5
 8004206:	f7fc f9a3 	bl	8000550 <__aeabi_dmul>
 800420a:	ec53 2b18 	vmov	r2, r3, d8
 800420e:	4604      	mov	r4, r0
 8004210:	460d      	mov	r5, r1
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fc f99b 	bl	8000550 <__aeabi_dmul>
 800421a:	460b      	mov	r3, r1
 800421c:	4602      	mov	r2, r0
 800421e:	4629      	mov	r1, r5
 8004220:	4620      	mov	r0, r4
 8004222:	f7fb ffdd 	bl	80001e0 <__aeabi_dsub>
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <__kernel_cos+0x17c>)
 8004228:	429e      	cmp	r6, r3
 800422a:	4680      	mov	r8, r0
 800422c:	4689      	mov	r9, r1
 800422e:	dc11      	bgt.n	8004254 <__kernel_cos+0x104>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4650      	mov	r0, sl
 8004236:	4659      	mov	r1, fp
 8004238:	f7fb ffd2 	bl	80001e0 <__aeabi_dsub>
 800423c:	460b      	mov	r3, r1
 800423e:	4924      	ldr	r1, [pc, #144]	; (80042d0 <__kernel_cos+0x180>)
 8004240:	4602      	mov	r2, r0
 8004242:	2000      	movs	r0, #0
 8004244:	f7fb ffcc 	bl	80001e0 <__aeabi_dsub>
 8004248:	ecbd 8b02 	vpop	{d8}
 800424c:	ec41 0b10 	vmov	d0, r0, r1
 8004250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <__kernel_cos+0x184>)
 8004256:	491e      	ldr	r1, [pc, #120]	; (80042d0 <__kernel_cos+0x180>)
 8004258:	429e      	cmp	r6, r3
 800425a:	bfcc      	ite	gt
 800425c:	4d1e      	ldrgt	r5, [pc, #120]	; (80042d8 <__kernel_cos+0x188>)
 800425e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004262:	2400      	movs	r4, #0
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	2000      	movs	r0, #0
 800426a:	f7fb ffb9 	bl	80001e0 <__aeabi_dsub>
 800426e:	4622      	mov	r2, r4
 8004270:	4606      	mov	r6, r0
 8004272:	460f      	mov	r7, r1
 8004274:	462b      	mov	r3, r5
 8004276:	4650      	mov	r0, sl
 8004278:	4659      	mov	r1, fp
 800427a:	f7fb ffb1 	bl	80001e0 <__aeabi_dsub>
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	f7fb ffad 	bl	80001e0 <__aeabi_dsub>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	e7d9      	b.n	8004244 <__kernel_cos+0xf4>
 8004290:	2000      	movs	r0, #0
 8004292:	490f      	ldr	r1, [pc, #60]	; (80042d0 <__kernel_cos+0x180>)
 8004294:	e7d8      	b.n	8004248 <__kernel_cos+0xf8>
 8004296:	bf00      	nop
 8004298:	be8838d4 	.word	0xbe8838d4
 800429c:	bda8fae9 	.word	0xbda8fae9
 80042a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80042a4:	3e21ee9e 	.word	0x3e21ee9e
 80042a8:	809c52ad 	.word	0x809c52ad
 80042ac:	3e927e4f 	.word	0x3e927e4f
 80042b0:	19cb1590 	.word	0x19cb1590
 80042b4:	3efa01a0 	.word	0x3efa01a0
 80042b8:	16c15177 	.word	0x16c15177
 80042bc:	3f56c16c 	.word	0x3f56c16c
 80042c0:	5555554c 	.word	0x5555554c
 80042c4:	3fa55555 	.word	0x3fa55555
 80042c8:	3fe00000 	.word	0x3fe00000
 80042cc:	3fd33332 	.word	0x3fd33332
 80042d0:	3ff00000 	.word	0x3ff00000
 80042d4:	3fe90000 	.word	0x3fe90000
 80042d8:	3fd20000 	.word	0x3fd20000
 80042dc:	00000000 	.word	0x00000000

080042e0 <__kernel_rem_pio2>:
 80042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	ed2d 8b02 	vpush	{d8}
 80042e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80042ec:	1ed4      	subs	r4, r2, #3
 80042ee:	9308      	str	r3, [sp, #32]
 80042f0:	9101      	str	r1, [sp, #4]
 80042f2:	4bc5      	ldr	r3, [pc, #788]	; (8004608 <__kernel_rem_pio2+0x328>)
 80042f4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80042f6:	9009      	str	r0, [sp, #36]	; 0x24
 80042f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042fc:	9304      	str	r3, [sp, #16]
 80042fe:	9b08      	ldr	r3, [sp, #32]
 8004300:	3b01      	subs	r3, #1
 8004302:	9307      	str	r3, [sp, #28]
 8004304:	2318      	movs	r3, #24
 8004306:	fb94 f4f3 	sdiv	r4, r4, r3
 800430a:	f06f 0317 	mvn.w	r3, #23
 800430e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004312:	fb04 3303 	mla	r3, r4, r3, r3
 8004316:	eb03 0a02 	add.w	sl, r3, r2
 800431a:	9b04      	ldr	r3, [sp, #16]
 800431c:	9a07      	ldr	r2, [sp, #28]
 800431e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80045f8 <__kernel_rem_pio2+0x318>
 8004322:	eb03 0802 	add.w	r8, r3, r2
 8004326:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004328:	1aa7      	subs	r7, r4, r2
 800432a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800432e:	ae22      	add	r6, sp, #136	; 0x88
 8004330:	2500      	movs	r5, #0
 8004332:	4545      	cmp	r5, r8
 8004334:	dd13      	ble.n	800435e <__kernel_rem_pio2+0x7e>
 8004336:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80045f8 <__kernel_rem_pio2+0x318>
 800433a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800433e:	2600      	movs	r6, #0
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	429e      	cmp	r6, r3
 8004344:	dc32      	bgt.n	80043ac <__kernel_rem_pio2+0xcc>
 8004346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004348:	9302      	str	r3, [sp, #8]
 800434a:	9b08      	ldr	r3, [sp, #32]
 800434c:	199d      	adds	r5, r3, r6
 800434e:	ab22      	add	r3, sp, #136	; 0x88
 8004350:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004354:	9306      	str	r3, [sp, #24]
 8004356:	ec59 8b18 	vmov	r8, r9, d8
 800435a:	2700      	movs	r7, #0
 800435c:	e01f      	b.n	800439e <__kernel_rem_pio2+0xbe>
 800435e:	42ef      	cmn	r7, r5
 8004360:	d407      	bmi.n	8004372 <__kernel_rem_pio2+0x92>
 8004362:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004366:	f7fc f889 	bl	800047c <__aeabi_i2d>
 800436a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800436e:	3501      	adds	r5, #1
 8004370:	e7df      	b.n	8004332 <__kernel_rem_pio2+0x52>
 8004372:	ec51 0b18 	vmov	r0, r1, d8
 8004376:	e7f8      	b.n	800436a <__kernel_rem_pio2+0x8a>
 8004378:	9906      	ldr	r1, [sp, #24]
 800437a:	9d02      	ldr	r5, [sp, #8]
 800437c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004380:	9106      	str	r1, [sp, #24]
 8004382:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004386:	9502      	str	r5, [sp, #8]
 8004388:	f7fc f8e2 	bl	8000550 <__aeabi_dmul>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4640      	mov	r0, r8
 8004392:	4649      	mov	r1, r9
 8004394:	f7fb ff26 	bl	80001e4 <__adddf3>
 8004398:	3701      	adds	r7, #1
 800439a:	4680      	mov	r8, r0
 800439c:	4689      	mov	r9, r1
 800439e:	9b07      	ldr	r3, [sp, #28]
 80043a0:	429f      	cmp	r7, r3
 80043a2:	dde9      	ble.n	8004378 <__kernel_rem_pio2+0x98>
 80043a4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7c9      	b.n	8004340 <__kernel_rem_pio2+0x60>
 80043ac:	9b04      	ldr	r3, [sp, #16]
 80043ae:	aa0e      	add	r2, sp, #56	; 0x38
 80043b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80043b4:	930c      	str	r3, [sp, #48]	; 0x30
 80043b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80043b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80043bc:	9c04      	ldr	r4, [sp, #16]
 80043be:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c0:	ab9a      	add	r3, sp, #616	; 0x268
 80043c2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80043c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043ce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80043d2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80043d6:	ab9a      	add	r3, sp, #616	; 0x268
 80043d8:	445b      	add	r3, fp
 80043da:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80043de:	2500      	movs	r5, #0
 80043e0:	1b63      	subs	r3, r4, r5
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	dc78      	bgt.n	80044d8 <__kernel_rem_pio2+0x1f8>
 80043e6:	4650      	mov	r0, sl
 80043e8:	ec49 8b10 	vmov	d0, r8, r9
 80043ec:	f000 fc00 	bl	8004bf0 <scalbn>
 80043f0:	ec57 6b10 	vmov	r6, r7, d0
 80043f4:	2200      	movs	r2, #0
 80043f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80043fa:	ee10 0a10 	vmov	r0, s0
 80043fe:	4639      	mov	r1, r7
 8004400:	f7fc f8a6 	bl	8000550 <__aeabi_dmul>
 8004404:	ec41 0b10 	vmov	d0, r0, r1
 8004408:	f000 fb6e 	bl	8004ae8 <floor>
 800440c:	2200      	movs	r2, #0
 800440e:	ec51 0b10 	vmov	r0, r1, d0
 8004412:	4b7e      	ldr	r3, [pc, #504]	; (800460c <__kernel_rem_pio2+0x32c>)
 8004414:	f7fc f89c 	bl	8000550 <__aeabi_dmul>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4630      	mov	r0, r6
 800441e:	4639      	mov	r1, r7
 8004420:	f7fb fede 	bl	80001e0 <__aeabi_dsub>
 8004424:	460f      	mov	r7, r1
 8004426:	4606      	mov	r6, r0
 8004428:	f7fc fb2c 	bl	8000a84 <__aeabi_d2iz>
 800442c:	9006      	str	r0, [sp, #24]
 800442e:	f7fc f825 	bl	800047c <__aeabi_i2d>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4630      	mov	r0, r6
 8004438:	4639      	mov	r1, r7
 800443a:	f7fb fed1 	bl	80001e0 <__aeabi_dsub>
 800443e:	f1ba 0f00 	cmp.w	sl, #0
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	dd6c      	ble.n	8004522 <__kernel_rem_pio2+0x242>
 8004448:	1e62      	subs	r2, r4, #1
 800444a:	ab0e      	add	r3, sp, #56	; 0x38
 800444c:	f1ca 0118 	rsb	r1, sl, #24
 8004450:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004454:	9d06      	ldr	r5, [sp, #24]
 8004456:	fa40 f301 	asr.w	r3, r0, r1
 800445a:	441d      	add	r5, r3
 800445c:	408b      	lsls	r3, r1
 800445e:	1ac0      	subs	r0, r0, r3
 8004460:	ab0e      	add	r3, sp, #56	; 0x38
 8004462:	9506      	str	r5, [sp, #24]
 8004464:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004468:	f1ca 0317 	rsb	r3, sl, #23
 800446c:	fa40 f303 	asr.w	r3, r0, r3
 8004470:	9302      	str	r3, [sp, #8]
 8004472:	9b02      	ldr	r3, [sp, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	dd62      	ble.n	800453e <__kernel_rem_pio2+0x25e>
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	2200      	movs	r2, #0
 800447c:	3301      	adds	r3, #1
 800447e:	9306      	str	r3, [sp, #24]
 8004480:	4615      	mov	r5, r2
 8004482:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004486:	4294      	cmp	r4, r2
 8004488:	f300 8095 	bgt.w	80045b6 <__kernel_rem_pio2+0x2d6>
 800448c:	f1ba 0f00 	cmp.w	sl, #0
 8004490:	dd07      	ble.n	80044a2 <__kernel_rem_pio2+0x1c2>
 8004492:	f1ba 0f01 	cmp.w	sl, #1
 8004496:	f000 80a2 	beq.w	80045de <__kernel_rem_pio2+0x2fe>
 800449a:	f1ba 0f02 	cmp.w	sl, #2
 800449e:	f000 80c1 	beq.w	8004624 <__kernel_rem_pio2+0x344>
 80044a2:	9b02      	ldr	r3, [sp, #8]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d14a      	bne.n	800453e <__kernel_rem_pio2+0x25e>
 80044a8:	4632      	mov	r2, r6
 80044aa:	463b      	mov	r3, r7
 80044ac:	2000      	movs	r0, #0
 80044ae:	4958      	ldr	r1, [pc, #352]	; (8004610 <__kernel_rem_pio2+0x330>)
 80044b0:	f7fb fe96 	bl	80001e0 <__aeabi_dsub>
 80044b4:	4606      	mov	r6, r0
 80044b6:	460f      	mov	r7, r1
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	d040      	beq.n	800453e <__kernel_rem_pio2+0x25e>
 80044bc:	4650      	mov	r0, sl
 80044be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004600 <__kernel_rem_pio2+0x320>
 80044c2:	f000 fb95 	bl	8004bf0 <scalbn>
 80044c6:	4630      	mov	r0, r6
 80044c8:	4639      	mov	r1, r7
 80044ca:	ec53 2b10 	vmov	r2, r3, d0
 80044ce:	f7fb fe87 	bl	80001e0 <__aeabi_dsub>
 80044d2:	4606      	mov	r6, r0
 80044d4:	460f      	mov	r7, r1
 80044d6:	e032      	b.n	800453e <__kernel_rem_pio2+0x25e>
 80044d8:	2200      	movs	r2, #0
 80044da:	4b4e      	ldr	r3, [pc, #312]	; (8004614 <__kernel_rem_pio2+0x334>)
 80044dc:	4640      	mov	r0, r8
 80044de:	4649      	mov	r1, r9
 80044e0:	f7fc f836 	bl	8000550 <__aeabi_dmul>
 80044e4:	f7fc face 	bl	8000a84 <__aeabi_d2iz>
 80044e8:	f7fb ffc8 	bl	800047c <__aeabi_i2d>
 80044ec:	2200      	movs	r2, #0
 80044ee:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <__kernel_rem_pio2+0x338>)
 80044f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044f4:	f7fc f82c 	bl	8000550 <__aeabi_dmul>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4640      	mov	r0, r8
 80044fe:	4649      	mov	r1, r9
 8004500:	f7fb fe6e 	bl	80001e0 <__aeabi_dsub>
 8004504:	f7fc fabe 	bl	8000a84 <__aeabi_d2iz>
 8004508:	ab0e      	add	r3, sp, #56	; 0x38
 800450a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800450e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004516:	f7fb fe65 	bl	80001e4 <__adddf3>
 800451a:	3501      	adds	r5, #1
 800451c:	4680      	mov	r8, r0
 800451e:	4689      	mov	r9, r1
 8004520:	e75e      	b.n	80043e0 <__kernel_rem_pio2+0x100>
 8004522:	d105      	bne.n	8004530 <__kernel_rem_pio2+0x250>
 8004524:	1e63      	subs	r3, r4, #1
 8004526:	aa0e      	add	r2, sp, #56	; 0x38
 8004528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800452c:	15c3      	asrs	r3, r0, #23
 800452e:	e79f      	b.n	8004470 <__kernel_rem_pio2+0x190>
 8004530:	2200      	movs	r2, #0
 8004532:	4b3a      	ldr	r3, [pc, #232]	; (800461c <__kernel_rem_pio2+0x33c>)
 8004534:	f7fc fa92 	bl	8000a5c <__aeabi_dcmpge>
 8004538:	2800      	cmp	r0, #0
 800453a:	d139      	bne.n	80045b0 <__kernel_rem_pio2+0x2d0>
 800453c:	9002      	str	r0, [sp, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	2300      	movs	r3, #0
 8004542:	4630      	mov	r0, r6
 8004544:	4639      	mov	r1, r7
 8004546:	f7fc fa6b 	bl	8000a20 <__aeabi_dcmpeq>
 800454a:	2800      	cmp	r0, #0
 800454c:	f000 80c7 	beq.w	80046de <__kernel_rem_pio2+0x3fe>
 8004550:	1e65      	subs	r5, r4, #1
 8004552:	462b      	mov	r3, r5
 8004554:	2200      	movs	r2, #0
 8004556:	9904      	ldr	r1, [sp, #16]
 8004558:	428b      	cmp	r3, r1
 800455a:	da6a      	bge.n	8004632 <__kernel_rem_pio2+0x352>
 800455c:	2a00      	cmp	r2, #0
 800455e:	f000 8088 	beq.w	8004672 <__kernel_rem_pio2+0x392>
 8004562:	ab0e      	add	r3, sp, #56	; 0x38
 8004564:	f1aa 0a18 	sub.w	sl, sl, #24
 8004568:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80b4 	beq.w	80046da <__kernel_rem_pio2+0x3fa>
 8004572:	4650      	mov	r0, sl
 8004574:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004600 <__kernel_rem_pio2+0x320>
 8004578:	f000 fb3a 	bl	8004bf0 <scalbn>
 800457c:	00ec      	lsls	r4, r5, #3
 800457e:	ab72      	add	r3, sp, #456	; 0x1c8
 8004580:	191e      	adds	r6, r3, r4
 8004582:	ec59 8b10 	vmov	r8, r9, d0
 8004586:	f106 0a08 	add.w	sl, r6, #8
 800458a:	462f      	mov	r7, r5
 800458c:	2f00      	cmp	r7, #0
 800458e:	f280 80df 	bge.w	8004750 <__kernel_rem_pio2+0x470>
 8004592:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80045f8 <__kernel_rem_pio2+0x318>
 8004596:	f04f 0a00 	mov.w	sl, #0
 800459a:	eba5 030a 	sub.w	r3, r5, sl
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f2c0 810a 	blt.w	80047b8 <__kernel_rem_pio2+0x4d8>
 80045a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004620 <__kernel_rem_pio2+0x340>
 80045a8:	ec59 8b18 	vmov	r8, r9, d8
 80045ac:	2700      	movs	r7, #0
 80045ae:	e0f5      	b.n	800479c <__kernel_rem_pio2+0x4bc>
 80045b0:	2302      	movs	r3, #2
 80045b2:	9302      	str	r3, [sp, #8]
 80045b4:	e760      	b.n	8004478 <__kernel_rem_pio2+0x198>
 80045b6:	ab0e      	add	r3, sp, #56	; 0x38
 80045b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045bc:	b94d      	cbnz	r5, 80045d2 <__kernel_rem_pio2+0x2f2>
 80045be:	b12b      	cbz	r3, 80045cc <__kernel_rem_pio2+0x2ec>
 80045c0:	a80e      	add	r0, sp, #56	; 0x38
 80045c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80045c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80045ca:	2301      	movs	r3, #1
 80045cc:	3201      	adds	r2, #1
 80045ce:	461d      	mov	r5, r3
 80045d0:	e759      	b.n	8004486 <__kernel_rem_pio2+0x1a6>
 80045d2:	a80e      	add	r0, sp, #56	; 0x38
 80045d4:	1acb      	subs	r3, r1, r3
 80045d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80045da:	462b      	mov	r3, r5
 80045dc:	e7f6      	b.n	80045cc <__kernel_rem_pio2+0x2ec>
 80045de:	1e62      	subs	r2, r4, #1
 80045e0:	ab0e      	add	r3, sp, #56	; 0x38
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80045ea:	a90e      	add	r1, sp, #56	; 0x38
 80045ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80045f0:	e757      	b.n	80044a2 <__kernel_rem_pio2+0x1c2>
 80045f2:	bf00      	nop
 80045f4:	f3af 8000 	nop.w
	...
 8004604:	3ff00000 	.word	0x3ff00000
 8004608:	08004f18 	.word	0x08004f18
 800460c:	40200000 	.word	0x40200000
 8004610:	3ff00000 	.word	0x3ff00000
 8004614:	3e700000 	.word	0x3e700000
 8004618:	41700000 	.word	0x41700000
 800461c:	3fe00000 	.word	0x3fe00000
 8004620:	08004ed8 	.word	0x08004ed8
 8004624:	1e62      	subs	r2, r4, #1
 8004626:	ab0e      	add	r3, sp, #56	; 0x38
 8004628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004630:	e7db      	b.n	80045ea <__kernel_rem_pio2+0x30a>
 8004632:	a90e      	add	r1, sp, #56	; 0x38
 8004634:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004638:	3b01      	subs	r3, #1
 800463a:	430a      	orrs	r2, r1
 800463c:	e78b      	b.n	8004556 <__kernel_rem_pio2+0x276>
 800463e:	3301      	adds	r3, #1
 8004640:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004644:	2900      	cmp	r1, #0
 8004646:	d0fa      	beq.n	800463e <__kernel_rem_pio2+0x35e>
 8004648:	9a08      	ldr	r2, [sp, #32]
 800464a:	4422      	add	r2, r4
 800464c:	00d2      	lsls	r2, r2, #3
 800464e:	a922      	add	r1, sp, #136	; 0x88
 8004650:	18e3      	adds	r3, r4, r3
 8004652:	9206      	str	r2, [sp, #24]
 8004654:	440a      	add	r2, r1
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	f10b 0108 	add.w	r1, fp, #8
 800465c:	f102 0308 	add.w	r3, r2, #8
 8004660:	1c66      	adds	r6, r4, #1
 8004662:	910a      	str	r1, [sp, #40]	; 0x28
 8004664:	2500      	movs	r5, #0
 8004666:	930d      	str	r3, [sp, #52]	; 0x34
 8004668:	9b02      	ldr	r3, [sp, #8]
 800466a:	42b3      	cmp	r3, r6
 800466c:	da04      	bge.n	8004678 <__kernel_rem_pio2+0x398>
 800466e:	461c      	mov	r4, r3
 8004670:	e6a6      	b.n	80043c0 <__kernel_rem_pio2+0xe0>
 8004672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004674:	2301      	movs	r3, #1
 8004676:	e7e3      	b.n	8004640 <__kernel_rem_pio2+0x360>
 8004678:	9b06      	ldr	r3, [sp, #24]
 800467a:	18ef      	adds	r7, r5, r3
 800467c:	ab22      	add	r3, sp, #136	; 0x88
 800467e:	441f      	add	r7, r3
 8004680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004682:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004686:	f7fb fef9 	bl	800047c <__aeabi_i2d>
 800468a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468c:	461c      	mov	r4, r3
 800468e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004690:	e9c7 0100 	strd	r0, r1, [r7]
 8004694:	eb03 0b05 	add.w	fp, r3, r5
 8004698:	2700      	movs	r7, #0
 800469a:	f04f 0800 	mov.w	r8, #0
 800469e:	f04f 0900 	mov.w	r9, #0
 80046a2:	9b07      	ldr	r3, [sp, #28]
 80046a4:	429f      	cmp	r7, r3
 80046a6:	dd08      	ble.n	80046ba <__kernel_rem_pio2+0x3da>
 80046a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046aa:	aa72      	add	r2, sp, #456	; 0x1c8
 80046ac:	18eb      	adds	r3, r5, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80046b4:	3601      	adds	r6, #1
 80046b6:	3508      	adds	r5, #8
 80046b8:	e7d6      	b.n	8004668 <__kernel_rem_pio2+0x388>
 80046ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80046be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80046c2:	f7fb ff45 	bl	8000550 <__aeabi_dmul>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fb fd89 	bl	80001e4 <__adddf3>
 80046d2:	3701      	adds	r7, #1
 80046d4:	4680      	mov	r8, r0
 80046d6:	4689      	mov	r9, r1
 80046d8:	e7e3      	b.n	80046a2 <__kernel_rem_pio2+0x3c2>
 80046da:	3d01      	subs	r5, #1
 80046dc:	e741      	b.n	8004562 <__kernel_rem_pio2+0x282>
 80046de:	f1ca 0000 	rsb	r0, sl, #0
 80046e2:	ec47 6b10 	vmov	d0, r6, r7
 80046e6:	f000 fa83 	bl	8004bf0 <scalbn>
 80046ea:	ec57 6b10 	vmov	r6, r7, d0
 80046ee:	2200      	movs	r2, #0
 80046f0:	4b99      	ldr	r3, [pc, #612]	; (8004958 <__kernel_rem_pio2+0x678>)
 80046f2:	ee10 0a10 	vmov	r0, s0
 80046f6:	4639      	mov	r1, r7
 80046f8:	f7fc f9b0 	bl	8000a5c <__aeabi_dcmpge>
 80046fc:	b1f8      	cbz	r0, 800473e <__kernel_rem_pio2+0x45e>
 80046fe:	2200      	movs	r2, #0
 8004700:	4b96      	ldr	r3, [pc, #600]	; (800495c <__kernel_rem_pio2+0x67c>)
 8004702:	4630      	mov	r0, r6
 8004704:	4639      	mov	r1, r7
 8004706:	f7fb ff23 	bl	8000550 <__aeabi_dmul>
 800470a:	f7fc f9bb 	bl	8000a84 <__aeabi_d2iz>
 800470e:	4680      	mov	r8, r0
 8004710:	f7fb feb4 	bl	800047c <__aeabi_i2d>
 8004714:	2200      	movs	r2, #0
 8004716:	4b90      	ldr	r3, [pc, #576]	; (8004958 <__kernel_rem_pio2+0x678>)
 8004718:	f7fb ff1a 	bl	8000550 <__aeabi_dmul>
 800471c:	460b      	mov	r3, r1
 800471e:	4602      	mov	r2, r0
 8004720:	4639      	mov	r1, r7
 8004722:	4630      	mov	r0, r6
 8004724:	f7fb fd5c 	bl	80001e0 <__aeabi_dsub>
 8004728:	f7fc f9ac 	bl	8000a84 <__aeabi_d2iz>
 800472c:	1c65      	adds	r5, r4, #1
 800472e:	ab0e      	add	r3, sp, #56	; 0x38
 8004730:	f10a 0a18 	add.w	sl, sl, #24
 8004734:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004738:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800473c:	e719      	b.n	8004572 <__kernel_rem_pio2+0x292>
 800473e:	4630      	mov	r0, r6
 8004740:	4639      	mov	r1, r7
 8004742:	f7fc f99f 	bl	8000a84 <__aeabi_d2iz>
 8004746:	ab0e      	add	r3, sp, #56	; 0x38
 8004748:	4625      	mov	r5, r4
 800474a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800474e:	e710      	b.n	8004572 <__kernel_rem_pio2+0x292>
 8004750:	ab0e      	add	r3, sp, #56	; 0x38
 8004752:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004756:	f7fb fe91 	bl	800047c <__aeabi_i2d>
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	f7fb fef7 	bl	8000550 <__aeabi_dmul>
 8004762:	2200      	movs	r2, #0
 8004764:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004768:	4b7c      	ldr	r3, [pc, #496]	; (800495c <__kernel_rem_pio2+0x67c>)
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fb feef 	bl	8000550 <__aeabi_dmul>
 8004772:	3f01      	subs	r7, #1
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	e708      	b.n	800458c <__kernel_rem_pio2+0x2ac>
 800477a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800477e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004782:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8004786:	f7fb fee3 	bl	8000550 <__aeabi_dmul>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4640      	mov	r0, r8
 8004790:	4649      	mov	r1, r9
 8004792:	f7fb fd27 	bl	80001e4 <__adddf3>
 8004796:	3701      	adds	r7, #1
 8004798:	4680      	mov	r8, r0
 800479a:	4689      	mov	r9, r1
 800479c:	9b04      	ldr	r3, [sp, #16]
 800479e:	429f      	cmp	r7, r3
 80047a0:	dc01      	bgt.n	80047a6 <__kernel_rem_pio2+0x4c6>
 80047a2:	45ba      	cmp	sl, r7
 80047a4:	dae9      	bge.n	800477a <__kernel_rem_pio2+0x49a>
 80047a6:	ab4a      	add	r3, sp, #296	; 0x128
 80047a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047ac:	e9c3 8900 	strd	r8, r9, [r3]
 80047b0:	f10a 0a01 	add.w	sl, sl, #1
 80047b4:	3e08      	subs	r6, #8
 80047b6:	e6f0      	b.n	800459a <__kernel_rem_pio2+0x2ba>
 80047b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d85b      	bhi.n	8004876 <__kernel_rem_pio2+0x596>
 80047be:	e8df f003 	tbb	[pc, r3]
 80047c2:	264a      	.short	0x264a
 80047c4:	0226      	.short	0x0226
 80047c6:	ab9a      	add	r3, sp, #616	; 0x268
 80047c8:	441c      	add	r4, r3
 80047ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80047ce:	46a2      	mov	sl, r4
 80047d0:	46ab      	mov	fp, r5
 80047d2:	f1bb 0f00 	cmp.w	fp, #0
 80047d6:	dc6c      	bgt.n	80048b2 <__kernel_rem_pio2+0x5d2>
 80047d8:	46a2      	mov	sl, r4
 80047da:	46ab      	mov	fp, r5
 80047dc:	f1bb 0f01 	cmp.w	fp, #1
 80047e0:	f300 8086 	bgt.w	80048f0 <__kernel_rem_pio2+0x610>
 80047e4:	2000      	movs	r0, #0
 80047e6:	2100      	movs	r1, #0
 80047e8:	2d01      	cmp	r5, #1
 80047ea:	f300 80a0 	bgt.w	800492e <__kernel_rem_pio2+0x64e>
 80047ee:	9b02      	ldr	r3, [sp, #8]
 80047f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80047f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f040 809e 	bne.w	800493a <__kernel_rem_pio2+0x65a>
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	e9c3 7800 	strd	r7, r8, [r3]
 8004804:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004808:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800480c:	e033      	b.n	8004876 <__kernel_rem_pio2+0x596>
 800480e:	3408      	adds	r4, #8
 8004810:	ab4a      	add	r3, sp, #296	; 0x128
 8004812:	441c      	add	r4, r3
 8004814:	462e      	mov	r6, r5
 8004816:	2000      	movs	r0, #0
 8004818:	2100      	movs	r1, #0
 800481a:	2e00      	cmp	r6, #0
 800481c:	da3a      	bge.n	8004894 <__kernel_rem_pio2+0x5b4>
 800481e:	9b02      	ldr	r3, [sp, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d03d      	beq.n	80048a0 <__kernel_rem_pio2+0x5c0>
 8004824:	4602      	mov	r2, r0
 8004826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800482a:	9c01      	ldr	r4, [sp, #4]
 800482c:	e9c4 2300 	strd	r2, r3, [r4]
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004838:	f7fb fcd2 	bl	80001e0 <__aeabi_dsub>
 800483c:	ae4c      	add	r6, sp, #304	; 0x130
 800483e:	2401      	movs	r4, #1
 8004840:	42a5      	cmp	r5, r4
 8004842:	da30      	bge.n	80048a6 <__kernel_rem_pio2+0x5c6>
 8004844:	9b02      	ldr	r3, [sp, #8]
 8004846:	b113      	cbz	r3, 800484e <__kernel_rem_pio2+0x56e>
 8004848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800484c:	4619      	mov	r1, r3
 800484e:	9b01      	ldr	r3, [sp, #4]
 8004850:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004854:	e00f      	b.n	8004876 <__kernel_rem_pio2+0x596>
 8004856:	ab9a      	add	r3, sp, #616	; 0x268
 8004858:	441c      	add	r4, r3
 800485a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800485e:	2000      	movs	r0, #0
 8004860:	2100      	movs	r1, #0
 8004862:	2d00      	cmp	r5, #0
 8004864:	da10      	bge.n	8004888 <__kernel_rem_pio2+0x5a8>
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	b113      	cbz	r3, 8004870 <__kernel_rem_pio2+0x590>
 800486a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800486e:	4619      	mov	r1, r3
 8004870:	9b01      	ldr	r3, [sp, #4]
 8004872:	e9c3 0100 	strd	r0, r1, [r3]
 8004876:	9b06      	ldr	r3, [sp, #24]
 8004878:	f003 0007 	and.w	r0, r3, #7
 800487c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004880:	ecbd 8b02 	vpop	{d8}
 8004884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004888:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800488c:	f7fb fcaa 	bl	80001e4 <__adddf3>
 8004890:	3d01      	subs	r5, #1
 8004892:	e7e6      	b.n	8004862 <__kernel_rem_pio2+0x582>
 8004894:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004898:	f7fb fca4 	bl	80001e4 <__adddf3>
 800489c:	3e01      	subs	r6, #1
 800489e:	e7bc      	b.n	800481a <__kernel_rem_pio2+0x53a>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	e7c1      	b.n	800482a <__kernel_rem_pio2+0x54a>
 80048a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80048aa:	f7fb fc9b 	bl	80001e4 <__adddf3>
 80048ae:	3401      	adds	r4, #1
 80048b0:	e7c6      	b.n	8004840 <__kernel_rem_pio2+0x560>
 80048b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80048b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80048ba:	4640      	mov	r0, r8
 80048bc:	ec53 2b17 	vmov	r2, r3, d7
 80048c0:	4649      	mov	r1, r9
 80048c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80048c6:	f7fb fc8d 	bl	80001e4 <__adddf3>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	4640      	mov	r0, r8
 80048d4:	4649      	mov	r1, r9
 80048d6:	f7fb fc83 	bl	80001e0 <__aeabi_dsub>
 80048da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048de:	f7fb fc81 	bl	80001e4 <__adddf3>
 80048e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80048e6:	e9ca 0100 	strd	r0, r1, [sl]
 80048ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80048ee:	e770      	b.n	80047d2 <__kernel_rem_pio2+0x4f2>
 80048f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80048f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80048f8:	4630      	mov	r0, r6
 80048fa:	ec53 2b17 	vmov	r2, r3, d7
 80048fe:	4639      	mov	r1, r7
 8004900:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004904:	f7fb fc6e 	bl	80001e4 <__adddf3>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4680      	mov	r8, r0
 800490e:	4689      	mov	r9, r1
 8004910:	4630      	mov	r0, r6
 8004912:	4639      	mov	r1, r7
 8004914:	f7fb fc64 	bl	80001e0 <__aeabi_dsub>
 8004918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800491c:	f7fb fc62 	bl	80001e4 <__adddf3>
 8004920:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004924:	e9ca 0100 	strd	r0, r1, [sl]
 8004928:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800492c:	e756      	b.n	80047dc <__kernel_rem_pio2+0x4fc>
 800492e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004932:	f7fb fc57 	bl	80001e4 <__adddf3>
 8004936:	3d01      	subs	r5, #1
 8004938:	e756      	b.n	80047e8 <__kernel_rem_pio2+0x508>
 800493a:	9b01      	ldr	r3, [sp, #4]
 800493c:	9a01      	ldr	r2, [sp, #4]
 800493e:	601f      	str	r7, [r3, #0]
 8004940:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004944:	605c      	str	r4, [r3, #4]
 8004946:	609d      	str	r5, [r3, #8]
 8004948:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800494c:	60d3      	str	r3, [r2, #12]
 800494e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004952:	6110      	str	r0, [r2, #16]
 8004954:	6153      	str	r3, [r2, #20]
 8004956:	e78e      	b.n	8004876 <__kernel_rem_pio2+0x596>
 8004958:	41700000 	.word	0x41700000
 800495c:	3e700000 	.word	0x3e700000

08004960 <__kernel_sin>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	ec55 4b10 	vmov	r4, r5, d0
 8004968:	b085      	sub	sp, #20
 800496a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800496e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004972:	ed8d 1b00 	vstr	d1, [sp]
 8004976:	9002      	str	r0, [sp, #8]
 8004978:	da06      	bge.n	8004988 <__kernel_sin+0x28>
 800497a:	ee10 0a10 	vmov	r0, s0
 800497e:	4629      	mov	r1, r5
 8004980:	f7fc f880 	bl	8000a84 <__aeabi_d2iz>
 8004984:	2800      	cmp	r0, #0
 8004986:	d051      	beq.n	8004a2c <__kernel_sin+0xcc>
 8004988:	4622      	mov	r2, r4
 800498a:	462b      	mov	r3, r5
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f7fb fdde 	bl	8000550 <__aeabi_dmul>
 8004994:	4682      	mov	sl, r0
 8004996:	468b      	mov	fp, r1
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fdd6 	bl	8000550 <__aeabi_dmul>
 80049a4:	a341      	add	r3, pc, #260	; (adr r3, 8004aac <__kernel_sin+0x14c>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	4680      	mov	r8, r0
 80049ac:	4689      	mov	r9, r1
 80049ae:	4650      	mov	r0, sl
 80049b0:	4659      	mov	r1, fp
 80049b2:	f7fb fdcd 	bl	8000550 <__aeabi_dmul>
 80049b6:	a33f      	add	r3, pc, #252	; (adr r3, 8004ab4 <__kernel_sin+0x154>)
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f7fb fc10 	bl	80001e0 <__aeabi_dsub>
 80049c0:	4652      	mov	r2, sl
 80049c2:	465b      	mov	r3, fp
 80049c4:	f7fb fdc4 	bl	8000550 <__aeabi_dmul>
 80049c8:	a33c      	add	r3, pc, #240	; (adr r3, 8004abc <__kernel_sin+0x15c>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f7fb fc09 	bl	80001e4 <__adddf3>
 80049d2:	4652      	mov	r2, sl
 80049d4:	465b      	mov	r3, fp
 80049d6:	f7fb fdbb 	bl	8000550 <__aeabi_dmul>
 80049da:	a33a      	add	r3, pc, #232	; (adr r3, 8004ac4 <__kernel_sin+0x164>)
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f7fb fbfe 	bl	80001e0 <__aeabi_dsub>
 80049e4:	4652      	mov	r2, sl
 80049e6:	465b      	mov	r3, fp
 80049e8:	f7fb fdb2 	bl	8000550 <__aeabi_dmul>
 80049ec:	a337      	add	r3, pc, #220	; (adr r3, 8004acc <__kernel_sin+0x16c>)
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f7fb fbf7 	bl	80001e4 <__adddf3>
 80049f6:	9b02      	ldr	r3, [sp, #8]
 80049f8:	4606      	mov	r6, r0
 80049fa:	460f      	mov	r7, r1
 80049fc:	b9db      	cbnz	r3, 8004a36 <__kernel_sin+0xd6>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4650      	mov	r0, sl
 8004a04:	4659      	mov	r1, fp
 8004a06:	f7fb fda3 	bl	8000550 <__aeabi_dmul>
 8004a0a:	a325      	add	r3, pc, #148	; (adr r3, 8004aa0 <__kernel_sin+0x140>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f7fb fbe6 	bl	80001e0 <__aeabi_dsub>
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	f7fb fd9a 	bl	8000550 <__aeabi_dmul>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4620      	mov	r0, r4
 8004a22:	4629      	mov	r1, r5
 8004a24:	f7fb fbde 	bl	80001e4 <__adddf3>
 8004a28:	4604      	mov	r4, r0
 8004a2a:	460d      	mov	r5, r1
 8004a2c:	ec45 4b10 	vmov	d0, r4, r5
 8004a30:	b005      	add	sp, #20
 8004a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a36:	2200      	movs	r2, #0
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <__kernel_sin+0x148>)
 8004a3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a3e:	f7fb fd87 	bl	8000550 <__aeabi_dmul>
 8004a42:	4632      	mov	r2, r6
 8004a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a48:	463b      	mov	r3, r7
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	f7fb fd7f 	bl	8000550 <__aeabi_dmul>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a5a:	f7fb fbc1 	bl	80001e0 <__aeabi_dsub>
 8004a5e:	4652      	mov	r2, sl
 8004a60:	465b      	mov	r3, fp
 8004a62:	f7fb fd75 	bl	8000550 <__aeabi_dmul>
 8004a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a6a:	f7fb fbb9 	bl	80001e0 <__aeabi_dsub>
 8004a6e:	a30c      	add	r3, pc, #48	; (adr r3, 8004aa0 <__kernel_sin+0x140>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	4606      	mov	r6, r0
 8004a76:	460f      	mov	r7, r1
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fd68 	bl	8000550 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4630      	mov	r0, r6
 8004a86:	4639      	mov	r1, r7
 8004a88:	f7fb fbac 	bl	80001e4 <__adddf3>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4620      	mov	r0, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	f7fb fba4 	bl	80001e0 <__aeabi_dsub>
 8004a98:	e7c6      	b.n	8004a28 <__kernel_sin+0xc8>
 8004a9a:	bf00      	nop
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	55555549 	.word	0x55555549
 8004aa4:	3fc55555 	.word	0x3fc55555
 8004aa8:	3fe00000 	.word	0x3fe00000
 8004aac:	5acfd57c 	.word	0x5acfd57c
 8004ab0:	3de5d93a 	.word	0x3de5d93a
 8004ab4:	8a2b9ceb 	.word	0x8a2b9ceb
 8004ab8:	3e5ae5e6 	.word	0x3e5ae5e6
 8004abc:	57b1fe7d 	.word	0x57b1fe7d
 8004ac0:	3ec71de3 	.word	0x3ec71de3
 8004ac4:	19c161d5 	.word	0x19c161d5
 8004ac8:	3f2a01a0 	.word	0x3f2a01a0
 8004acc:	1110f8a6 	.word	0x1110f8a6
 8004ad0:	3f811111 	.word	0x3f811111

08004ad4 <fabs>:
 8004ad4:	ec51 0b10 	vmov	r0, r1, d0
 8004ad8:	ee10 2a10 	vmov	r2, s0
 8004adc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ae0:	ec43 2b10 	vmov	d0, r2, r3
 8004ae4:	4770      	bx	lr
	...

08004ae8 <floor>:
 8004ae8:	ec51 0b10 	vmov	r0, r1, d0
 8004aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004af4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004af8:	2e13      	cmp	r6, #19
 8004afa:	460c      	mov	r4, r1
 8004afc:	ee10 5a10 	vmov	r5, s0
 8004b00:	4680      	mov	r8, r0
 8004b02:	dc34      	bgt.n	8004b6e <floor+0x86>
 8004b04:	2e00      	cmp	r6, #0
 8004b06:	da16      	bge.n	8004b36 <floor+0x4e>
 8004b08:	a335      	add	r3, pc, #212	; (adr r3, 8004be0 <floor+0xf8>)
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f7fb fb69 	bl	80001e4 <__adddf3>
 8004b12:	2200      	movs	r2, #0
 8004b14:	2300      	movs	r3, #0
 8004b16:	f7fb ffab 	bl	8000a70 <__aeabi_dcmpgt>
 8004b1a:	b148      	cbz	r0, 8004b30 <floor+0x48>
 8004b1c:	2c00      	cmp	r4, #0
 8004b1e:	da59      	bge.n	8004bd4 <floor+0xec>
 8004b20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004b24:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <floor+0x100>)
 8004b26:	432b      	orrs	r3, r5
 8004b28:	2500      	movs	r5, #0
 8004b2a:	42ab      	cmp	r3, r5
 8004b2c:	bf18      	it	ne
 8004b2e:	4614      	movne	r4, r2
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	e025      	b.n	8004b82 <floor+0x9a>
 8004b36:	4f2d      	ldr	r7, [pc, #180]	; (8004bec <floor+0x104>)
 8004b38:	4137      	asrs	r7, r6
 8004b3a:	ea01 0307 	and.w	r3, r1, r7
 8004b3e:	4303      	orrs	r3, r0
 8004b40:	d01f      	beq.n	8004b82 <floor+0x9a>
 8004b42:	a327      	add	r3, pc, #156	; (adr r3, 8004be0 <floor+0xf8>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fb4c 	bl	80001e4 <__adddf3>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f7fb ff8e 	bl	8000a70 <__aeabi_dcmpgt>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d0eb      	beq.n	8004b30 <floor+0x48>
 8004b58:	2c00      	cmp	r4, #0
 8004b5a:	bfbe      	ittt	lt
 8004b5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004b60:	fa43 f606 	asrlt.w	r6, r3, r6
 8004b64:	19a4      	addlt	r4, r4, r6
 8004b66:	ea24 0407 	bic.w	r4, r4, r7
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	e7e0      	b.n	8004b30 <floor+0x48>
 8004b6e:	2e33      	cmp	r6, #51	; 0x33
 8004b70:	dd0b      	ble.n	8004b8a <floor+0xa2>
 8004b72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004b76:	d104      	bne.n	8004b82 <floor+0x9a>
 8004b78:	ee10 2a10 	vmov	r2, s0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	f7fb fb31 	bl	80001e4 <__adddf3>
 8004b82:	ec41 0b10 	vmov	d0, r0, r1
 8004b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	fa23 f707 	lsr.w	r7, r3, r7
 8004b96:	4207      	tst	r7, r0
 8004b98:	d0f3      	beq.n	8004b82 <floor+0x9a>
 8004b9a:	a311      	add	r3, pc, #68	; (adr r3, 8004be0 <floor+0xf8>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f7fb fb20 	bl	80001e4 <__adddf3>
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f7fb ff62 	bl	8000a70 <__aeabi_dcmpgt>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0bf      	beq.n	8004b30 <floor+0x48>
 8004bb0:	2c00      	cmp	r4, #0
 8004bb2:	da02      	bge.n	8004bba <floor+0xd2>
 8004bb4:	2e14      	cmp	r6, #20
 8004bb6:	d103      	bne.n	8004bc0 <floor+0xd8>
 8004bb8:	3401      	adds	r4, #1
 8004bba:	ea25 0507 	bic.w	r5, r5, r7
 8004bbe:	e7b7      	b.n	8004b30 <floor+0x48>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004bc6:	fa03 f606 	lsl.w	r6, r3, r6
 8004bca:	4435      	add	r5, r6
 8004bcc:	4545      	cmp	r5, r8
 8004bce:	bf38      	it	cc
 8004bd0:	18e4      	addcc	r4, r4, r3
 8004bd2:	e7f2      	b.n	8004bba <floor+0xd2>
 8004bd4:	2500      	movs	r5, #0
 8004bd6:	462c      	mov	r4, r5
 8004bd8:	e7aa      	b.n	8004b30 <floor+0x48>
 8004bda:	bf00      	nop
 8004bdc:	f3af 8000 	nop.w
 8004be0:	8800759c 	.word	0x8800759c
 8004be4:	7e37e43c 	.word	0x7e37e43c
 8004be8:	bff00000 	.word	0xbff00000
 8004bec:	000fffff 	.word	0x000fffff

08004bf0 <scalbn>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	ec55 4b10 	vmov	r4, r5, d0
 8004bf6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	b9aa      	cbnz	r2, 8004c2c <scalbn+0x3c>
 8004c00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004c04:	4323      	orrs	r3, r4
 8004c06:	d03b      	beq.n	8004c80 <scalbn+0x90>
 8004c08:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <scalbn+0xe0>)
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	ee10 0a10 	vmov	r0, s0
 8004c12:	f7fb fc9d 	bl	8000550 <__aeabi_dmul>
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <scalbn+0xe4>)
 8004c18:	429e      	cmp	r6, r3
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	460d      	mov	r5, r1
 8004c1e:	da12      	bge.n	8004c46 <scalbn+0x56>
 8004c20:	a327      	add	r3, pc, #156	; (adr r3, 8004cc0 <scalbn+0xd0>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb fc93 	bl	8000550 <__aeabi_dmul>
 8004c2a:	e009      	b.n	8004c40 <scalbn+0x50>
 8004c2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004c30:	428a      	cmp	r2, r1
 8004c32:	d10c      	bne.n	8004c4e <scalbn+0x5e>
 8004c34:	ee10 2a10 	vmov	r2, s0
 8004c38:	4620      	mov	r0, r4
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	f7fb fad2 	bl	80001e4 <__adddf3>
 8004c40:	4604      	mov	r4, r0
 8004c42:	460d      	mov	r5, r1
 8004c44:	e01c      	b.n	8004c80 <scalbn+0x90>
 8004c46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	3a36      	subs	r2, #54	; 0x36
 8004c4e:	4432      	add	r2, r6
 8004c50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004c54:	428a      	cmp	r2, r1
 8004c56:	dd0b      	ble.n	8004c70 <scalbn+0x80>
 8004c58:	ec45 4b11 	vmov	d1, r4, r5
 8004c5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004cc8 <scalbn+0xd8>
 8004c60:	f000 f83c 	bl	8004cdc <copysign>
 8004c64:	a318      	add	r3, pc, #96	; (adr r3, 8004cc8 <scalbn+0xd8>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	ec51 0b10 	vmov	r0, r1, d0
 8004c6e:	e7da      	b.n	8004c26 <scalbn+0x36>
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	dd08      	ble.n	8004c86 <scalbn+0x96>
 8004c74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c80:	ec45 4b10 	vmov	d0, r4, r5
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
 8004c86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004c8a:	da0d      	bge.n	8004ca8 <scalbn+0xb8>
 8004c8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c90:	429e      	cmp	r6, r3
 8004c92:	ec45 4b11 	vmov	d1, r4, r5
 8004c96:	dce1      	bgt.n	8004c5c <scalbn+0x6c>
 8004c98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004cc0 <scalbn+0xd0>
 8004c9c:	f000 f81e 	bl	8004cdc <copysign>
 8004ca0:	a307      	add	r3, pc, #28	; (adr r3, 8004cc0 <scalbn+0xd0>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	e7e0      	b.n	8004c6a <scalbn+0x7a>
 8004ca8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cac:	3236      	adds	r2, #54	; 0x36
 8004cae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <scalbn+0xe8>)
 8004cbe:	e7b2      	b.n	8004c26 <scalbn+0x36>
 8004cc0:	c2f8f359 	.word	0xc2f8f359
 8004cc4:	01a56e1f 	.word	0x01a56e1f
 8004cc8:	8800759c 	.word	0x8800759c
 8004ccc:	7e37e43c 	.word	0x7e37e43c
 8004cd0:	43500000 	.word	0x43500000
 8004cd4:	ffff3cb0 	.word	0xffff3cb0
 8004cd8:	3c900000 	.word	0x3c900000

08004cdc <copysign>:
 8004cdc:	ec51 0b10 	vmov	r0, r1, d0
 8004ce0:	ee11 0a90 	vmov	r0, s3
 8004ce4:	ee10 2a10 	vmov	r2, s0
 8004ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004cf0:	ea41 0300 	orr.w	r3, r1, r0
 8004cf4:	ec43 2b10 	vmov	d0, r2, r3
 8004cf8:	4770      	bx	lr
	...

08004cfc <_init>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr

08004d08 <_fini>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr
