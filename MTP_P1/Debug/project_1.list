
project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005054  08005054  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005054  08005054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800505c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08005068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08005068  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cde8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c41  00000000  00000000  0002ce24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc8  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002f730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fce  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b12f  00000000  00000000  000522de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d084b  00000000  00000000  0005d40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012dc58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e8  00000000  00000000  0012dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fec 	.word	0x08004fec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004fec 	.word	0x08004fec

080001d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__NVIC_GetPriorityGrouping+0x18>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	0a1b      	lsrs	r3, r3, #8
 80001de:	f003 0307 	and.w	r3, r3, #7
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	db0b      	blt.n	800021a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	f003 021f 	and.w	r2, r3, #31
 8000208:	4907      	ldr	r1, [pc, #28]	; (8000228 <__NVIC_EnableIRQ+0x38>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	095b      	lsrs	r3, r3, #5
 8000210:	2001      	movs	r0, #1
 8000212:	fa00 f202 	lsl.w	r2, r0, r2
 8000216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000e100 	.word	0xe000e100

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	; (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	; (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	; 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
	...

08000308 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d028      	beq.n	800036a <LL_TIM_OC_DisableFast+0x62>
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b04      	cmp	r3, #4
 800031c:	d023      	beq.n	8000366 <LL_TIM_OC_DisableFast+0x5e>
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	2b10      	cmp	r3, #16
 8000322:	d01e      	beq.n	8000362 <LL_TIM_OC_DisableFast+0x5a>
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b40      	cmp	r3, #64	; 0x40
 8000328:	d019      	beq.n	800035e <LL_TIM_OC_DisableFast+0x56>
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000330:	d013      	beq.n	800035a <LL_TIM_OC_DisableFast+0x52>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000338:	d00d      	beq.n	8000356 <LL_TIM_OC_DisableFast+0x4e>
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000340:	d007      	beq.n	8000352 <LL_TIM_OC_DisableFast+0x4a>
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000348:	d101      	bne.n	800034e <LL_TIM_OC_DisableFast+0x46>
 800034a:	2307      	movs	r3, #7
 800034c:	e00e      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 800034e:	2308      	movs	r3, #8
 8000350:	e00c      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 8000352:	2306      	movs	r3, #6
 8000354:	e00a      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 8000356:	2305      	movs	r3, #5
 8000358:	e008      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 800035a:	2304      	movs	r3, #4
 800035c:	e006      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 800035e:	2303      	movs	r3, #3
 8000360:	e004      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 8000362:	2302      	movs	r3, #2
 8000364:	e002      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 8000366:	2301      	movs	r3, #1
 8000368:	e000      	b.n	800036c <LL_TIM_OC_DisableFast+0x64>
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3318      	adds	r3, #24
 8000372:	4619      	mov	r1, r3
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <LL_TIM_OC_DisableFast+0x9c>)
 8000378:	5cd3      	ldrb	r3, [r2, r3]
 800037a:	440b      	add	r3, r1
 800037c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	4908      	ldr	r1, [pc, #32]	; (80003a8 <LL_TIM_OC_DisableFast+0xa0>)
 8000386:	5ccb      	ldrb	r3, [r1, r3]
 8000388:	4619      	mov	r1, r3
 800038a:	2304      	movs	r3, #4
 800038c:	408b      	lsls	r3, r1
 800038e:	43db      	mvns	r3, r3
 8000390:	401a      	ands	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	601a      	str	r2, [r3, #0]

}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	08005004 	.word	0x08005004
 80003a8:	08005010 	.word	0x08005010

080003ac <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d028      	beq.n	800040e <LL_TIM_OC_EnablePreload+0x62>
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d023      	beq.n	800040a <LL_TIM_OC_EnablePreload+0x5e>
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b10      	cmp	r3, #16
 80003c6:	d01e      	beq.n	8000406 <LL_TIM_OC_EnablePreload+0x5a>
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	2b40      	cmp	r3, #64	; 0x40
 80003cc:	d019      	beq.n	8000402 <LL_TIM_OC_EnablePreload+0x56>
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003d4:	d013      	beq.n	80003fe <LL_TIM_OC_EnablePreload+0x52>
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003dc:	d00d      	beq.n	80003fa <LL_TIM_OC_EnablePreload+0x4e>
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003e4:	d007      	beq.n	80003f6 <LL_TIM_OC_EnablePreload+0x4a>
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003ec:	d101      	bne.n	80003f2 <LL_TIM_OC_EnablePreload+0x46>
 80003ee:	2307      	movs	r3, #7
 80003f0:	e00e      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 80003f2:	2308      	movs	r3, #8
 80003f4:	e00c      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 80003f6:	2306      	movs	r3, #6
 80003f8:	e00a      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 80003fa:	2305      	movs	r3, #5
 80003fc:	e008      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 80003fe:	2304      	movs	r3, #4
 8000400:	e006      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 8000402:	2303      	movs	r3, #3
 8000404:	e004      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 8000406:	2302      	movs	r3, #2
 8000408:	e002      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 800040a:	2301      	movs	r3, #1
 800040c:	e000      	b.n	8000410 <LL_TIM_OC_EnablePreload+0x64>
 800040e:	2300      	movs	r3, #0
 8000410:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3318      	adds	r3, #24
 8000416:	4619      	mov	r1, r3
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <LL_TIM_OC_EnablePreload+0x98>)
 800041c:	5cd3      	ldrb	r3, [r2, r3]
 800041e:	440b      	add	r3, r1
 8000420:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	4907      	ldr	r1, [pc, #28]	; (8000448 <LL_TIM_OC_EnablePreload+0x9c>)
 800042a:	5ccb      	ldrb	r3, [r1, r3]
 800042c:	4619      	mov	r1, r3
 800042e:	2308      	movs	r3, #8
 8000430:	408b      	lsls	r3, r1
 8000432:	431a      	orrs	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	08005004 	.word	0x08005004
 8000448:	08005010 	.word	0x08005010

0800044c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800045e:	f023 0307 	bic.w	r3, r3, #7
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	609a      	str	r2, [r3, #8]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	605a      	str	r2, [r3, #4]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @note   OC5 and OC6 are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	605a      	str	r2, [r3, #4]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	609a      	str	r2, [r3, #8]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f06f 0201 	mvn.w	r2, #1
 80004f0:	611a      	str	r2, [r3, #16]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	f043 0201 	orr.w	r2, r3, #1
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	60da      	str	r2, [r3, #12]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	60da      	str	r2, [r3, #12]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	4907      	ldr	r1, [pc, #28]	; (800056c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4313      	orrs	r3, r2
 8000552:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4013      	ands	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800055e:	68fb      	ldr	r3, [r7, #12]
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <LL_APB2_GRP1_EnableClock+0x2c>)
 800057a:	699a      	ldr	r2, [r3, #24]
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <LL_APB2_GRP1_EnableClock+0x2c>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4313      	orrs	r3, r2
 8000582:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000586:	699a      	ldr	r2, [r3, #24]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <LL_DMA_EnableChannel+0x3c>)
 80005b0:	5cd3      	ldrb	r3, [r2, r3]
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	3a01      	subs	r2, #1
 80005be:	4907      	ldr	r1, [pc, #28]	; (80005dc <LL_DMA_EnableChannel+0x3c>)
 80005c0:	5c8a      	ldrb	r2, [r1, r2]
 80005c2:	4611      	mov	r1, r2
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	440a      	add	r2, r1
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	0800501c 	.word	0x0800501c

080005e0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <LL_DMA_SetDataTransferDirection+0x48>)
 80005f2:	5cd3      	ldrb	r3, [r2, r3]
 80005f4:	461a      	mov	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000600:	f023 0310 	bic.w	r3, r3, #16
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	3a01      	subs	r2, #1
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <LL_DMA_SetDataTransferDirection+0x48>)
 800060a:	5c8a      	ldrb	r2, [r1, r2]
 800060c:	4611      	mov	r1, r2
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	440a      	add	r2, r1
 8000612:	4611      	mov	r1, r2
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	0800501c 	.word	0x0800501c

0800062c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <LL_DMA_SetMode+0x44>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	461a      	mov	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f023 0220 	bic.w	r2, r3, #32
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3b01      	subs	r3, #1
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <LL_DMA_SetMode+0x44>)
 8000652:	5ccb      	ldrb	r3, [r1, r3]
 8000654:	4619      	mov	r1, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	440b      	add	r3, r1
 800065a:	4619      	mov	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4313      	orrs	r3, r2
 8000660:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	0800501c 	.word	0x0800501c

08000674 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	3b01      	subs	r3, #1
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	461a      	mov	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4413      	add	r3, r2
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	3b01      	subs	r3, #1
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <LL_DMA_SetPeriphIncMode+0x44>)
 800069a:	5ccb      	ldrb	r3, [r1, r3]
 800069c:	4619      	mov	r1, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	440b      	add	r3, r1
 80006a2:	4619      	mov	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	0800501c 	.word	0x0800501c

080006bc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <LL_DMA_SetMemoryIncMode+0x44>)
 80006ce:	5cd3      	ldrb	r3, [r2, r3]
 80006d0:	461a      	mov	r2, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4907      	ldr	r1, [pc, #28]	; (8000700 <LL_DMA_SetMemoryIncMode+0x44>)
 80006e2:	5ccb      	ldrb	r3, [r1, r3]
 80006e4:	4619      	mov	r1, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	440b      	add	r3, r1
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	0800501c 	.word	0x0800501c

08000704 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <LL_DMA_SetPeriphSize+0x44>)
 8000716:	5cd3      	ldrb	r3, [r2, r3]
 8000718:	461a      	mov	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4413      	add	r3, r2
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3b01      	subs	r3, #1
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <LL_DMA_SetPeriphSize+0x44>)
 800072a:	5ccb      	ldrb	r3, [r1, r3]
 800072c:	4619      	mov	r1, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	440b      	add	r3, r1
 8000732:	4619      	mov	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4313      	orrs	r3, r2
 8000738:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	0800501c 	.word	0x0800501c

0800074c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <LL_DMA_SetMemorySize+0x44>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	461a      	mov	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3b01      	subs	r3, #1
 8000770:	4907      	ldr	r1, [pc, #28]	; (8000790 <LL_DMA_SetMemorySize+0x44>)
 8000772:	5ccb      	ldrb	r3, [r1, r3]
 8000774:	4619      	mov	r1, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	440b      	add	r3, r1
 800077a:	4619      	mov	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	0800501c 	.word	0x0800501c

08000794 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	461a      	mov	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80007ba:	5ccb      	ldrb	r3, [r1, r3]
 80007bc:	4619      	mov	r1, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	440b      	add	r3, r1
 80007c2:	4619      	mov	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	600b      	str	r3, [r1, #0]
             Priority);
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	0800501c 	.word	0x0800501c

080007dc <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <LL_DMA_SetDataLength+0x44>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
 80007f0:	461a      	mov	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	041b      	lsls	r3, r3, #16
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	3a01      	subs	r2, #1
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <LL_DMA_SetDataLength+0x44>)
 8000802:	5c8a      	ldrb	r2, [r1, r2]
 8000804:	4611      	mov	r1, r2
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	440a      	add	r2, r1
 800080a:	4611      	mov	r1, r2
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	0800501c 	.word	0x0800501c

08000824 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	3b01      	subs	r3, #1
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <LL_DMA_SetMemoryAddress+0x2c>)
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	461a      	mov	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4413      	add	r3, r2
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	0800501c 	.word	0x0800501c

08000854 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3b01      	subs	r3, #1
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <LL_DMA_SetPeriphAddress+0x2c>)
 8000866:	5cd3      	ldrb	r3, [r2, r3]
 8000868:	461a      	mov	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6093      	str	r3, [r2, #8]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	0800501c 	.word	0x0800501c

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fdde 	bl	8001448 <HAL_Init>

  /* USER CODE BEGIN Init */
  machine_state	= STATE_CNT;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <main+0x68>)
 800088e:	2206      	movs	r2, #6
 8000890:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f837 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 fa95 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 800089a:	f000 fa6d 	bl	8000d78 <MX_DMA_Init>
  MX_TIM1_Init();
 800089e:	f000 f895 	bl	80009cc <MX_TIM1_Init>
  MX_TIM3_Init();
 80008a2:	f000 fa11 	bl	8000cc8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80008a6:	f000 f999 	bl	8000bdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM3);
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <main+0x6c>)
 80008ac:	f7ff fe19 	bl	80004e2 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM3);
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <main+0x6c>)
 80008b2:	f7ff fe24 	bl	80004fe <LL_TIM_EnableIT_UPDATE>

  LL_TIM_EnableDMAReq_CC1(TIM1);
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <main+0x70>)
 80008b8:	f7ff fe31 	bl	800051e <LL_TIM_EnableDMAReq_CC1>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&TIM1->CCR1);
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <main+0x74>)
 80008be:	2102      	movs	r1, #2
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <main+0x78>)
 80008c2:	f7ff ffc7 	bl	8000854 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_2, (uint32_t)&ccr1);
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <main+0x7c>)
 80008c8:	461a      	mov	r2, r3
 80008ca:	2102      	movs	r1, #2
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <main+0x78>)
 80008ce:	f7ff ffa9 	bl	8000824 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, 2);
 80008d2:	2202      	movs	r2, #2
 80008d4:	2102      	movs	r1, #2
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <main+0x78>)
 80008d8:	f7ff ff80 	bl	80007dc <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 80008dc:	2102      	movs	r1, #2
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <main+0x78>)
 80008e0:	f7ff fe5e 	bl	80005a0 <LL_DMA_EnableChannel>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    state_machine_executor();
 80008e4:	f000 fb24 	bl	8000f30 <state_machine_executor>
 80008e8:	e7fc      	b.n	80008e4 <main+0x60>
 80008ea:	bf00      	nop
 80008ec:	20000074 	.word	0x20000074
 80008f0:	40000400 	.word	0x40000400
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40012c34 	.word	0x40012c34
 80008fc:	40020000 	.word	0x40020000
 8000900:	200000c4 	.word	0x200000c4

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0a6      	sub	sp, #152	; 0x98
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800090e:	2228      	movs	r2, #40	; 0x28
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fb62 	bl	8004fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2258      	movs	r2, #88	; 0x58
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 fb54 	bl	8004fdc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000950:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f896 	bl	8001a94 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800096e:	f000 fa77 	bl	8000e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 ff96 	bl	80028c0 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800099a:	f000 fa61 	bl	8000e60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <SystemClock_Config+0xc4>)
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f96b 	bl	8002c8c <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80009bc:	f000 fa50 	bl	8000e60 <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3798      	adds	r7, #152	; 0x98
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	00301000 	.word	0x00301000

080009cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09e      	sub	sp, #120	; 0x78
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80009d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80009e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e6:	2220      	movs	r2, #32
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 faf6 	bl	8004fdc <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2228      	movs	r2, #40	; 0x28
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 faef 	bl	8004fdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000a0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a12:	f7ff fdad 	bl	8000570 <LL_APB2_GRP1_EnableClock>

  /* TIM1 DMA Init */
  
  /* TIM1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000a16:	2210      	movs	r2, #16
 8000a18:	2102      	movs	r1, #2
 8000a1a:	486d      	ldr	r0, [pc, #436]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a1c:	f7ff fde0 	bl	80005e0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_VERYHIGH);
 8000a20:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a24:	2102      	movs	r1, #2
 8000a26:	486a      	ldr	r0, [pc, #424]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a28:	f7ff feb4 	bl	8000794 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_CIRCULAR);
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4867      	ldr	r0, [pc, #412]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a32:	f7ff fdfb 	bl	800062c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4865      	ldr	r0, [pc, #404]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a3c:	f7ff fe1a 	bl	8000674 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_NOINCREMENT);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4862      	ldr	r0, [pc, #392]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a46:	f7ff fe39 	bl	80006bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_HALFWORD);
 8000a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4e:	2102      	movs	r1, #2
 8000a50:	485f      	ldr	r0, [pc, #380]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a52:	f7ff fe57 	bl	8000704 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_HALFWORD);
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	485c      	ldr	r0, [pc, #368]	; (8000bd0 <MX_TIM1_Init+0x204>)
 8000a5e:	f7ff fe75 	bl	800074c <LL_DMA_SetMemorySize>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8000a62:	f7ff fbb7 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc07 	bl	8000280 <NVIC_EncodePriority>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4619      	mov	r1, r3
 8000a76:	2019      	movs	r0, #25
 8000a78:	f7ff fbd8 	bl	800022c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f7ff fbb7 	bl	80001f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_UP;
 8000a88:	2340      	movs	r3, #64	; 0x40
 8000a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 7999;
 8000a8c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	484c      	ldr	r0, [pc, #304]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000aa2:	f003 fe2d 	bl	8004700 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000aa6:	484b      	ldr	r0, [pc, #300]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000aa8:	f7ff fc1d 	bl	80002e6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4849      	ldr	r0, [pc, #292]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000ab0:	f7ff fccc 	bl	800044c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4847      	ldr	r0, [pc, #284]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000ab8:	f7ff fc78 	bl	80003ac <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000abc:	2360      	movs	r3, #96	; 0x60
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000ae6:	f003 fea3 	bl	8004830 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	4839      	ldr	r0, [pc, #228]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000aee:	f7ff fc0b 	bl	8000308 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
 8000af2:	2110      	movs	r1, #16
 8000af4:	4837      	ldr	r0, [pc, #220]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000af6:	f7ff fc59 	bl	80003ac <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000b02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b06:	461a      	mov	r2, r3
 8000b08:	2110      	movs	r1, #16
 8000b0a:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000b0c:	f003 fe90 	bl	8004830 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8000b10:	2110      	movs	r1, #16
 8000b12:	4830      	ldr	r0, [pc, #192]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000b14:	f7ff fbf8 	bl	8000308 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000b1c:	f7ff fcab 	bl	8000476 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000b20:	2100      	movs	r1, #0
 8000b22:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000b24:	f7ff fcba 	bl	800049c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000b28:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000b2a:	f7ff fcca 	bl	80004c2 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 77;
 8000b3a:	234d      	movs	r3, #77	; 0x4d
 8000b3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_TIM1_Init+0x208>)
 8000b68:	f003 feb0 	bl	80048cc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b70:	f7ff fce6 	bl	8000540 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b78:	f7ff fce2 	bl	8000540 <LL_AHB1_GRP1_EnableClock>
  PB13   ------> TIM1_CH1N
  PB14   ------> TIM1_CH2N
  PA8   ------> TIM1_CH1
  PA9   ------> TIM1_CH2 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8000b7c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b82:	2302      	movs	r3, #2
 8000b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000b92:	2306      	movs	r3, #6
 8000b94:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <MX_TIM1_Init+0x20c>)
 8000b9c:	f003 fcaf 	bl	80044fe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000ba0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f003 fc9c 	bl	80044fe <LL_GPIO_Init>

}
 8000bc6:	bf00      	nop
 8000bc8:	3778      	adds	r7, #120	; 0x78
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	48000400 	.word	0x48000400

08000bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000c16:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c18:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000c1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c26:	22f9      	movs	r2, #249	; 0xf9
 8000c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c36:	4823      	ldr	r0, [pc, #140]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c38:	f002 fa46 	bl	80030c8 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c42:	f000 f90d 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4619      	mov	r1, r3
 8000c52:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c54:	f002 fd7a 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c5e:	f000 f8ff 	bl	8000e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c64:	f002 fa87 	bl	8003176 <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c6e:	f000 f8f7 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4810      	ldr	r0, [pc, #64]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000c82:	f003 fa8d 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c8c:	f000 f8e8 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 124;
 8000c94:	237c      	movs	r3, #124	; 0x7c
 8000c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000ca8:	f002 fc40 	bl	800352c <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cb2:	f000 f8d5 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM2_Init+0xe8>)
 8000cb8:	f000 fa0c 	bl	80010d4 <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000078 	.word	0x20000078

08000cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000ce8:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <MX_TIM3_Init+0xac>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000cee:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 249;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000cfc:	22f9      	movs	r2, #249	; 0xf9
 8000cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000d0e:	f002 f9db 	bl	80030c8 <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d18:	f000 f8a2 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4619      	mov	r1, r3
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000d2a:	f002 fd0f 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d34:	f000 f894 	bl	8000e60 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d38:	2108      	movs	r1, #8
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000d3c:	f002 fa7c 	bl	8003238 <HAL_TIM_OnePulse_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d46:	f000 f88b 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000d58:	f003 fa22 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d62:	f000 f87d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000028 	.word	0x20000028
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_DMA_Init+0x48>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <MX_DMA_Init+0x48>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_DMA_Init+0x48>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d96:	f7ff fa1d 	bl	80001d4 <__NVIC_GetPriorityGrouping>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa6d 	bl	8000280 <NVIC_EncodePriority>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	200c      	movs	r0, #12
 8000dac:	f7ff fa3e 	bl	800022c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000db0:	200c      	movs	r0, #12
 8000db2:	f7ff fa1d 	bl	80001f0 <__NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_GPIO_Init+0x94>)
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_GPIO_Init+0x98>)
 8000e38:	f000 fc7e 	bl	8001738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2105      	movs	r1, #5
 8000e40:	2028      	movs	r0, #40	; 0x28
 8000e42:	f000 fc42 	bl	80016ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e46:	2028      	movs	r0, #40	; 0x28
 8000e48:	f000 fc5b 	bl	8001702 <HAL_NVIC_EnableIRQ>

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	48000800 	.word	0x48000800

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <LL_TIM_EnableCounter>:
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_TIM_DisableCounter>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 0201 	bic.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_TIM_CC_EnableChannel>:
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	621a      	str	r2, [r3, #32]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_TIM_EnableAllOutputs>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_TIM_DisableAllOutputs>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_TIM_EnableIT_UPDATE>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60da      	str	r2, [r3, #12]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <state_machine_executor>:
#include "prj.h"

extern uint8_t cnt_dir;

void state_machine_executor(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	switch(machine_state)
 8000f34:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <state_machine_executor+0xc0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d852      	bhi.n	8000fe2 <state_machine_executor+0xb2>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <state_machine_executor+0x14>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f5d 	.word	0x08000f5d
 8000f48:	08000feb 	.word	0x08000feb
 8000f4c:	08000f99 	.word	0x08000f99
 8000f50:	08000feb 	.word	0x08000feb
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000feb 	.word	0x08000feb
	{
	case BLINKY_4HZ:
		// turn off PWM
		LL_TIM_DisableCounter(TIM1);
 8000f5c:	4825      	ldr	r0, [pc, #148]	; (8000ff4 <state_machine_executor+0xc4>)
 8000f5e:	f7ff ff96 	bl	8000e8e <LL_TIM_DisableCounter>
		LL_TIM_DisableAllOutputs(TIM1);
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <state_machine_executor+0xc4>)
 8000f64:	f7ff ffc4 	bl	8000ef0 <LL_TIM_DisableAllOutputs>

		// turn on LED
		TIM2->CCR1 = 124;	// LED PWM 50%
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6c:	227c      	movs	r2, #124	; 0x7c
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
		LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000f70:	2101      	movs	r1, #1
 8000f72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f76:	f7ff ff9a 	bl	8000eae <LL_TIM_CC_EnableChannel>
		LL_TIM_EnableAllOutputs(TIM2);
 8000f7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f7e:	f7ff ffa7 	bl	8000ed0 <LL_TIM_EnableAllOutputs>
		LL_TIM_EnableCounter(TIM2);
 8000f82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f86:	f7ff ff72 	bl	8000e6e <LL_TIM_EnableCounter>
		machine_state++;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <state_machine_executor+0xc0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <state_machine_executor+0xc0>)
 8000f94:	701a      	strb	r2, [r3, #0]
		break;
 8000f96:	e029      	b.n	8000fec <state_machine_executor+0xbc>
	case BLINKY_W8:
		// idle
		break;

	case CNT_UP_DOWN:
		TIM2->CCR1 = 249; // LED PWM 100%
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	22f9      	movs	r2, #249	; 0xf9
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
		cnt_dir = 1; // up
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <state_machine_executor+0xc8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N);
 8000fa6:	2155      	movs	r1, #85	; 0x55
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <state_machine_executor+0xc4>)
 8000faa:	f7ff ff80 	bl	8000eae <LL_TIM_CC_EnableChannel>
		LL_TIM_EnableAllOutputs(TIM1);
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <state_machine_executor+0xc4>)
 8000fb0:	f7ff ff8e 	bl	8000ed0 <LL_TIM_EnableAllOutputs>
		LL_TIM_EnableCounter(TIM1);
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <state_machine_executor+0xc4>)
 8000fb6:	f7ff ff5a 	bl	8000e6e <LL_TIM_EnableCounter>
		LL_TIM_EnableIT_UPDATE(TIM1);
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <state_machine_executor+0xc4>)
 8000fbc:	f7ff ffa8 	bl	8000f10 <LL_TIM_EnableIT_UPDATE>

		machine_state++;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <state_machine_executor+0xc0>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <state_machine_executor+0xc0>)
 8000fca:	701a      	strb	r2, [r3, #0]
		break;
 8000fcc:	e00e      	b.n	8000fec <state_machine_executor+0xbc>
	case CNT_UP_W8:
		// idle
		break;

	case SQUARE_WAVE:
		cnt_dir = 1; // up
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <state_machine_executor+0xc8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
		// everything is enabled from previous step
		machine_state++;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <state_machine_executor+0xc0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <state_machine_executor+0xc0>)
 8000fde:	701a      	strb	r2, [r3, #0]
		break;
 8000fe0:	e004      	b.n	8000fec <state_machine_executor+0xbc>
	case SQUARE_WAVE_W8:
		// idle
		break;
	default:
		machine_state = BLINKY_4HZ;
 8000fe2:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <state_machine_executor+0xc0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
	}
}
 8000fe8:	e000      	b.n	8000fec <state_machine_executor+0xbc>
		break;
 8000fea:	bf00      	nop
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000074 	.word	0x20000074
 8000ff4:	40012c00 	.word	0x40012c00
 8000ff8:	200000c8 	.word	0x200000c8

08000ffc <increase_state>:

void increase_state(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	machine_state++;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <increase_state+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <increase_state+0x1c>)
 800100a:	701a      	strb	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000074 	.word	0x20000074

0800101c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_TIM_Base_MspInit+0x68>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_TIM_Base_MspInit+0x68>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_TIM_Base_MspInit+0x68>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800108e:	e018      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_TIM_Base_MspInit+0x6c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d113      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x68>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_TIM_Base_MspInit+0x68>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_TIM_Base_MspInit+0x68>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2106      	movs	r1, #6
 80010b6:	201d      	movs	r0, #29
 80010b8:	f000 fb07 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010bc:	201d      	movs	r0, #29
 80010be:	f000 fb20 	bl	8001702 <HAL_NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40000400 	.word	0x40000400

080010d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d11c      	bne.n	8001130 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_TIM_MspPostInit+0x64>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_TIM_MspPostInit+0x64>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_TIM_MspPostInit+0x64>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800110e:	2320      	movs	r3, #32
 8001110:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fb04 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000

0800113c <LL_TIM_EnableCounter>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_TIM_ClearFlag_UPDATE>:
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f06f 0201 	mvn.w	r2, #1
 800116a:	611a      	str	r2, [r3, #16]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_DMA_ClearFlag_GI2>:
  * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2210      	movs	r2, #16
 8001184:	605a      	str	r2, [r3, #4]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <HardFault_Handler+0x4>

080011a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <BusFault_Handler+0x4>

080011b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <UsageFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e6:	f000 f975 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  LL_DMA_ClearFlag_GI2(DMA1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA1_Channel2_IRQHandler+0x10>)
 80011f6:	f7ff ffbf 	bl	8001178 <LL_DMA_ClearFlag_GI2>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020000 	.word	0x40020000

08001204 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 8001208:	4853      	ldr	r0, [pc, #332]	; (8001358 <TIM1_UP_TIM16_IRQHandler+0x154>)
 800120a:	f7ff ffa7 	bl	800115c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  l_cnt++;
 800120e:	4b53      	ldr	r3, [pc, #332]	; (800135c <TIM1_UP_TIM16_IRQHandler+0x158>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a51      	ldr	r2, [pc, #324]	; (800135c <TIM1_UP_TIM16_IRQHandler+0x158>)
 8001216:	6013      	str	r3, [r2, #0]
  if (l_cnt > COUNTER_2HZ_CNT) {
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <TIM1_UP_TIM16_IRQHandler+0x158>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001360 <TIM1_UP_TIM16_IRQHandler+0x15c>
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	dc00      	bgt.n	8001234 <TIM1_UP_TIM16_IRQHandler+0x30>
	  }

	  l_cnt = 0;
  }
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001232:	e08f      	b.n	8001354 <TIM1_UP_TIM16_IRQHandler+0x150>
	  if (u_q15 >= FtoQ15(0.99f)) cnt_dir = 0;
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	f647 62b7 	movw	r2, #32439	; 0x7eb7
 800123e:	4293      	cmp	r3, r2
 8001240:	dd03      	ble.n	800124a <TIM1_UP_TIM16_IRQHandler+0x46>
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <TIM1_UP_TIM16_IRQHandler+0x164>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e008      	b.n	800125c <TIM1_UP_TIM16_IRQHandler+0x58>
	  else if (u_q15 <= FtoQ15(-0.99f)) cnt_dir = 1;
 800124a:	4b46      	ldr	r3, [pc, #280]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 800124c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001250:	4a46      	ldr	r2, [pc, #280]	; (800136c <TIM1_UP_TIM16_IRQHandler+0x168>)
 8001252:	4293      	cmp	r3, r2
 8001254:	da02      	bge.n	800125c <TIM1_UP_TIM16_IRQHandler+0x58>
 8001256:	4b44      	ldr	r3, [pc, #272]	; (8001368 <TIM1_UP_TIM16_IRQHandler+0x164>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
	  if (cnt_dir == 1) u_q15 += FtoQ15(COUNTER_2HZ_STEP);
 800125c:	4b42      	ldr	r3, [pc, #264]	; (8001368 <TIM1_UP_TIM16_IRQHandler+0x164>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d109      	bne.n	8001278 <TIM1_UP_TIM16_IRQHandler+0x74>
 8001264:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	b29b      	uxth	r3, r3
 800126c:	3320      	adds	r3, #32
 800126e:	b29b      	uxth	r3, r3
 8001270:	b21a      	sxth	r2, r3
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	e00c      	b.n	8001292 <TIM1_UP_TIM16_IRQHandler+0x8e>
	  else if (cnt_dir == 0) u_q15 -= FtoQ15(COUNTER_2HZ_STEP);
 8001278:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <TIM1_UP_TIM16_IRQHandler+0x164>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d108      	bne.n	8001292 <TIM1_UP_TIM16_IRQHandler+0x8e>
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	b29b      	uxth	r3, r3
 8001288:	3b20      	subs	r3, #32
 800128a:	b29b      	uxth	r3, r3
 800128c:	b21a      	sxth	r2, r3
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 8001290:	801a      	strh	r2, [r3, #0]
	  if (machine_state == CNT_UP_W8) {
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <TIM1_UP_TIM16_IRQHandler+0x16c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d122      	bne.n	80012e0 <TIM1_UP_TIM16_IRQHandler+0xdc>
		  ccr1 = UtoCCR1(u_q15);
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	0fda      	lsrs	r2, r3, #31
 80012a2:	4413      	add	r3, r2
 80012a4:	105b      	asrs	r3, r3, #1
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012ac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	13db      	asrs	r3, r3, #15
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <TIM1_UP_TIM16_IRQHandler+0x170>)
 80012ba:	801a      	strh	r2, [r3, #0]
		  TIM1->CCR2 = UtoCCR2(u_q15);
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <TIM1_UP_TIM16_IRQHandler+0x160>)
 80012be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c2:	425b      	negs	r3, r3
 80012c4:	0fda      	lsrs	r2, r3, #31
 80012c6:	4413      	add	r3, r2
 80012c8:	105b      	asrs	r3, r3, #1
 80012ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	13db      	asrs	r3, r3, #15
 80012d8:	b21a      	sxth	r2, r3
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <TIM1_UP_TIM16_IRQHandler+0x154>)
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38
 80012de:	e036      	b.n	800134e <TIM1_UP_TIM16_IRQHandler+0x14a>
	  } else if (machine_state == SQUARE_WAVE_W8) {
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <TIM1_UP_TIM16_IRQHandler+0x16c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d132      	bne.n	800134e <TIM1_UP_TIM16_IRQHandler+0x14a>
		  if (cnt_dir == 1) {
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <TIM1_UP_TIM16_IRQHandler+0x164>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d104      	bne.n	80012fa <TIM1_UP_TIM16_IRQHandler+0xf6>
			  l_u_q15 = FtoQ15(0.5f);
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <TIM1_UP_TIM16_IRQHandler+0x174>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	801a      	strh	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <TIM1_UP_TIM16_IRQHandler+0x106>
		  } else if (cnt_dir == 0) {
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <TIM1_UP_TIM16_IRQHandler+0x164>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d103      	bne.n	800130a <TIM1_UP_TIM16_IRQHandler+0x106>
			  l_u_q15 = FtoQ15(-0.5f);
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <TIM1_UP_TIM16_IRQHandler+0x174>)
 8001304:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001308:	801a      	strh	r2, [r3, #0]
		  ccr1 = UtoCCR1(l_u_q15);
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <TIM1_UP_TIM16_IRQHandler+0x174>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	0fda      	lsrs	r2, r3, #31
 8001312:	4413      	add	r3, r2
 8001314:	105b      	asrs	r3, r3, #1
 8001316:	b21b      	sxth	r3, r3
 8001318:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800131c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	13db      	asrs	r3, r3, #15
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <TIM1_UP_TIM16_IRQHandler+0x170>)
 800132a:	801a      	strh	r2, [r3, #0]
		  TIM1->CCR2 = UtoCCR2(l_u_q15);
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <TIM1_UP_TIM16_IRQHandler+0x174>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	425b      	negs	r3, r3
 8001334:	0fda      	lsrs	r2, r3, #31
 8001336:	4413      	add	r3, r2
 8001338:	105b      	asrs	r3, r3, #1
 800133a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800133e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	13db      	asrs	r3, r3, #15
 8001348:	b21a      	sxth	r2, r3
 800134a:	4b03      	ldr	r3, [pc, #12]	; (8001358 <TIM1_UP_TIM16_IRQHandler+0x154>)
 800134c:	639a      	str	r2, [r3, #56]	; 0x38
	  l_cnt = 0;
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <TIM1_UP_TIM16_IRQHandler+0x158>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40012c00 	.word	0x40012c00
 800135c:	200000cc 	.word	0x200000cc
 8001360:	407ff7d0 	.word	0x407ff7d0
 8001364:	200000ca 	.word	0x200000ca
 8001368:	200000c8 	.word	0x200000c8
 800136c:	ffff8149 	.word	0xffff8149
 8001370:	20000074 	.word	0x20000074
 8001374:	200000c4 	.word	0x200000c4
 8001378:	200000c6 	.word	0x200000c6

0800137c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  EXTI->IMR |= GPIO_PIN_13;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <TIM3_IRQHandler+0x20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <TIM3_IRQHandler+0x20>)
 8001386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <TIM3_IRQHandler+0x24>)
 800138e:	f001 ffad 	bl	80032ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  increase_state();
 8001392:	f7ff fe33 	bl	8000ffc <increase_state>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000028 	.word	0x20000028

080013a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  EXTI->IMR &= ~GPIO_PIN_13;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <EXTI15_10_IRQHandler+0x24>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <EXTI15_10_IRQHandler+0x24>)
 80013ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013b2:	6013      	str	r3, [r2, #0]
  LL_TIM_EnableCounter(TIM3);
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <EXTI15_10_IRQHandler+0x28>)
 80013b6:	f7ff fec1 	bl	800113c <LL_TIM_EnableCounter>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013be:	f000 fb45 	bl	8001a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40010400 	.word	0x40010400
 80013cc:	40000400 	.word	0x40000400

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0b      	ldr	r4, [pc, #44]	; (8001440 <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800141e:	f7ff ffd7 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001422:	f003 fdb7 	bl	8004f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001426:	f7ff fa2d 	bl	8000884 <main>

0800142a <LoopForever>:

LoopForever:
    b LoopForever
 800142a:	e7fe      	b.n	800142a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800142c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001438:	0800505c 	.word	0x0800505c
  ldr r2, =_sbss
 800143c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001440:	200000d4 	.word	0x200000d4

08001444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_2_IRQHandler>
	...

08001448 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_Init+0x28>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x28>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f92b 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
 8001460:	f000 f808 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fdda 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x54>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x58>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f943 	bl	800171e <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 f90b 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_InitTick+0x5c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000004 	.word	0x20000004

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008
 80014f8:	200000d0 	.word	0x200000d0

080014fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200000d0 	.word	0x200000d0

08001514 <__NVIC_SetPriorityGrouping>:
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff29 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff3e 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff31 	bl	8001578 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e160      	b.n	8001a0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8152 	beq.w	8001a04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d00b      	beq.n	8001780 <HAL_GPIO_Init+0x48>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001774:	2b11      	cmp	r3, #17
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b12      	cmp	r3, #18
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0xea>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b12      	cmp	r3, #18
 8001820:	d123      	bne.n	800186a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80ac 	beq.w	8001a04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b5b      	ldr	r3, [pc, #364]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c4:	4a59      	ldr	r2, [pc, #356]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ee:	d025      	beq.n	800193c <HAL_GPIO_Init+0x204>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x2f8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d01f      	beq.n	8001938 <HAL_GPIO_Init+0x200>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x2fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d019      	beq.n	8001934 <HAL_GPIO_Init+0x1fc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_GPIO_Init+0x1f8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x304>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00d      	beq.n	800192c <HAL_GPIO_Init+0x1f4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x308>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d007      	beq.n	8001928 <HAL_GPIO_Init+0x1f0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_GPIO_Init+0x30c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_GPIO_Init+0x1ec>
 8001920:	2306      	movs	r3, #6
 8001922:	e00c      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001924:	2307      	movs	r3, #7
 8001926:	e00a      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001928:	2305      	movs	r3, #5
 800192a:	e008      	b.n	800193e <HAL_GPIO_Init+0x206>
 800192c:	2304      	movs	r3, #4
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001930:	2303      	movs	r3, #3
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x206>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x206>
 800193c:	2300      	movs	r3, #0
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800194e:	4937      	ldr	r1, [pc, #220]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195c:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_GPIO_Init+0x310>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x310>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_GPIO_Init+0x310>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f47f ae97 	bne.w	8001748 <HAL_GPIO_Init+0x10>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	48000400 	.word	0x48000400
 8001a34:	48000800 	.word	0x48000800
 8001a38:	48000c00 	.word	0x48000c00
 8001a3c:	48001000 	.word	0x48001000
 8001a40:	48001400 	.word	0x48001400
 8001a44:	48001800 	.word	0x48001800
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f806 	bl	8001a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f000 bf01 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8160 	beq.w	8001d7e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001abe:	4bae      	ldr	r3, [pc, #696]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aca:	4bab      	ldr	r3, [pc, #684]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d159      	bne.n	8001b8a <HAL_RCC_OscConfig+0xf6>
 8001ad6:	4ba8      	ldr	r3, [pc, #672]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d152      	bne.n	8001b8a <HAL_RCC_OscConfig+0xf6>
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_OscConfig+0x82>
 8001b10:	4b99      	ldr	r3, [pc, #612]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0xae>
 8001b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b3e:	4b8e      	ldr	r3, [pc, #568]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b4e:	fa92 f2a2 	rbit	r2, r2
 8001b52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8102 	beq.w	8001d7c <HAL_RCC_OscConfig+0x2e8>
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80fc 	bne.w	8001d7c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f000 be93 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x110>
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e030      	b.n	8001c06 <HAL_RCC_OscConfig+0x172>
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x134>
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01e      	b.n	8001c06 <HAL_RCC_OscConfig+0x172>
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0x15a>
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a67      	ldr	r2, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a64      	ldr	r2, [pc, #400]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0x172>
 8001bee:	4b62      	ldr	r3, [pc, #392]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a61      	ldr	r2, [pc, #388]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d059      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fc74 	bl	80014fc <HAL_GetTick>
 8001c14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fc6f 	bl	80014fc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d902      	bls.n	8001c30 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	f000 be40 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>
 8001c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c34:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1ce>
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x1fa>
 8001c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c82:	fa93 f3a3 	rbit	r3, r3
 8001c86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c92:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c9a:	fa92 f2a2 	rbit	r2, r2
 8001c9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ca2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f042 0220 	orr.w	r2, r2, #32
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	f002 021f 	and.w	r2, r2, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ab      	beq.n	8001c1a <HAL_RCC_OscConfig+0x186>
 8001cc2:	e05c      	b.n	8001d7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc1a 	bl	80014fc <HAL_GetTick>
 8001cc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cce:	f7ff fc15 	bl	80014fc <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f000 bde6 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>
 8001ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001cf8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_OscConfig+0x282>
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x2ae>
 8001d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_RCC_OscConfig+0x2e4>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ab      	bne.n	8001cce <HAL_RCC_OscConfig+0x23a>
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_OscConfig+0x2ea>
 8001d78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8170 	beq.w	800206e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d8e:	4bd0      	ldr	r3, [pc, #832]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9a:	4bcd      	ldr	r3, [pc, #820]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d16d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3ee>
 8001da6:	4bca      	ldr	r3, [pc, #808]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db2:	d166      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3ee>
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001dc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0x350>
 8001dde:	4bbc      	ldr	r3, [pc, #752]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e013      	b.n	8001e0c <HAL_RCC_OscConfig+0x378>
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dfc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e08:	4bb1      	ldr	r3, [pc, #708]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e12:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e16:	fa92 f2a2 	rbit	r2, r2
 8001e1a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3ba>
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d002      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f000 bd31 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	21f8      	movs	r1, #248	; 0xf8
 8001e5e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e66:	fa91 f1a1 	rbit	r1, r1
 8001e6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e72:	fab1 f181 	clz	r1, r1
 8001e76:	b2c9      	uxtb	r1, r1
 8001e78:	408b      	lsls	r3, r1
 8001e7a:	4995      	ldr	r1, [pc, #596]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e80:	e0f5      	b.n	800206e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8085 	beq.w	8001f98 <HAL_RCC_OscConfig+0x504>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ea0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fb1f 	bl	80014fc <HAL_GetTick>
 8001ebe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fb1a 	bl	80014fc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d902      	bls.n	8001eda <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f000 bceb 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001eec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d102      	bne.n	8001f0a <HAL_RCC_OscConfig+0x476>
 8001f04:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	e013      	b.n	8001f32 <HAL_RCC_OscConfig+0x49e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f22:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f2e:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2202      	movs	r2, #2
 8001f34:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f38:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f44:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f002 021f 	and.w	r2, r2, #31
 8001f58:	2101      	movs	r1, #1
 8001f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0af      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b5a      	ldr	r3, [pc, #360]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	21f8      	movs	r1, #248	; 0xf8
 8001f74:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001f7c:	fa91 f1a1 	rbit	r1, r1
 8001f80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f88:	fab1 f181 	clz	r1, r1
 8001f8c:	b2c9      	uxtb	r1, r1
 8001f8e:	408b      	lsls	r3, r1
 8001f90:	494f      	ldr	r1, [pc, #316]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
 8001f96:	e06a      	b.n	800206e <HAL_RCC_OscConfig+0x5da>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001faa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fa9a 	bl	80014fc <HAL_GetTick>
 8001fc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff fa95 	bl	80014fc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d902      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	f000 bc66 	b.w	80028b0 <HAL_RCC_OscConfig+0xe1c>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ff6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	095b      	lsrs	r3, r3, #5
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <HAL_RCC_OscConfig+0x580>
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	e013      	b.n	800203c <HAL_RCC_OscConfig+0x5a8>
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800202c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_OscConfig+0x63c>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	2202      	movs	r2, #2
 800203e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002042:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002046:	fa92 f2a2 	rbit	r2, r2
 800204a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800204e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f042 0220 	orr.w	r2, r2, #32
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1af      	bne.n	8001fce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80da 	beq.w	8002232 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d069      	beq.n	800215c <HAL_RCC_OscConfig+0x6c8>
 8002088:	2301      	movs	r3, #1
 800208a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800209a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x640>)
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	461a      	mov	r2, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fa23 	bl	80014fc <HAL_GetTick>
 80020b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	e00d      	b.n	80020d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020bc:	f7ff fa1e 	bl	80014fc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d905      	bls.n	80020d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e3ef      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 80020d0:	40021000 	.word	0x40021000
 80020d4:	10908120 	.word	0x10908120
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020f0:	2202      	movs	r2, #2
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002108:	2202      	movs	r2, #2
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	fa93 f2a3 	rbit	r2, r3
 8002116:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800211a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211c:	4ba4      	ldr	r3, [pc, #656]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 800211e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002120:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002124:	2102      	movs	r1, #2
 8002126:	6019      	str	r1, [r3, #0]
 8002128:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f1a3 	rbit	r1, r3
 8002132:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002136:	6019      	str	r1, [r3, #0]
  return result;
 8002138:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0b0      	beq.n	80020bc <HAL_RCC_OscConfig+0x628>
 800215a:	e06a      	b.n	8002232 <HAL_RCC_OscConfig+0x79e>
 800215c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002172:	601a      	str	r2, [r3, #0]
  return result;
 8002174:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002178:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x920>)
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	461a      	mov	r2, r3
 800218a:	2300      	movs	r3, #0
 800218c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff f9b5 	bl	80014fc <HAL_GetTick>
 8002192:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002196:	e009      	b.n	80021ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f9b0 	bl	80014fc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e381      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 80021ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021b0:	2202      	movs	r2, #2
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021c8:	2202      	movs	r2, #2
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021e0:	2202      	movs	r2, #2
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80021f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021fc:	2102      	movs	r1, #2
 80021fe:	6019      	str	r1, [r3, #0]
 8002200:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f1a3 	rbit	r1, r3
 800220a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800220e:	6019      	str	r1, [r3, #0]
  return result;
 8002210:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1b2      	bne.n	8002198 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8157 	beq.w	80024f0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d112      	bne.n	800227a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	61d3      	str	r3, [r2, #28]
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b4f      	ldr	r3, [pc, #316]	; (80023b8 <HAL_RCC_OscConfig+0x924>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11a      	bne.n	80022bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x924>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <HAL_RCC_OscConfig+0x924>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7ff f933 	bl	80014fc <HAL_GetTick>
 8002296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	e009      	b.n	80022b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7ff f92e 	bl	80014fc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	; 0x64
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e2ff      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x924>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x840>
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	e02f      	b.n	8002334 <HAL_RCC_OscConfig+0x8a0>
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x864>
 80022de:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a33      	ldr	r2, [pc, #204]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a30      	ldr	r2, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	e01d      	b.n	8002334 <HAL_RCC_OscConfig+0x8a0>
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x888>
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x8a0>
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d06a      	beq.n	8002414 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff f8dd 	bl	80014fc <HAL_GetTick>
 8002342:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff f8d8 	bl	80014fc <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e2a7      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 8002360:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002364:	2202      	movs	r2, #2
 8002366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800237c:	2202      	movs	r2, #2
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800238e:	601a      	str	r2, [r3, #0]
  return result;
 8002390:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002394:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d108      	bne.n	80023bc <HAL_RCC_OscConfig+0x928>
 80023aa:	4b01      	ldr	r3, [pc, #4]	; (80023b0 <HAL_RCC_OscConfig+0x91c>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	e013      	b.n	80023d8 <HAL_RCC_OscConfig+0x944>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	10908120 	.word	0x10908120
 80023b8:	40007000 	.word	0x40007000
 80023bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	fa93 f2a3 	rbit	r2, r3
 80023ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4bc0      	ldr	r3, [pc, #768]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023dc:	2102      	movs	r1, #2
 80023de:	6011      	str	r1, [r2, #0]
 80023e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	fa92 f1a2 	rbit	r1, r2
 80023ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023ee:	6011      	str	r1, [r2, #0]
  return result;
 80023f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d09a      	beq.n	8002348 <HAL_RCC_OscConfig+0x8b4>
 8002412:	e063      	b.n	80024dc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff f872 	bl	80014fc <HAL_GetTick>
 8002418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff f86d 	bl	80014fc <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e23c      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 8002436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800243a:	2202      	movs	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002464:	601a      	str	r2, [r3, #0]
  return result;
 8002466:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800246a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d102      	bne.n	8002486 <HAL_RCC_OscConfig+0x9f2>
 8002480:	4b95      	ldr	r3, [pc, #596]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	e00d      	b.n	80024a2 <HAL_RCC_OscConfig+0xa0e>
 8002486:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800248a:	2202      	movs	r2, #2
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024a6:	2102      	movs	r1, #2
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	fa92 f1a2 	rbit	r1, r2
 80024b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024b8:	6011      	str	r1, [r2, #0]
  return result;
 80024ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1a0      	bne.n	800241e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b7c      	ldr	r3, [pc, #496]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a7b      	ldr	r2, [pc, #492]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80024ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 81d9 	beq.w	80028ae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	f000 81a6 	beq.w	8002856 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b02      	cmp	r3, #2
 8002512:	f040 811e 	bne.w	8002752 <HAL_RCC_OscConfig+0xcbe>
 8002516:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800251a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002534:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	461a      	mov	r2, r3
 8002548:	2300      	movs	r3, #0
 800254a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe ffd6 	bl	80014fc <HAL_GetTick>
 8002550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002554:	e009      	b.n	800256a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe ffd1 	bl	80014fc <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1a2      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 800256a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800256e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002582:	601a      	str	r2, [r3, #0]
  return result;
 8002584:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002588:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_OscConfig+0xb10>
 800259e:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	e01b      	b.n	80025dc <HAL_RCC_OscConfig+0xb48>
 80025a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e4:	6011      	str	r1, [r2, #0]
 80025e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fa92 f1a2 	rbit	r1, r2
 80025f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025f4:	6011      	str	r1, [r2, #0]
  return result;
 80025f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d19e      	bne.n	8002556 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f023 020f 	bic.w	r2, r3, #15
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	492c      	ldr	r1, [pc, #176]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 8002628:	4313      	orrs	r3, r2
 800262a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a19      	ldr	r1, [r3, #32]
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	430b      	orrs	r3, r1
 8002642:	4925      	ldr	r1, [pc, #148]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800264c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002660:	601a      	str	r2, [r3, #0]
  return result;
 8002662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002666:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002672:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	461a      	mov	r2, r3
 800267a:	2301      	movs	r3, #1
 800267c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe ff3d 	bl	80014fc <HAL_GetTick>
 8002682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe ff38 	bl	80014fc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e109      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 800269c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026b4:	601a      	str	r2, [r3, #0]
  return result;
 80026b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d105      	bne.n	80026dc <HAL_RCC_OscConfig+0xc48>
 80026d0:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <HAL_RCC_OscConfig+0xc44>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	e01e      	b.n	8002714 <HAL_RCC_OscConfig+0xc80>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0xe28>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fa92 f1a2 	rbit	r1, r2
 8002728:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800272c:	6011      	str	r1, [r2, #0]
  return result;
 800272e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	f002 021f 	and.w	r2, r2, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d09b      	beq.n	8002688 <HAL_RCC_OscConfig+0xbf4>
 8002750:	e0ad      	b.n	80028ae <HAL_RCC_OscConfig+0xe1a>
 8002752:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002770:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe feb8 	bl	80014fc <HAL_GetTick>
 800278c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe feb3 	bl	80014fc <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e084      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
 80027a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027be:	601a      	str	r2, [r3, #0]
  return result;
 80027c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0xd4c>
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_RCC_OscConfig+0xe28>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e01b      	b.n	8002818 <HAL_RCC_OscConfig+0xd84>
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f107 0320 	add.w	r3, r7, #32
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f107 0318 	add.w	r3, r7, #24
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCC_OscConfig+0xe28>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f107 0214 	add.w	r2, r7, #20
 800281c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	f107 0214 	add.w	r2, r7, #20
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fa92 f1a2 	rbit	r1, r2
 800282c:	f107 0210 	add.w	r2, r7, #16
 8002830:	6011      	str	r1, [r2, #0]
  return result;
 8002832:	f107 0210 	add.w	r2, r7, #16
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d19e      	bne.n	8002792 <HAL_RCC_OscConfig+0xcfe>
 8002854:	e02b      	b.n	80028ae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e025      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0xe28>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_RCC_OscConfig+0xe28>)
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002874:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002878:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	429a      	cmp	r2, r3
 8002884:	d111      	bne.n	80028aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002886:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800288a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002894:	429a      	cmp	r2, r3
 8002896:	d108      	bne.n	80028aa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b09e      	sub	sp, #120	; 0x78
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e162      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b90      	ldr	r3, [pc, #576]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b8d      	ldr	r3, [pc, #564]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	498b      	ldr	r1, [pc, #556]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e14a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	497f      	ldr	r1, [pc, #508]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80dc 	beq.w	8002aec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d13c      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xf6>
 800293c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002940:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800294a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_RCC_ClockConfig+0xa6>
 8002960:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e00f      	b.n	8002986 <HAL_RCC_ClockConfig+0xc6>
 8002966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	667b      	str	r3, [r7, #100]	; 0x64
 8002974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002978:	663b      	str	r3, [r7, #96]	; 0x60
 800297a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800298a:	65ba      	str	r2, [r7, #88]	; 0x58
 800298c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f042 0220 	orr.w	r2, r2, #32
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d17b      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0f3      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d13c      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x178>
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x128>
 80029e2:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_ClockConfig+0x148>
 80029e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	647b      	str	r3, [r7, #68]	; 0x44
 80029f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fa:	643b      	str	r3, [r7, #64]	; 0x40
 80029fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d13a      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b2      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d102      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x1a0>
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	e00d      	b.n	8002a7c <HAL_RCC_ClockConfig+0x1bc>
 8002a60:	2302      	movs	r3, #2
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	61ba      	str	r2, [r7, #24]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	617a      	str	r2, [r7, #20]
  return result;
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e079      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	491a      	ldr	r1, [pc, #104]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fd1e 	bl	80014fc <HAL_GetTick>
 8002ac0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe fd1a 	bl	80014fc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e061      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d214      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_RCC_ClockConfig+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e040      	b.n	8002b9e <HAL_RCC_ClockConfig+0x2de>
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	491a      	ldr	r1, [pc, #104]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4912      	ldr	r1, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b62:	f000 f829 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b70:	22f0      	movs	r2, #240	; 0xf0
 8002b72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	40d3      	lsrs	r3, r2
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x2ec>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_ClockConfig+0x2f0>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCC_ClockConfig+0x2f4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fc6c 	bl	8001474 <HAL_InitTick>
  
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3778      	adds	r7, #120	; 0x78
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08005024 	.word	0x08005024
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b08b      	sub	sp, #44	; 0x2c
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x30>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x36>
 8002be6:	e03f      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bea:	623b      	str	r3, [r7, #32]
      break;
 8002bec:	e03f      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bf4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bf8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	607a      	str	r2, [r7, #4]
  return result;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	40d3      	lsrs	r3, r2
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	60fa      	str	r2, [r7, #12]
  return result;
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	fab2 f282 	clz	r2, r2
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	40d3      	lsrs	r3, r2
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	e007      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c52:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	623b      	str	r3, [r7, #32]
      break;
 8002c66:	e002      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c6a:	623b      	str	r3, [r7, #32]
      break;
 8002c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	372c      	adds	r7, #44	; 0x2c
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	007a1200 	.word	0x007a1200
 8002c84:	08005034 	.word	0x08005034
 8002c88:	08005044 	.word	0x08005044

08002c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b092      	sub	sp, #72	; 0x48
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80d4 	beq.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb0:	4b4e      	ldr	r3, [pc, #312]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10e      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	61d3      	str	r3, [r2, #28]
 8002cc8:	4b48      	ldr	r3, [pc, #288]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a41      	ldr	r2, [pc, #260]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fc03 	bl	80014fc <HAL_GetTick>
 8002cf6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe fbff 	bl	80014fc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1d6      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8084 	beq.w	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d07c      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d38:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	2301      	movs	r3, #1
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	461a      	mov	r2, r3
 8002d86:	2300      	movs	r3, #0
 8002d88:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d04b      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fbaf 	bl	80014fc <HAL_GetTick>
 8002d9e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fbab 	bl	80014fc <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e180      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002db8:	2302      	movs	r3, #2
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	61fb      	str	r3, [r7, #28]
  return result;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d108      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002de6:	4b01      	ldr	r3, [pc, #4]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	e00d      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	10908100 	.word	0x10908100
 8002df8:	2302      	movs	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	4ba0      	ldr	r3, [pc, #640]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	613a      	str	r2, [r7, #16]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	fa92 f2a2 	rbit	r2, r2
 8002e12:	60fa      	str	r2, [r7, #12]
  return result;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f002 021f 	and.w	r2, r2, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0b7      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e32:	4b95      	ldr	r3, [pc, #596]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4992      	ldr	r1, [pc, #584]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b8e      	ldr	r3, [pc, #568]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4a8d      	ldr	r2, [pc, #564]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e64:	4b88      	ldr	r3, [pc, #544]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f023 0203 	bic.w	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4985      	ldr	r1, [pc, #532]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e82:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	497e      	ldr	r1, [pc, #504]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ea0:	4b79      	ldr	r3, [pc, #484]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4976      	ldr	r1, [pc, #472]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f023 0210 	bic.w	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	496f      	ldr	r1, [pc, #444]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	4967      	ldr	r1, [pc, #412]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f023 0220 	bic.w	r2, r3, #32
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4960      	ldr	r1, [pc, #384]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f18:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	4958      	ldr	r1, [pc, #352]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4951      	ldr	r1, [pc, #324]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4949      	ldr	r1, [pc, #292]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f72:	4b45      	ldr	r3, [pc, #276]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4942      	ldr	r1, [pc, #264]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f90:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	493a      	ldr	r1, [pc, #232]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	4933      	ldr	r1, [pc, #204]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	492b      	ldr	r1, [pc, #172]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4924      	ldr	r1, [pc, #144]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	491c      	ldr	r1, [pc, #112]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	4915      	ldr	r1, [pc, #84]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	490d      	ldr	r1, [pc, #52]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	4906      	ldr	r1, [pc, #24]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003080:	4b01      	ldr	r3, [pc, #4]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	e002      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003096:	4313      	orrs	r3, r2
 8003098:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	4904      	ldr	r1, [pc, #16]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3748      	adds	r7, #72	; 0x48
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e049      	b.n	800316e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd ffb8 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fc0c 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e049      	b.n	800321c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f841 	bl	8003224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 fbb5 	bl	8003924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e041      	b.n	80032d0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f839 	bl	80032d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 fb53 	bl	8003924 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0208 	bic.w	r2, r2, #8
 800328c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0202 	mvn.w	r2, #2
 8003318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fad9 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 facb 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fadc 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0204 	mvn.w	r2, #4
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 faaf 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 faa1 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fab2 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0208 	mvn.w	r2, #8
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2204      	movs	r2, #4
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa85 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa77 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fa88 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d122      	bne.n	8003444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b10      	cmp	r3, #16
 800340a:	d11b      	bne.n	8003444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0210 	mvn.w	r2, #16
 8003414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2208      	movs	r2, #8
 800341a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa5b 	bl	80038e6 <HAL_TIM_IC_CaptureCallback>
 8003430:	e005      	b.n	800343e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa4d 	bl	80038d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fa5e 	bl	80038fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10e      	bne.n	8003470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0201 	mvn.w	r2, #1
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa27 	bl	80038be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d10e      	bne.n	800349c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d107      	bne.n	800349c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 ff18 	bl	80042cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 ff0b 	bl	80042e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fa0c 	bl	800390e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d10e      	bne.n	8003522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d107      	bne.n	8003522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0220 	mvn.w	r2, #32
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fecb 	bl	80042b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003542:	2302      	movs	r3, #2
 8003544:	e0fd      	b.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b14      	cmp	r3, #20
 8003552:	f200 80f0 	bhi.w	8003736 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	080035b1 	.word	0x080035b1
 8003560:	08003737 	.word	0x08003737
 8003564:	08003737 	.word	0x08003737
 8003568:	08003737 	.word	0x08003737
 800356c:	080035f1 	.word	0x080035f1
 8003570:	08003737 	.word	0x08003737
 8003574:	08003737 	.word	0x08003737
 8003578:	08003737 	.word	0x08003737
 800357c:	08003633 	.word	0x08003633
 8003580:	08003737 	.word	0x08003737
 8003584:	08003737 	.word	0x08003737
 8003588:	08003737 	.word	0x08003737
 800358c:	08003673 	.word	0x08003673
 8003590:	08003737 	.word	0x08003737
 8003594:	08003737 	.word	0x08003737
 8003598:	08003737 	.word	0x08003737
 800359c:	080036b5 	.word	0x080036b5
 80035a0:	08003737 	.word	0x08003737
 80035a4:	08003737 	.word	0x08003737
 80035a8:	08003737 	.word	0x08003737
 80035ac:	080036f5 	.word	0x080036f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa52 	bl	8003a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0208 	orr.w	r2, r2, #8
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	619a      	str	r2, [r3, #24]
      break;
 80035ee:	e0a3      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 facc 	bl	8003b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6999      	ldr	r1, [r3, #24]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	021a      	lsls	r2, r3, #8
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	619a      	str	r2, [r3, #24]
      break;
 8003630:	e082      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fb3f 	bl	8003cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0208 	orr.w	r2, r2, #8
 800364c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0204 	bic.w	r2, r2, #4
 800365c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	61da      	str	r2, [r3, #28]
      break;
 8003670:	e062      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fbb1 	bl	8003de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69d9      	ldr	r1, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]
      break;
 80036b2:	e041      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fc00 	bl	8003ec0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036f2:	e021      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fc4a 	bl	8003f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003734:	e000      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop

0800374c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIM_ConfigClockSource+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e0a8      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x16a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d067      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0x124>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d80b      	bhi.n	80037bc <HAL_TIM_ConfigClockSource+0x70>
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d073      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x144>
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d802      	bhi.n	80037b2 <HAL_TIM_ConfigClockSource+0x66>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d06f      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037b0:	e078      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d06c      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x144>
 80037b6:	2b30      	cmp	r3, #48	; 0x30
 80037b8:	d06a      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80037ba:	e073      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d00d      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x90>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d804      	bhi.n	80037ce <HAL_TIM_ConfigClockSource+0x82>
 80037c4:	2b50      	cmp	r3, #80	; 0x50
 80037c6:	d033      	beq.n	8003830 <HAL_TIM_ConfigClockSource+0xe4>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d041      	beq.n	8003850 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80037cc:	e06a      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d066      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x156>
 80037d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d8:	d017      	beq.n	800380a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80037da:	e063      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f000 fcb8 	bl	8004160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]
      break;
 8003808:	e04c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f000 fca1 	bl	8004160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382c:	609a      	str	r2, [r3, #8]
      break;
 800382e:	e039      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	461a      	mov	r2, r3
 800383e:	f000 fc15 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2150      	movs	r1, #80	; 0x50
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fc6e 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 800384e:	e029      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	461a      	mov	r2, r3
 800385e:	f000 fc34 	bl	80040ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2160      	movs	r1, #96	; 0x60
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc5e 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 800386e:	e019      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	461a      	mov	r2, r3
 800387e:	f000 fbf5 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2140      	movs	r1, #64	; 0x40
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fc4e 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 800388e:	e009      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fc45 	bl	800412a <TIM_ITRx_SetConfig>
        break;
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80038a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d00f      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3f      	ldr	r2, [pc, #252]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d01b      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <TIM_Base_SetConfig+0x120>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d017      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2d      	ldr	r2, [pc, #180]	; (8003a48 <TIM_Base_SetConfig+0x124>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00f      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <TIM_Base_SetConfig+0x130>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <TIM_Base_SetConfig+0x134>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <TIM_Base_SetConfig+0x138>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x9a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <TIM_Base_SetConfig+0x11c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <TIM_Base_SetConfig+0x128>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <TIM_Base_SetConfig+0x130>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <TIM_Base_SetConfig+0x134>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <TIM_Base_SetConfig+0x138>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0x100>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40015000 	.word	0x40015000
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0302 	bic.w	r3, r3, #2
 8003aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <TIM_OC1_SetConfig+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <TIM_OC1_SetConfig+0x120>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2e      	ldr	r2, [pc, #184]	; (8003b84 <TIM_OC1_SetConfig+0x124>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a2d      	ldr	r2, [pc, #180]	; (8003b88 <TIM_OC1_SetConfig+0x128>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <TIM_OC1_SetConfig+0x12c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <TIM_OC1_SetConfig+0x130>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10c      	bne.n	8003b02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0308 	bic.w	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <TIM_OC1_SetConfig+0x11c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <TIM_OC1_SetConfig+0x120>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <TIM_OC1_SetConfig+0x124>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <TIM_OC1_SetConfig+0x128>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <TIM_OC1_SetConfig+0x12c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <TIM_OC1_SetConfig+0x130>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d111      	bne.n	8003b56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	40015000 	.word	0x40015000

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0210 	bic.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <TIM_OC2_SetConfig+0x110>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC2_SetConfig+0x74>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <TIM_OC2_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC2_SetConfig+0x74>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <TIM_OC2_SetConfig+0x118>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10d      	bne.n	8003c24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <TIM_OC2_SetConfig+0x110>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <TIM_OC2_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00f      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <TIM_OC2_SetConfig+0x11c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <TIM_OC2_SetConfig+0x120>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <TIM_OC2_SetConfig+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <TIM_OC2_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d113      	bne.n	8003c7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c5a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c62:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40015000 	.word	0x40015000
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0303 	bic.w	r3, r3, #3
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <TIM_OC3_SetConfig+0x10c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_OC3_SetConfig+0x72>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <TIM_OC3_SetConfig+0x110>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_OC3_SetConfig+0x72>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <TIM_OC3_SetConfig+0x114>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10d      	bne.n	8003d4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d48:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <TIM_OC3_SetConfig+0x10c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <TIM_OC3_SetConfig+0x110>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <TIM_OC3_SetConfig+0x118>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <TIM_OC3_SetConfig+0x11c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <TIM_OC3_SetConfig+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <TIM_OC3_SetConfig+0x114>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40015000 	.word	0x40015000
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	031b      	lsls	r3, r3, #12
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <TIM_OC4_SetConfig+0xc8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <TIM_OC4_SetConfig+0x8c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_OC4_SetConfig+0xcc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00f      	beq.n	8003e6c <TIM_OC4_SetConfig+0x8c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <TIM_OC4_SetConfig+0xd0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_OC4_SetConfig+0x8c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <TIM_OC4_SetConfig+0xd4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_OC4_SetConfig+0x8c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a16      	ldr	r2, [pc, #88]	; (8003eb8 <TIM_OC4_SetConfig+0xd8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_OC4_SetConfig+0x8c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <TIM_OC4_SetConfig+0xdc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d109      	bne.n	8003e80 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40013400 	.word	0x40013400
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800
 8003ebc:	40015000 	.word	0x40015000

08003ec0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <TIM_OC5_SetConfig+0xbc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_OC5_SetConfig+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <TIM_OC5_SetConfig+0xc0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_OC5_SetConfig+0x82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <TIM_OC5_SetConfig+0xc4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_OC5_SetConfig+0x82>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <TIM_OC5_SetConfig+0xc8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_OC5_SetConfig+0x82>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <TIM_OC5_SetConfig+0xcc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_OC5_SetConfig+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <TIM_OC5_SetConfig+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d109      	bne.n	8003f56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800
 8003f90:	40015000 	.word	0x40015000

08003f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	051b      	lsls	r3, r3, #20
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <TIM_OC6_SetConfig+0xc0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <TIM_OC6_SetConfig+0x84>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <TIM_OC6_SetConfig+0xc4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00f      	beq.n	8004018 <TIM_OC6_SetConfig+0x84>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <TIM_OC6_SetConfig+0xc8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_OC6_SetConfig+0x84>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a17      	ldr	r2, [pc, #92]	; (8004060 <TIM_OC6_SetConfig+0xcc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_OC6_SetConfig+0x84>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <TIM_OC6_SetConfig+0xd0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC6_SetConfig+0x84>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a15      	ldr	r2, [pc, #84]	; (8004068 <TIM_OC6_SetConfig+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d109      	bne.n	800402c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	029b      	lsls	r3, r3, #10
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40013400 	.word	0x40013400
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800
 8004068:	40015000 	.word	0x40015000

0800406c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 030a 	bic.w	r3, r3, #10
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	f043 0307 	orr.w	r3, r3, #7
 800414c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	021a      	lsls	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	431a      	orrs	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e06d      	b.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a30      	ldr	r2, [pc, #192]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d01d      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d018      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10c      	bne.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40015000 	.word	0x40015000
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40014000 	.word	0x40014000

080042b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	613b      	str	r3, [r7, #16]
  return result;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2103      	movs	r1, #3
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	61bb      	str	r3, [r7, #24]
  return result;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	3724      	adds	r7, #36	; 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
}
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004382:	b480      	push	{r7}
 8004384:	b089      	sub	sp, #36	; 0x24
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	613b      	str	r3, [r7, #16]
  return result;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2103      	movs	r1, #3
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	401a      	ands	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	fa93 f3a3 	rbit	r3, r3
 80043bc:	61bb      	str	r3, [r7, #24]
  return result;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	fab3 f383 	clz	r3, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	431a      	orrs	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80043d4:	bf00      	nop
 80043d6:	3724      	adds	r7, #36	; 0x24
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	; 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	613b      	str	r3, [r7, #16]
  return result;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2103      	movs	r1, #3
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	61bb      	str	r3, [r7, #24]
  return result;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	60da      	str	r2, [r3, #12]
}
 8004432:	bf00      	nop
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800443e:	b480      	push	{r7}
 8004440:	b089      	sub	sp, #36	; 0x24
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	613b      	str	r3, [r7, #16]
  return result;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	210f      	movs	r1, #15
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	401a      	ands	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	61bb      	str	r3, [r7, #24]
  return result;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004490:	bf00      	nop
 8004492:	3724      	adds	r7, #36	; 0x24
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	613b      	str	r3, [r7, #16]
  return result;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	210f      	movs	r1, #15
 80044c6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	401a      	ands	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	61bb      	str	r3, [r7, #24]
  return result;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80044f2:	bf00      	nop
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	613b      	str	r3, [r7, #16]
  return result;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004520:	e051      	b.n	80045c6 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2101      	movs	r1, #1
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d043      	beq.n	80045c0 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d003      	beq.n	8004548 <LL_GPIO_Init+0x4a>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d10e      	bne.n	8004566 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	461a      	mov	r2, r3
 800454e:	69b9      	ldr	r1, [r7, #24]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ff16 	bl	8004382 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fef6 	bl	8004352 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	461a      	mov	r2, r3
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ff36 	bl	80043e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d11a      	bne.n	80045b2 <LL_GPIO_Init+0xb4>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	60bb      	str	r3, [r7, #8]
  return result;
 8004588:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b07      	cmp	r3, #7
 8004592:	d807      	bhi.n	80045a4 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	461a      	mov	r2, r3
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff4e 	bl	800443e <LL_GPIO_SetAFPin_0_7>
 80045a2:	e006      	b.n	80045b2 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	461a      	mov	r2, r3
 80045aa:	69b9      	ldr	r1, [r7, #24]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff75 	bl	800449c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	69b9      	ldr	r1, [r7, #24]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fe9a 	bl	80042f4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	3301      	adds	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1a6      	bne.n	8004522 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <LL_TIM_SetPrescaler>:
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_TIM_SetAutoReload>:
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_TIM_SetRepetitionCounter>:
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_TIM_OC_SetCompareCH1>:
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_TIM_OC_SetCompareCH2>:
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <LL_TIM_OC_SetCompareCH3>:
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <LL_TIM_OC_SetCompareCH4>:
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_TIM_OC_SetCompareCH5>:
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	659a      	str	r2, [r3, #88]	; 0x58
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <LL_TIM_OC_SetCompareCH6>:
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3f      	ldr	r2, [pc, #252]	; (8004810 <LL_TIM_Init+0x110>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <LL_TIM_Init+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00f      	beq.n	8004740 <LL_TIM_Init+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <LL_TIM_Init+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <LL_TIM_Init+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3b      	ldr	r2, [pc, #236]	; (8004818 <LL_TIM_Init+0x118>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <LL_TIM_Init+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3a      	ldr	r2, [pc, #232]	; (800481c <LL_TIM_Init+0x11c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <LL_TIM_Init+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a39      	ldr	r2, [pc, #228]	; (8004820 <LL_TIM_Init+0x120>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d106      	bne.n	800474e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <LL_TIM_Init+0x110>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <LL_TIM_Init+0x96>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d01b      	beq.n	8004796 <LL_TIM_Init+0x96>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2c      	ldr	r2, [pc, #176]	; (8004814 <LL_TIM_Init+0x114>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d017      	beq.n	8004796 <LL_TIM_Init+0x96>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <LL_TIM_Init+0x118>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <LL_TIM_Init+0x96>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <LL_TIM_Init+0x11c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <LL_TIM_Init+0x96>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <LL_TIM_Init+0x124>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <LL_TIM_Init+0x96>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a29      	ldr	r2, [pc, #164]	; (8004828 <LL_TIM_Init+0x128>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <LL_TIM_Init+0x96>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a28      	ldr	r2, [pc, #160]	; (800482c <LL_TIM_Init+0x12c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <LL_TIM_Init+0x96>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a23      	ldr	r2, [pc, #140]	; (8004820 <LL_TIM_Init+0x120>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d106      	bne.n	80047a4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff22 	bl	80045fa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff0e 	bl	80045de <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <LL_TIM_Init+0x110>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <LL_TIM_Init+0xf2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <LL_TIM_Init+0x11c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <LL_TIM_Init+0xf2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a13      	ldr	r2, [pc, #76]	; (8004824 <LL_TIM_Init+0x124>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <LL_TIM_Init+0xf2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a12      	ldr	r2, [pc, #72]	; (8004828 <LL_TIM_Init+0x128>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <LL_TIM_Init+0xf2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <LL_TIM_Init+0x12c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <LL_TIM_Init+0xf2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a0c      	ldr	r2, [pc, #48]	; (8004820 <LL_TIM_Init+0x120>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d105      	bne.n	80047fe <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff0c 	bl	8004616 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff ff6d 	bl	80046de <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800
 800481c:	40013400 	.word	0x40013400
 8004820:	40015000 	.word	0x40015000
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004846:	d01f      	beq.n	8004888 <LL_TIM_OC_Init+0x58>
 8004848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484c:	d804      	bhi.n	8004858 <LL_TIM_OC_Init+0x28>
 800484e:	2b01      	cmp	r3, #1
 8004850:	d00c      	beq.n	800486c <LL_TIM_OC_Init+0x3c>
 8004852:	2b10      	cmp	r3, #16
 8004854:	d011      	beq.n	800487a <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8004856:	e033      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485c:	d022      	beq.n	80048a4 <LL_TIM_OC_Init+0x74>
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d026      	beq.n	80048b2 <LL_TIM_OC_Init+0x82>
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	d015      	beq.n	8004896 <LL_TIM_OC_Init+0x66>
      break;
 800486a:	e029      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8b0 	bl	80049d4 <OC1Config>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]
      break;
 8004878:	e022      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f92f 	bl	8004ae0 <OC2Config>
 8004882:	4603      	mov	r3, r0
 8004884:	75fb      	strb	r3, [r7, #23]
      break;
 8004886:	e01b      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f9b2 	bl	8004bf4 <OC3Config>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]
      break;
 8004894:	e014      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fa35 	bl	8004d08 <OC4Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	75fb      	strb	r3, [r7, #23]
      break;
 80048a2:	e00d      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 faa0 	bl	8004dec <OC5Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	e006      	b.n	80048c0 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb03 	bl	8004ec0 <OC6Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]
      break;
 80048be:	bf00      	nop
  }

  return result;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	7b12      	ldrb	r2, [r2, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	89d2      	ldrh	r2, [r2, #14]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <LL_TIM_BDTR_Init+0xfc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <LL_TIM_BDTR_Init+0x96>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <LL_TIM_BDTR_Init+0x100>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <LL_TIM_BDTR_Init+0x96>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <LL_TIM_BDTR_Init+0x104>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d106      	bne.n	8004970 <LL_TIM_BDTR_Init+0xa4>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <LL_TIM_BDTR_Init+0xfc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <LL_TIM_BDTR_Init+0xbc>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <LL_TIM_BDTR_Init+0x100>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <LL_TIM_BDTR_Init+0xbc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a13      	ldr	r2, [pc, #76]	; (80049d0 <LL_TIM_BDTR_Init+0x104>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d114      	bne.n	80049b2 <LL_TIM_BDTR_Init+0xe6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40015000 	.word	0x40015000

080049d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0202 	bic.w	r2, r3, #2
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <OC1Config+0xf4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <OC1Config+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <OC1Config+0xf8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00f      	beq.n	8004a62 <OC1Config+0x8e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <OC1Config+0xfc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00b      	beq.n	8004a62 <OC1Config+0x8e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <OC1Config+0x100>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <OC1Config+0x8e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <OC1Config+0x104>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <OC1Config+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <OC1Config+0x108>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d11e      	bne.n	8004aa0 <OC1Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0208 	bic.w	r2, r3, #8
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f023 0204 	bic.w	r2, r3, #4
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fdbd 	bl	8004632 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40013400 	.word	0x40013400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800
 8004adc:	40015000 	.word	0x40015000

08004ae0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0210 	bic.w	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	0212      	lsls	r2, r2, #8
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f023 0220 	bic.w	r2, r3, #32
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <OC2Config+0xfc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <OC2Config+0x94>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <OC2Config+0x100>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00f      	beq.n	8004b74 <OC2Config+0x94>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a23      	ldr	r2, [pc, #140]	; (8004be4 <OC2Config+0x104>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <OC2Config+0x94>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <OC2Config+0x108>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <OC2Config+0x94>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a21      	ldr	r2, [pc, #132]	; (8004bec <OC2Config+0x10c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <OC2Config+0x94>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <OC2Config+0x110>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d11f      	bne.n	8004bb4 <OC2Config+0xd4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	019b      	lsls	r3, r3, #6
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	019b      	lsls	r3, r3, #6
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fd41 	bl	800464e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40013400 	.word	0x40013400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40014400 	.word	0x40014400
 8004bec:	40014800 	.word	0x40014800
 8004bf0:	40015000 	.word	0x40015000

08004bf4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a25      	ldr	r2, [pc, #148]	; (8004cf0 <OC3Config+0xfc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <OC3Config+0x92>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <OC3Config+0x100>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <OC3Config+0x92>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <OC3Config+0x104>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <OC3Config+0x92>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <OC3Config+0x108>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <OC3Config+0x92>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <OC3Config+0x10c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <OC3Config+0x92>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <OC3Config+0x110>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d11f      	bne.n	8004cc6 <OC3Config+0xd2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	015b      	lsls	r3, r3, #5
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fcc6 	bl	800466a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40013400 	.word	0x40013400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40014400 	.word	0x40014400
 8004d00:	40014800 	.word	0x40014800
 8004d04:	40015000 	.word	0x40015000

08004d08 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	0212      	lsls	r2, r2, #8
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	031b      	lsls	r3, r3, #12
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	031b      	lsls	r3, r3, #12
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <OC4Config+0xcc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d013      	beq.n	8004d9c <OC4Config+0x94>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <OC4Config+0xd0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <OC4Config+0x94>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <OC4Config+0xd4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <OC4Config+0x94>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <OC4Config+0xd8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <OC4Config+0x94>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <OC4Config+0xdc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <OC4Config+0x94>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <OC4Config+0xe0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d107      	bne.n	8004dac <OC4Config+0xa4>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	019b      	lsls	r3, r3, #6
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fc61 	bl	8004686 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800
 8004de8:	40015000 	.word	0x40015000

08004dec <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <OC5Config+0xbc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <OC5Config+0x84>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <OC5Config+0xc0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00f      	beq.n	8004e70 <OC5Config+0x84>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <OC5Config+0xc4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <OC5Config+0x84>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <OC5Config+0xc8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <OC5Config+0x84>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <OC5Config+0xcc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <OC5Config+0x84>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <OC5Config+0xd0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d109      	bne.n	8004e84 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fc06 	bl	80046a2 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800
 8004ebc:	40015000 	.word	0x40015000

08004ec0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	0212      	lsls	r2, r2, #8
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	051b      	lsls	r3, r3, #20
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	051b      	lsls	r3, r3, #20
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <OC6Config+0xbc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <OC6Config+0x86>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <OC6Config+0xc0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <OC6Config+0x86>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <OC6Config+0xc4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <OC6Config+0x86>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <OC6Config+0xc8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <OC6Config+0x86>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <OC6Config+0xcc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <OC6Config+0x86>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <OC6Config+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d109      	bne.n	8004f5a <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fbab 	bl	80046c2 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40013400 	.word	0x40013400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40015000 	.word	0x40015000

08004f94 <__libc_init_array>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4e0d      	ldr	r6, [pc, #52]	; (8004fcc <__libc_init_array+0x38>)
 8004f98:	4c0d      	ldr	r4, [pc, #52]	; (8004fd0 <__libc_init_array+0x3c>)
 8004f9a:	1ba4      	subs	r4, r4, r6
 8004f9c:	10a4      	asrs	r4, r4, #2
 8004f9e:	2500      	movs	r5, #0
 8004fa0:	42a5      	cmp	r5, r4
 8004fa2:	d109      	bne.n	8004fb8 <__libc_init_array+0x24>
 8004fa4:	4e0b      	ldr	r6, [pc, #44]	; (8004fd4 <__libc_init_array+0x40>)
 8004fa6:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <__libc_init_array+0x44>)
 8004fa8:	f000 f820 	bl	8004fec <_init>
 8004fac:	1ba4      	subs	r4, r4, r6
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	2500      	movs	r5, #0
 8004fb2:	42a5      	cmp	r5, r4
 8004fb4:	d105      	bne.n	8004fc2 <__libc_init_array+0x2e>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fbc:	4798      	blx	r3
 8004fbe:	3501      	adds	r5, #1
 8004fc0:	e7ee      	b.n	8004fa0 <__libc_init_array+0xc>
 8004fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fc6:	4798      	blx	r3
 8004fc8:	3501      	adds	r5, #1
 8004fca:	e7f2      	b.n	8004fb2 <__libc_init_array+0x1e>
 8004fcc:	08005054 	.word	0x08005054
 8004fd0:	08005054 	.word	0x08005054
 8004fd4:	08005054 	.word	0x08005054
 8004fd8:	08005058 	.word	0x08005058

08004fdc <memset>:
 8004fdc:	4402      	add	r2, r0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <memset+0xa>
 8004fe4:	4770      	bx	lr
 8004fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fea:	e7f9      	b.n	8004fe0 <memset+0x4>

08004fec <_init>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr

08004ff8 <_fini>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	bf00      	nop
 8004ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffe:	bc08      	pop	{r3}
 8005000:	469e      	mov	lr, r3
 8005002:	4770      	bx	lr
