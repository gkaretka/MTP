
mp_tim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003844  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a08  08003a08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a08  08003a08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a08  08003a08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003a1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003a1c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098bf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000152d  00000000  00000000  000298fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0002ae28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f2e5  00000000  00000000  0002c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008da0  00000000  00000000  0004b395  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0f80  00000000  00000000  00054135  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001150b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  00115130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080039c0 	.word	0x080039c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080039c0 	.word	0x080039c0

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fc3c 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f81c 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 fa86 	bl	80006f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001e4:	f000 f87c 	bl	80002e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e8:	f000 f950 	bl	800048c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ec:	f000 f9e6 	bl	80005bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 80001f0:	2100      	movs	r1, #0
 80001f2:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0x38>)
 80001f4:	f002 fb30 	bl	8002858 <HAL_TIM_OnePulse_Start>
  HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_2);
 80001f8:	2104      	movs	r1, #4
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <main+0x3c>)
 80001fc:	f002 fb2c 	bl	8002858 <HAL_TIM_OnePulse_Start>
  HAL_TIM_OnePulse_Start(&htim3, TIM_CHANNEL_1);
 8000200:	2100      	movs	r1, #0
 8000202:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x40>)
 8000204:	f002 fb28 	bl	8002858 <HAL_TIM_OnePulse_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x34>
 800020a:	bf00      	nop
 800020c:	20000074 	.word	0x20000074
 8000210:	200000c0 	.word	0x200000c0
 8000214:	20000028 	.word	0x20000028

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b0a6      	sub	sp, #152	; 0x98
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fbc2 	bl	80039b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2258      	movs	r2, #88	; 0x58
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fbb4 	bl	80039b0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000248:	2302      	movs	r3, #2
 800024a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000264:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fec2 	bl	8001000 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000282:	f000 fa65 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fdc2 	bl	8001e2c <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ae:	f000 fa4f 	bl	8000750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <SystemClock_Config+0xc4>)
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b6:	2300      	movs	r3, #0
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002ba:	2300      	movs	r3, #0
 80002bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80002be:	2300      	movs	r3, #0
 80002c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 ff97 	bl	80021f8 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002d0:	f000 fa3e 	bl	8000750 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3798      	adds	r7, #152	; 0x98
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	00301000 	.word	0x00301000

080002e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b09e      	sub	sp, #120	; 0x78
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80002f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
 8000320:	615a      	str	r2, [r3, #20]
 8000322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	222c      	movs	r2, #44	; 0x2c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fb40 	bl	80039b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000330:	4b54      	ldr	r3, [pc, #336]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000332:	4a55      	ldr	r2, [pc, #340]	; (8000488 <MX_TIM1_Init+0x1a8>)
 8000334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 8000336:	4b53      	ldr	r3, [pc, #332]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000338:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800033c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033e:	4b51      	ldr	r3, [pc, #324]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000344:	4b4f      	ldr	r3, [pc, #316]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000346:	f242 720f 	movw	r2, #9999	; 0x270f
 800034a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	4b4d      	ldr	r3, [pc, #308]	; (8000484 <MX_TIM1_Init+0x1a4>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 2;
 8000352:	4b4c      	ldr	r3, [pc, #304]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000354:	2202      	movs	r2, #2
 8000356:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000358:	4b4a      	ldr	r3, [pc, #296]	; (8000484 <MX_TIM1_Init+0x1a4>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800035e:	4849      	ldr	r0, [pc, #292]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000360:	f002 f968 	bl	8002634 <HAL_TIM_Base_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800036a:	f000 f9f1 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000372:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000374:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000378:	4619      	mov	r1, r3
 800037a:	4842      	ldr	r0, [pc, #264]	; (8000484 <MX_TIM1_Init+0x1a4>)
 800037c:	f002 fbfa 	bl	8002b74 <HAL_TIM_ConfigClockSource>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000386:	f000 f9e3 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800038a:	483e      	ldr	r0, [pc, #248]	; (8000484 <MX_TIM1_Init+0x1a4>)
 800038c:	f002 f9a9 	bl	80026e2 <HAL_TIM_PWM_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000396:	f000 f9db 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800039a:	2108      	movs	r1, #8
 800039c:	4839      	ldr	r0, [pc, #228]	; (8000484 <MX_TIM1_Init+0x1a4>)
 800039e:	f002 fa01 	bl	80027a4 <HAL_TIM_OnePulse_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80003a8:	f000 f9d2 	bl	8000750 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80003ac:	2306      	movs	r3, #6
 80003ae:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80003b0:	2370      	movs	r3, #112	; 0x70
 80003b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 80003b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	663b      	str	r3, [r7, #96]	; 0x60
  sSlaveConfig.TriggerFilter = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80003c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003c6:	4619      	mov	r1, r3
 80003c8:	482e      	ldr	r0, [pc, #184]	; (8000484 <MX_TIM1_Init+0x1a4>)
 80003ca:	f002 fc8c 	bl	8002ce6 <HAL_TIM_SlaveConfigSynchro>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003d4:	f000 f9bc 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003d8:	2320      	movs	r3, #32
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003e8:	4619      	mov	r1, r3
 80003ea:	4826      	ldr	r0, [pc, #152]	; (8000484 <MX_TIM1_Init+0x1a4>)
 80003ec:	f003 f9aa 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 80003f6:	f000 f9ab 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80003fa:	2370      	movs	r3, #112	; 0x70
 80003fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 4999;
 80003fe:	f241 3387 	movw	r3, #4999	; 0x1387
 8000402:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000404:	2300      	movs	r3, #0
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000408:	2300      	movs	r3, #0
 800040a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	4818      	ldr	r0, [pc, #96]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000422:	f002 fa97 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 800042c:	f000 f990 	bl	8000750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000430:	2300      	movs	r3, #0
 8000432:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000438:	2300      	movs	r3, #0
 800043a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000448:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000456:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	4807      	ldr	r0, [pc, #28]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000466:	f003 f9f9 	bl	800385c <HAL_TIMEx_ConfigBreakDeadTime>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8000470:	f000 f96e 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <MX_TIM1_Init+0x1a4>)
 8000476:	f000 fa01 	bl	800087c <HAL_TIM_MspPostInit>

}
 800047a:	bf00      	nop
 800047c:	3778      	adds	r7, #120	; 0x78
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000074 	.word	0x20000074
 8000488:	40012c00 	.word	0x40012c00

0800048c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b094      	sub	sp, #80	; 0x50
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	f107 0320 	add.w	r3, r7, #32
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ce:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80004d6:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004d8:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80004dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80004ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004f8:	482f      	ldr	r0, [pc, #188]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80004fa:	f002 f89b 	bl	8002634 <HAL_TIM_Base_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000504:	f000 f924 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800050c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800050e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000512:	4619      	mov	r1, r3
 8000514:	4828      	ldr	r0, [pc, #160]	; (80005b8 <MX_TIM2_Init+0x12c>)
 8000516:	f002 fb2d 	bl	8002b74 <HAL_TIM_ConfigClockSource>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000520:	f000 f916 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000524:	4824      	ldr	r0, [pc, #144]	; (80005b8 <MX_TIM2_Init+0x12c>)
 8000526:	f002 f8dc 	bl	80026e2 <HAL_TIM_PWM_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000530:	f000 f90e 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000534:	2108      	movs	r1, #8
 8000536:	4820      	ldr	r0, [pc, #128]	; (80005b8 <MX_TIM2_Init+0x12c>)
 8000538:	f002 f934 	bl	80027a4 <HAL_TIM_OnePulse_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000542:	f000 f905 	bl	8000750 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000546:	2306      	movs	r3, #6
 8000548:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800054a:	2300      	movs	r3, #0
 800054c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800054e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000552:	4619      	mov	r1, r3
 8000554:	4818      	ldr	r0, [pc, #96]	; (80005b8 <MX_TIM2_Init+0x12c>)
 8000556:	f002 fbc6 	bl	8002ce6 <HAL_TIM_SlaveConfigSynchro>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000560:	f000 f8f6 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000564:	2320      	movs	r3, #32
 8000566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4619      	mov	r1, r3
 8000572:	4811      	ldr	r0, [pc, #68]	; (80005b8 <MX_TIM2_Init+0x12c>)
 8000574:	f003 f8e6 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800057e:	f000 f8e7 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000582:	2370      	movs	r3, #112	; 0x70
 8000584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8000586:	f241 3387 	movw	r3, #4999	; 0x1387
 800058a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2204      	movs	r2, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <MX_TIM2_Init+0x12c>)
 800059c:	f002 f9da 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80005a6:	f000 f8d3 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <MX_TIM2_Init+0x12c>)
 80005ac:	f000 f966 	bl	800087c <HAL_TIM_MspPostInit>

}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000c0 	.word	0x200000c0

080005bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005fe:	4b3a      	ldr	r3, [pc, #232]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000600:	4a3a      	ldr	r2, [pc, #232]	; (80006ec <MX_TIM3_Init+0x130>)
 8000602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8000604:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000606:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800060a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <MX_TIM3_Init+0x12c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000614:	f242 720f 	movw	r2, #9999	; 0x270f
 8000618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <MX_TIM3_Init+0x12c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000626:	4830      	ldr	r0, [pc, #192]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000628:	f002 f804 	bl	8002634 <HAL_TIM_Base_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000632:	f000 f88d 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800063c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000640:	4619      	mov	r1, r3
 8000642:	4829      	ldr	r0, [pc, #164]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000644:	f002 fa96 	bl	8002b74 <HAL_TIM_ConfigClockSource>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800064e:	f000 f87f 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000652:	4825      	ldr	r0, [pc, #148]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000654:	f002 f845 	bl	80026e2 <HAL_TIM_PWM_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800065e:	f000 f877 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8000662:	2108      	movs	r1, #8
 8000664:	4820      	ldr	r0, [pc, #128]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000666:	f002 f89d 	bl	80027a4 <HAL_TIM_OnePulse_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000670:	f000 f86e 	bl	8000750 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000674:	2306      	movs	r3, #6
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800067c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000680:	4619      	mov	r1, r3
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <MX_TIM3_Init+0x12c>)
 8000684:	f002 fb2f 	bl	8002ce6 <HAL_TIM_SlaveConfigSynchro>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800068e:	f000 f85f 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4619      	mov	r1, r3
 80006a0:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_TIM3_Init+0x12c>)
 80006a2:	f003 f84f 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80006ac:	f000 f850 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006b0:	2370      	movs	r3, #112	; 0x70
 80006b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 80006b4:	f241 3387 	movw	r3, #4999	; 0x1387
 80006b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	4619      	mov	r1, r3
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <MX_TIM3_Init+0x12c>)
 80006ca:	f002 f943 	bl	8002954 <HAL_TIM_PWM_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80006d4:	f000 f83c 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <MX_TIM3_Init+0x12c>)
 80006da:	f000 f8cf 	bl	800087c <HAL_TIM_MspPostInit>

}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40000400 	.word	0x40000400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_GPIO_Init+0x5c>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <MX_GPIO_Init+0x5c>)
 80006fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_GPIO_Init+0x5c>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_GPIO_Init+0x5c>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <MX_GPIO_Init+0x5c>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	6153      	str	r3, [r2, #20]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_GPIO_Init+0x5c>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_GPIO_Init+0x5c>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <MX_GPIO_Init+0x5c>)
 800072c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_GPIO_Init+0x5c>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <HAL_TIM_Base_MspInit+0xc8>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d12a      	bne.n	8000820 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a29      	ldr	r2, [pc, #164]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 80007d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a23      	ldr	r2, [pc, #140]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA12     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800080c:	230b      	movs	r3, #11
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fa67 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800081e:	e022      	b.n	8000866 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000828:	d10c      	bne.n	8000844 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
}
 8000842:	e010      	b.n	8000866 <HAL_TIM_Base_MspInit+0xbe>
  else if(htim_base->Instance==TIM3)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_TIM_Base_MspInit+0xd0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d10b      	bne.n	8000866 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_TIM_Base_MspInit+0xcc>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	; 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00
 8000874:	40021000 	.word	0x40021000
 8000878:	40000400 	.word	0x40000400

0800087c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a34      	ldr	r2, [pc, #208]	; (800096c <HAL_TIM_MspPostInit+0xf0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d11e      	bne.n	80008dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b34      	ldr	r3, [pc, #208]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a33      	ldr	r2, [pc, #204]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80008c8:	2306      	movs	r3, #6
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f000 fa09 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008da:	e042      	b.n	8000962 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e4:	d11c      	bne.n	8000920 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 80008ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008fe:	2308      	movs	r3, #8
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800090e:	2301      	movs	r3, #1
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <HAL_TIM_MspPostInit+0xf8>)
 800091a:	f000 f9e7 	bl	8000cec <HAL_GPIO_Init>
}
 800091e:	e020      	b.n	8000962 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <HAL_TIM_MspPostInit+0xfc>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d11b      	bne.n	8000962 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 8000930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_TIM_MspPostInit+0xf4>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000952:	2302      	movs	r3, #2
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <HAL_TIM_MspPostInit+0x100>)
 800095e:	f000 f9c5 	bl	8000cec <HAL_GPIO_Init>
}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40012c00 	.word	0x40012c00
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400
 8000978:	40000400 	.word	0x40000400
 800097c:	48000800 	.word	0x48000800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f884 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490e      	ldr	r1, [pc, #56]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0b      	ldr	r4, [pc, #44]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ffd7 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 ff9b 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a32:	f7ff fbcf 	bl	80001d4 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a44:	08003a10 	.word	0x08003a10
  ldr r2, =_sbss
 8000a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a4c:	20000110 	.word	0x20000110

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x28>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f90d 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fe76 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f917 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 f8ed 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000010c 	.word	0x2000010c

08000b08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000010c 	.word	0x2000010c

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff8e 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff47 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff5c 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff8e 	bl	8000bd8 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffb0 	bl	8000c40 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e160      	b.n	8000fbe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8152 	beq.w	8000fb8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d00b      	beq.n	8000d34 <HAL_GPIO_Init+0x48>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d28:	2b11      	cmp	r3, #17
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b12      	cmp	r3, #18
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 0201 	and.w	r2, r3, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0xea>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d123      	bne.n	8000e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	6939      	ldr	r1, [r7, #16]
 8000e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0203 	and.w	r2, r3, #3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80ac 	beq.w	8000fb8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e60:	4b5e      	ldr	r3, [pc, #376]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a5d      	ldr	r2, [pc, #372]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e78:	4a59      	ldr	r2, [pc, #356]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ea2:	d025      	beq.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <HAL_GPIO_Init+0x2f8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d01f      	beq.n	8000eec <HAL_GPIO_Init+0x200>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4e      	ldr	r2, [pc, #312]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d019      	beq.n	8000ee8 <HAL_GPIO_Init+0x1fc>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d013      	beq.n	8000ee4 <HAL_GPIO_Init+0x1f8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a4c      	ldr	r2, [pc, #304]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_GPIO_Init+0x1f4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4b      	ldr	r2, [pc, #300]	; (8000ff4 <HAL_GPIO_Init+0x308>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d007      	beq.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4a      	ldr	r2, [pc, #296]	; (8000ff8 <HAL_GPIO_Init+0x30c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <HAL_GPIO_Init+0x1ec>
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	e00c      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ed8:	2307      	movs	r3, #7
 8000eda:	e00a      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000edc:	2305      	movs	r3, #5
 8000ede:	e008      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f02:	4937      	ldr	r1, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f10:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f34:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_GPIO_Init+0x310>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f47f ae97 	bne.w	8000cfc <HAL_GPIO_Init+0x10>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48001000 	.word	0x48001000
 8000ff4:	48001400 	.word	0x48001400
 8000ff8:	48001800 	.word	0x48001800
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001006:	af00      	add	r7, sp, #0
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	f000 bf01 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 8160 	beq.w	80012ea <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800102a:	4bae      	ldr	r3, [pc, #696]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 030c 	and.w	r3, r3, #12
 8001032:	2b04      	cmp	r3, #4
 8001034:	d00c      	beq.n	8001050 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001036:	4bab      	ldr	r3, [pc, #684]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b08      	cmp	r3, #8
 8001040:	d159      	bne.n	80010f6 <HAL_RCC_OscConfig+0xf6>
 8001042:	4ba8      	ldr	r3, [pc, #672]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104e:	d152      	bne.n	80010f6 <HAL_RCC_OscConfig+0xf6>
 8001050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001054:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001064:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d102      	bne.n	8001082 <HAL_RCC_OscConfig+0x82>
 800107c:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	e015      	b.n	80010ae <HAL_RCC_OscConfig+0xae>
 8001082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001086:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800109e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010aa:	4b8e      	ldr	r3, [pc, #568]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010b6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010ba:	fa92 f2a2 	rbit	r2, r2
 80010be:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010c6:	fab2 f282 	clz	r2, r2
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	f002 021f 	and.w	r2, r2, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8102 	beq.w	80012e8 <HAL_RCC_OscConfig+0x2e8>
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 80fc 	bne.w	80012e8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f000 be93 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x110>
 8001102:	4b78      	ldr	r3, [pc, #480]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a77      	ldr	r2, [pc, #476]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e030      	b.n	8001172 <HAL_RCC_OscConfig+0x172>
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x134>
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a71      	ldr	r2, [pc, #452]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6e      	ldr	r2, [pc, #440]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800112c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01e      	b.n	8001172 <HAL_RCC_OscConfig+0x172>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x15a>
 8001140:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a67      	ldr	r2, [pc, #412]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a64      	ldr	r2, [pc, #400]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e00b      	b.n	8001172 <HAL_RCC_OscConfig+0x172>
 800115a:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a61      	ldr	r2, [pc, #388]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a5e      	ldr	r2, [pc, #376]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d059      	beq.n	8001230 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcc4 	bl	8000b08 <HAL_GetTick>
 8001180:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001186:	f7ff fcbf 	bl	8000b08 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d902      	bls.n	800119c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	f000 be40 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>
 800119c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b4:	fab3 f383 	clz	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d102      	bne.n	80011ce <HAL_RCC_OscConfig+0x1ce>
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0x1fa>
 80011ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80011e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001202:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001206:	fa92 f2a2 	rbit	r2, r2
 800120a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800120e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f042 0220 	orr.w	r2, r2, #32
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f002 021f 	and.w	r2, r2, #31
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0ab      	beq.n	8001186 <HAL_RCC_OscConfig+0x186>
 800122e:	e05c      	b.n	80012ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fc6a 	bl	8000b08 <HAL_GetTick>
 8001234:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff fc65 	bl	8000b08 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d902      	bls.n	8001250 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	f000 bde6 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001254:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001264:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <HAL_RCC_OscConfig+0x282>
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x2ae>
 8001282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001286:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800129e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_RCC_OscConfig+0x2e4>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012ba:	fa92 f2a2 	rbit	r2, r2
 80012be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012c6:	fab2 f282 	clz	r2, r2
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f042 0220 	orr.w	r2, r2, #32
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	f002 021f 	and.w	r2, r2, #31
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f202 	lsl.w	r2, r1, r2
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ab      	bne.n	800123a <HAL_RCC_OscConfig+0x23a>
 80012e2:	e002      	b.n	80012ea <HAL_RCC_OscConfig+0x2ea>
 80012e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 8170 	beq.w	80015da <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012fa:	4bd0      	ldr	r3, [pc, #832]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001306:	4bcd      	ldr	r3, [pc, #820]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b08      	cmp	r3, #8
 8001310:	d16d      	bne.n	80013ee <HAL_RCC_OscConfig+0x3ee>
 8001312:	4bca      	ldr	r3, [pc, #808]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800131a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800131e:	d166      	bne.n	80013ee <HAL_RCC_OscConfig+0x3ee>
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001332:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	095b      	lsrs	r3, r3, #5
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x350>
 800134a:	4bbc      	ldr	r3, [pc, #752]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e013      	b.n	8001378 <HAL_RCC_OscConfig+0x378>
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001368:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001374:	4bb1      	ldr	r3, [pc, #708]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	2202      	movs	r2, #2
 800137a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800137e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800138a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800138e:	fab2 f282 	clz	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_RCC_OscConfig+0x3ba>
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d002      	beq.n	80013ba <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f000 bd31 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4ba0      	ldr	r3, [pc, #640]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	21f8      	movs	r1, #248	; 0xf8
 80013ca:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80013d2:	fa91 f1a1 	rbit	r1, r1
 80013d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80013da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013de:	fab1 f181 	clz	r1, r1
 80013e2:	b2c9      	uxtb	r1, r1
 80013e4:	408b      	lsls	r3, r1
 80013e6:	4995      	ldr	r1, [pc, #596]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ec:	e0f5      	b.n	80015da <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8085 	beq.w	8001504 <HAL_RCC_OscConfig+0x504>
 80013fa:	2301      	movs	r3, #1
 80013fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800140c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	461a      	mov	r2, r3
 8001422:	2301      	movs	r3, #1
 8001424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fb6f 	bl	8000b08 <HAL_GetTick>
 800142a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff fb6a 	bl	8000b08 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d902      	bls.n	8001446 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	f000 bceb 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001458:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d102      	bne.n	8001476 <HAL_RCC_OscConfig+0x476>
 8001470:	4b72      	ldr	r3, [pc, #456]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	e013      	b.n	800149e <HAL_RCC_OscConfig+0x49e>
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800148e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800149a:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	2202      	movs	r2, #2
 80014a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014a8:	fa92 f2a2 	rbit	r2, r2
 80014ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014b4:	fab2 f282 	clz	r2, r2
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	f042 0220 	orr.w	r2, r2, #32
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f002 021f 	and.w	r2, r2, #31
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0af      	beq.n	8001430 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b5a      	ldr	r3, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	21f8      	movs	r1, #248	; 0xf8
 80014e0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80014e8:	fa91 f1a1 	rbit	r1, r1
 80014ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80014f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014f4:	fab1 f181 	clz	r1, r1
 80014f8:	b2c9      	uxtb	r1, r1
 80014fa:	408b      	lsls	r3, r1
 80014fc:	494f      	ldr	r1, [pc, #316]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
 8001502:	e06a      	b.n	80015da <HAL_RCC_OscConfig+0x5da>
 8001504:	2301      	movs	r3, #1
 8001506:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001516:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	461a      	mov	r2, r3
 800152c:	2300      	movs	r3, #0
 800152e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff faea 	bl	8000b08 <HAL_GetTick>
 8001534:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fae5 	bl	8000b08 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d902      	bls.n	8001550 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	f000 bc66 	b.w	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001562:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <HAL_RCC_OscConfig+0x580>
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x5a8>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001598:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_RCC_OscConfig+0x63c>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2202      	movs	r2, #2
 80015aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015b2:	fa92 f2a2 	rbit	r2, r2
 80015b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80015ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015be:	fab2 f282 	clz	r2, r2
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f042 0220 	orr.w	r2, r2, #32
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	f002 021f 	and.w	r2, r2, #31
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1af      	bne.n	800153a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80da 	beq.w	800179e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d069      	beq.n	80016c8 <HAL_RCC_OscConfig+0x6c8>
 80015f4:	2301      	movs	r3, #1
 80015f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001606:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x640>)
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	461a      	mov	r2, r3
 800161a:	2301      	movs	r3, #1
 800161c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fa73 	bl	8000b08 <HAL_GetTick>
 8001622:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e00d      	b.n	8001644 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fa6e 	bl	8000b08 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d905      	bls.n	8001644 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e3ef      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 800163c:	40021000 	.word	0x40021000
 8001640:	10908120 	.word	0x10908120
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800164e:	fa93 f2a3 	rbit	r2, r3
 8001652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800165c:	2202      	movs	r2, #2
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001686:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001688:	4ba4      	ldr	r3, [pc, #656]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800168a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001690:	2102      	movs	r1, #2
 8001692:	6019      	str	r1, [r3, #0]
 8001694:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f1a3 	rbit	r1, r3
 800169e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016a2:	6019      	str	r1, [r3, #0]
  return result;
 80016a4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0b0      	beq.n	8001628 <HAL_RCC_OscConfig+0x628>
 80016c6:	e06a      	b.n	800179e <HAL_RCC_OscConfig+0x79e>
 80016c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f2a3 	rbit	r2, r3
 80016da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016de:	601a      	str	r2, [r3, #0]
  return result;
 80016e0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <HAL_RCC_OscConfig+0x920>)
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	2300      	movs	r3, #0
 80016f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fa05 	bl	8000b08 <HAL_GetTick>
 80016fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	e009      	b.n	8001718 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fa00 	bl	8000b08 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e381      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001718:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001734:	2202      	movs	r2, #2
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800175e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	4b6e      	ldr	r3, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001764:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001768:	2102      	movs	r1, #2
 800176a:	6019      	str	r1, [r3, #0]
 800176c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f1a3 	rbit	r1, r3
 8001776:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800177a:	6019      	str	r1, [r3, #0]
  return result;
 800177c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1b2      	bne.n	8001704 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8157 	beq.w	8001a5c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	61d3      	str	r3, [r2, #28]
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <HAL_RCC_OscConfig+0x924>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11a      	bne.n	8001828 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x924>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_RCC_OscConfig+0x924>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff f983 	bl	8000b08 <HAL_GetTick>
 8001802:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001808:	f7ff f97e 	bl	8000b08 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	; 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e2ff      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x924>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ef      	beq.n	8001808 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x840>
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a39      	ldr	r2, [pc, #228]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	e02f      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a0>
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x864>
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a33      	ldr	r2, [pc, #204]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a30      	ldr	r2, [pc, #192]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	e01d      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a0>
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b05      	cmp	r3, #5
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x888>
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a2a      	ldr	r2, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0x8a0>
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 800189a:	f023 0304 	bic.w	r3, r3, #4
 800189e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06a      	beq.n	8001980 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f92d 	bl	8000b08 <HAL_GetTick>
 80018ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff f928 	bl	8000b08 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e2a7      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 80018cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	fa93 f2a3 	rbit	r2, r3
 80018de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001900:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d108      	bne.n	8001928 <HAL_RCC_OscConfig+0x928>
 8001916:	4b01      	ldr	r3, [pc, #4]	; (800191c <HAL_RCC_OscConfig+0x91c>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	e013      	b.n	8001944 <HAL_RCC_OscConfig+0x944>
 800191c:	40021000 	.word	0x40021000
 8001920:	10908120 	.word	0x10908120
 8001924:	40007000 	.word	0x40007000
 8001928:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	4bc0      	ldr	r3, [pc, #768]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001948:	2102      	movs	r1, #2
 800194a:	6011      	str	r1, [r2, #0]
 800194c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	fa92 f1a2 	rbit	r1, r2
 8001956:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800195a:	6011      	str	r1, [r2, #0]
  return result;
 800195c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d09a      	beq.n	80018b4 <HAL_RCC_OscConfig+0x8b4>
 800197e:	e063      	b.n	8001a48 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff f8c2 	bl	8000b08 <HAL_GetTick>
 8001984:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f8bd 	bl	8000b08 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e23c      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 80019a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a6:	2202      	movs	r2, #2
 80019a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019d0:	601a      	str	r2, [r3, #0]
  return result;
 80019d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0x9f2>
 80019ec:	4b95      	ldr	r3, [pc, #596]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	e00d      	b.n	8001a0e <HAL_RCC_OscConfig+0xa0e>
 80019f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019f6:	2202      	movs	r2, #2
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fa93 f2a3 	rbit	r2, r3
 8001a04:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a12:	2102      	movs	r1, #2
 8001a14:	6011      	str	r1, [r2, #0]
 8001a16:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	fa92 f1a2 	rbit	r1, r2
 8001a20:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a24:	6011      	str	r1, [r2, #0]
  return result;
 8001a26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	fab2 f282 	clz	r2, r2
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f002 021f 	and.w	r2, r2, #31
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1a0      	bne.n	800198a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a48:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a50:	4b7c      	ldr	r3, [pc, #496]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	4a7b      	ldr	r2, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 81d9 	beq.w	8001e1a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	f000 81a6 	beq.w	8001dc2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 811e 	bne.w	8001cbe <HAL_RCC_OscConfig+0xcbe>
 8001a82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a9a:	601a      	str	r2, [r3, #0]
  return result;
 8001a9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001aa0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f826 	bl	8000b08 <HAL_GetTick>
 8001abc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f821 	bl	8000b08 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1a2      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001ad6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001af4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0xb10>
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	e01b      	b.n	8001b48 <HAL_RCC_OscConfig+0xb48>
 8001b10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d19e      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	f023 020f 	bic.w	r2, r3, #15
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	492c      	ldr	r1, [pc, #176]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6a19      	ldr	r1, [r3, #32]
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	4925      	ldr	r1, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bcc:	601a      	str	r2, [r3, #0]
  return result;
 8001bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	461a      	mov	r2, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe ff8d 	bl	8000b08 <HAL_GetTick>
 8001bee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf2:	e009      	b.n	8001c08 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7fe ff88 	bl	8000b08 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e109      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001c08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c20:	601a      	str	r2, [r3, #0]
  return result;
 8001c22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0xc48>
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_RCC_OscConfig+0xc44>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	e01e      	b.n	8001c80 <HAL_RCC_OscConfig+0xc80>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0xe28>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c88:	6011      	str	r1, [r2, #0]
 8001c8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fa92 f1a2 	rbit	r1, r2
 8001c94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c98:	6011      	str	r1, [r2, #0]
  return result;
 8001c9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d09b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xbf4>
 8001cbc:	e0ad      	b.n	8001e1a <HAL_RCC_OscConfig+0xe1a>
 8001cbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7fe ff08 	bl	8000b08 <HAL_GetTick>
 8001cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe ff03 	bl	8000b08 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e084      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
 8001d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2a:	601a      	str	r2, [r3, #0]
  return result;
 8001d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0xd4c>
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0xe28>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd84>
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_RCC_OscConfig+0xe28>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f107 0214 	add.w	r2, r7, #20
 8001d88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d8c:	6011      	str	r1, [r2, #0]
 8001d8e:	f107 0214 	add.w	r2, r7, #20
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f107 0210 	add.w	r2, r7, #16
 8001d9c:	6011      	str	r1, [r2, #0]
  return result;
 8001d9e:	f107 0210 	add.w	r2, r7, #16
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d19e      	bne.n	8001cfe <HAL_RCC_OscConfig+0xcfe>
 8001dc0:	e02b      	b.n	8001e1a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e025      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0xe28>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_OscConfig+0xe28>)
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001de0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001de4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d111      	bne.n	8001e16 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001df2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001df6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d108      	bne.n	8001e16 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09e      	sub	sp, #120	; 0x78
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e162      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b90      	ldr	r3, [pc, #576]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b8d      	ldr	r3, [pc, #564]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	498b      	ldr	r1, [pc, #556]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e14a      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b82      	ldr	r3, [pc, #520]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	497f      	ldr	r1, [pc, #508]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80dc 	beq.w	8002058 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d13c      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xf6>
 8001ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xa6>
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	e00f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0xc6>
 8001ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eee:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ef6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d17b      	bne.n	8002016 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0f3      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d13c      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x178>
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x128>
 8001f4e:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_ClockConfig+0x148>
 8001f54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
 8001f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f70:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f78:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f7c:	fa92 f2a2 	rbit	r2, r2
 8001f80:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f84:	fab2 f282 	clz	r2, r2
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f002 021f 	and.w	r2, r2, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d13a      	bne.n	8002016 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b2      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x1a0>
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	e00d      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1bc>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd8:	2302      	movs	r3, #2
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2202      	movs	r2, #2
 8001fea:	61ba      	str	r2, [r7, #24]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	617a      	str	r2, [r7, #20]
  return result;
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	fab2 f282 	clz	r2, r2
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f042 0220 	orr.w	r2, r2, #32
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f002 021f 	and.w	r2, r2, #31
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f202 	lsl.w	r2, r1, r2
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e079      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f023 0203 	bic.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	491a      	ldr	r1, [pc, #104]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002028:	f7fe fd6e 	bl	8000b08 <HAL_GetTick>
 800202c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7fe fd6a 	bl	8000b08 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e061      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 020c 	and.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	429a      	cmp	r2, r3
 8002056:	d1eb      	bne.n	8002030 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d214      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4906      	ldr	r1, [pc, #24]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_ClockConfig+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e040      	b.n	800210a <HAL_RCC_ClockConfig+0x2de>
 8002088:	40022000 	.word	0x40022000
 800208c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_ClockConfig+0x2e8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	491a      	ldr	r1, [pc, #104]	; (8002114 <HAL_RCC_ClockConfig+0x2e8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_RCC_ClockConfig+0x2e8>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4912      	ldr	r1, [pc, #72]	; (8002114 <HAL_RCC_ClockConfig+0x2e8>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ce:	f000 f829 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80020d2:	4601      	mov	r1, r0
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_ClockConfig+0x2e8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020dc:	22f0      	movs	r2, #240	; 0xf0
 80020de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	fa92 f2a2 	rbit	r2, r2
 80020e6:	60fa      	str	r2, [r7, #12]
  return result;
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	fab2 f282 	clz	r2, r2
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	40d3      	lsrs	r3, r2
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x2ec>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	fa21 f303 	lsr.w	r3, r1, r3
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_RCC_ClockConfig+0x2f0>)
 80020fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_RCC_ClockConfig+0x2f4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fcbc 	bl	8000a80 <HAL_InitTick>
  
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3778      	adds	r7, #120	; 0x78
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	080039d8 	.word	0x080039d8
 800211c:	20000000 	.word	0x20000000
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b08b      	sub	sp, #44	; 0x2c
 8002128:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x30>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x36>
 8002152:	e03f      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	e03f      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002160:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002164:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	fa92 f2a2 	rbit	r2, r2
 800216c:	607a      	str	r2, [r7, #4]
  return result;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	40d3      	lsrs	r3, r2
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	220f      	movs	r2, #15
 8002188:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	60fa      	str	r2, [r7, #12]
  return result;
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	40d3      	lsrs	r3, r2
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021ac:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
 80021bc:	e007      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	623b      	str	r3, [r7, #32]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	6a3b      	ldr	r3, [r7, #32]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	372c      	adds	r7, #44	; 0x2c
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	080039e8 	.word	0x080039e8
 80021f4:	080039f8 	.word	0x080039f8

080021f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b092      	sub	sp, #72	; 0x48
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80d4 	beq.w	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221c:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10e      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b45      	ldr	r3, [pc, #276]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a41      	ldr	r2, [pc, #260]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fc53 	bl	8000b08 <HAL_GetTick>
 8002262:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fc4f 	bl	8000b08 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1d6      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002284:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800228e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8084 	beq.w	800239e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d07c      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	2301      	movs	r3, #1
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	461a      	mov	r2, r3
 80022f2:	2300      	movs	r3, #0
 80022f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d04b      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fbff 	bl	8000b08 <HAL_GetTick>
 800230a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fbfb 	bl	8000b08 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e180      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	61fb      	str	r3, [r7, #28]
  return result;
 800233c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d108      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002352:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	e00d      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	10908100 	.word	0x10908100
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	4ba0      	ldr	r3, [pc, #640]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2202      	movs	r2, #2
 8002376:	613a      	str	r2, [r7, #16]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	60fa      	str	r2, [r7, #12]
  return result;
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0b7      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800239e:	4b95      	ldr	r3, [pc, #596]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4992      	ldr	r1, [pc, #584]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b8:	4b8e      	ldr	r3, [pc, #568]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a8d      	ldr	r2, [pc, #564]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f023 0203 	bic.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4985      	ldr	r1, [pc, #532]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ee:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	497e      	ldr	r1, [pc, #504]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800240c:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4976      	ldr	r1, [pc, #472]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242a:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f023 0210 	bic.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	496f      	ldr	r1, [pc, #444]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	4967      	ldr	r1, [pc, #412]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f023 0220 	bic.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4960      	ldr	r1, [pc, #384]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002484:	4b5b      	ldr	r3, [pc, #364]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	4958      	ldr	r1, [pc, #352]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a2:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4951      	ldr	r1, [pc, #324]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4949      	ldr	r1, [pc, #292]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024de:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4942      	ldr	r1, [pc, #264]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024fc:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	493a      	ldr	r1, [pc, #232]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800251a:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	4933      	ldr	r1, [pc, #204]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	492b      	ldr	r1, [pc, #172]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4924      	ldr	r1, [pc, #144]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	491c      	ldr	r1, [pc, #112]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	4915      	ldr	r1, [pc, #84]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	490d      	ldr	r1, [pc, #52]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025da:	4906      	ldr	r1, [pc, #24]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00c      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	e002      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002602:	4313      	orrs	r3, r2
 8002604:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261e:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3748      	adds	r7, #72	; 0x48
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e049      	b.n	80026da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe f8a4 	bl	80007a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 fb7a 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e049      	b.n	8002788 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f841 	bl	8002790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f000 fb23 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e041      	b.n	800283c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d106      	bne.n	80027d2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f839 	bl	8002844 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f000 fac1 	bl	8002d6c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0208 	bic.w	r2, r2, #8
 80027f8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002868:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002870:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002878:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002880:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d108      	bne.n	800289a <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800288e:	7b7b      	ldrb	r3, [r7, #13]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002894:	7b3b      	ldrb	r3, [r7, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e049      	b.n	8002932 <HAL_TIM_OnePulse_Start+0xda>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 ff16 	bl	80036f8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	2104      	movs	r1, #4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 ff0f 	bl	80036f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_TIM_OnePulse_Start+0xe4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_TIM_OnePulse_Start+0xbe>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <HAL_TIM_OnePulse_Start+0xe8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_TIM_OnePulse_Start+0xbe>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_TIM_OnePulse_Start+0xec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_TIM_OnePulse_Start+0xbe>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_TIM_OnePulse_Start+0xf0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_TIM_OnePulse_Start+0xbe>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_TIM_OnePulse_Start+0xf4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_TIM_OnePulse_Start+0xbe>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_TIM_OnePulse_Start+0xf8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_TIM_OnePulse_Start+0xc2>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_TIM_OnePulse_Start+0xc4>
 800291a:	2300      	movs	r3, #0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_OnePulse_Start+0xd8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40013400 	.word	0x40013400
 8002944:	40014000 	.word	0x40014000
 8002948:	40014400 	.word	0x40014400
 800294c:	40014800 	.word	0x40014800
 8002950:	40015000 	.word	0x40015000

08002954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800296a:	2302      	movs	r3, #2
 800296c:	e0fd      	b.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x216>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b14      	cmp	r3, #20
 800297a:	f200 80f0 	bhi.w	8002b5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800297e:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	080029d9 	.word	0x080029d9
 8002988:	08002b5f 	.word	0x08002b5f
 800298c:	08002b5f 	.word	0x08002b5f
 8002990:	08002b5f 	.word	0x08002b5f
 8002994:	08002a19 	.word	0x08002a19
 8002998:	08002b5f 	.word	0x08002b5f
 800299c:	08002b5f 	.word	0x08002b5f
 80029a0:	08002b5f 	.word	0x08002b5f
 80029a4:	08002a5b 	.word	0x08002a5b
 80029a8:	08002b5f 	.word	0x08002b5f
 80029ac:	08002b5f 	.word	0x08002b5f
 80029b0:	08002b5f 	.word	0x08002b5f
 80029b4:	08002a9b 	.word	0x08002a9b
 80029b8:	08002b5f 	.word	0x08002b5f
 80029bc:	08002b5f 	.word	0x08002b5f
 80029c0:	08002b5f 	.word	0x08002b5f
 80029c4:	08002add 	.word	0x08002add
 80029c8:	08002b5f 	.word	0x08002b5f
 80029cc:	08002b5f 	.word	0x08002b5f
 80029d0:	08002b5f 	.word	0x08002b5f
 80029d4:	08002b1d 	.word	0x08002b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fa62 	bl	8002ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6999      	ldr	r1, [r3, #24]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	619a      	str	r2, [r3, #24]
      break;
 8002a16:	e0a3      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fadc 	bl	8002fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6999      	ldr	r1, [r3, #24]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	619a      	str	r2, [r3, #24]
      break;
 8002a58:	e082      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fb4f 	bl	8003104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0208 	orr.w	r2, r2, #8
 8002a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0204 	bic.w	r2, r2, #4
 8002a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69d9      	ldr	r1, [r3, #28]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	61da      	str	r2, [r3, #28]
      break;
 8002a98:	e062      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fbc1 	bl	8003228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69d9      	ldr	r1, [r3, #28]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	021a      	lsls	r2, r3, #8
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	61da      	str	r2, [r3, #28]
      break;
 8002ada:	e041      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fc10 	bl	8003308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b1a:	e021      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fc5a 	bl	80033dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	021a      	lsls	r2, r3, #8
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b5c:	e000      	b.n	8002b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop

08002b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_TIM_ConfigClockSource+0x18>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e0a8      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d067      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x124>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d80b      	bhi.n	8002be4 <HAL_TIM_ConfigClockSource+0x70>
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d073      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0x144>
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d802      	bhi.n	8002bda <HAL_TIM_ConfigClockSource+0x66>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d06f      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bd8:	e078      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0x144>
 8002bde:	2b30      	cmp	r3, #48	; 0x30
 8002be0:	d06a      	beq.n	8002cb8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002be2:	e073      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002be4:	2b70      	cmp	r3, #112	; 0x70
 8002be6:	d00d      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0x90>
 8002be8:	2b70      	cmp	r3, #112	; 0x70
 8002bea:	d804      	bhi.n	8002bf6 <HAL_TIM_ConfigClockSource+0x82>
 8002bec:	2b50      	cmp	r3, #80	; 0x50
 8002bee:	d033      	beq.n	8002c58 <HAL_TIM_ConfigClockSource+0xe4>
 8002bf0:	2b60      	cmp	r3, #96	; 0x60
 8002bf2:	d041      	beq.n	8002c78 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002bf4:	e06a      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	d066      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x156>
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d017      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002c02:	e063      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f000 fd50 	bl	80036b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
      break;
 8002c30:	e04c      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6899      	ldr	r1, [r3, #8]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f000 fd39 	bl	80036b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c54:	609a      	str	r2, [r3, #8]
      break;
 8002c56:	e039      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f000 fcad 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2150      	movs	r1, #80	; 0x50
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fd06 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8002c76:	e029      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f000 fccc 	bl	8003622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2160      	movs	r1, #96	; 0x60
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fcf6 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8002c96:	e019      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f000 fc8d 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fce6 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 8002cb6:	e009      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fcdd 	bl	8003682 <TIM_ITRx_SetConfig>
        break;
 8002cc8:	e000      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_TIM_SlaveConfigSynchro+0x18>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e031      	b.n	8002d62 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fbcf 	bl	80034b4 <TIM_SlaveTimer_SetConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e018      	b.n	8002d62 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d4e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d00f      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	; (8002e8c <TIM_Base_SetConfig+0x120>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00b      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3e      	ldr	r2, [pc, #248]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3d      	ldr	r2, [pc, #244]	; (8002e94 <TIM_Base_SetConfig+0x128>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3c      	ldr	r2, [pc, #240]	; (8002e98 <TIM_Base_SetConfig+0x12c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a31      	ldr	r2, [pc, #196]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d01b      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <TIM_Base_SetConfig+0x120>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d017      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <TIM_Base_SetConfig+0x128>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00f      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <TIM_Base_SetConfig+0x130>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a2b      	ldr	r2, [pc, #172]	; (8002ea0 <TIM_Base_SetConfig+0x134>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <TIM_Base_SetConfig+0x138>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <TIM_Base_SetConfig+0x12c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d108      	bne.n	8002e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <TIM_Base_SetConfig+0x100>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <TIM_Base_SetConfig+0x128>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00f      	beq.n	8002e6c <TIM_Base_SetConfig+0x100>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <TIM_Base_SetConfig+0x130>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00b      	beq.n	8002e6c <TIM_Base_SetConfig+0x100>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <TIM_Base_SetConfig+0x134>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <TIM_Base_SetConfig+0x100>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <TIM_Base_SetConfig+0x138>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0x100>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <TIM_Base_SetConfig+0x12c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800
 8002e94:	40013400 	.word	0x40013400
 8002e98:	40015000 	.word	0x40015000
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 0302 	bic.w	r3, r3, #2
 8002ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <TIM_OC1_SetConfig+0x11c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <TIM_OC1_SetConfig+0x88>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <TIM_OC1_SetConfig+0x120>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00f      	beq.n	8002f30 <TIM_OC1_SetConfig+0x88>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <TIM_OC1_SetConfig+0x124>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <TIM_OC1_SetConfig+0x88>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	; (8002fd0 <TIM_OC1_SetConfig+0x128>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <TIM_OC1_SetConfig+0x88>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <TIM_OC1_SetConfig+0x12c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_OC1_SetConfig+0x88>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <TIM_OC1_SetConfig+0x130>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d10c      	bne.n	8002f4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f023 0308 	bic.w	r3, r3, #8
 8002f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <TIM_OC1_SetConfig+0x11c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <TIM_OC1_SetConfig+0xd2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <TIM_OC1_SetConfig+0x120>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00f      	beq.n	8002f7a <TIM_OC1_SetConfig+0xd2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <TIM_OC1_SetConfig+0x124>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_OC1_SetConfig+0xd2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <TIM_OC1_SetConfig+0x128>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <TIM_OC1_SetConfig+0xd2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <TIM_OC1_SetConfig+0x12c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_OC1_SetConfig+0xd2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <TIM_OC1_SetConfig+0x130>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d111      	bne.n	8002f9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40013400 	.word	0x40013400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	40015000 	.word	0x40015000

08002fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0210 	bic.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <TIM_OC2_SetConfig+0x110>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_OC2_SetConfig+0x74>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <TIM_OC2_SetConfig+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_OC2_SetConfig+0x74>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2a      	ldr	r2, [pc, #168]	; (80030f4 <TIM_OC2_SetConfig+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10d      	bne.n	800306c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <TIM_OC2_SetConfig+0x110>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <TIM_OC2_SetConfig+0xc0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <TIM_OC2_SetConfig+0x114>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00f      	beq.n	800309c <TIM_OC2_SetConfig+0xc0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <TIM_OC2_SetConfig+0x11c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00b      	beq.n	800309c <TIM_OC2_SetConfig+0xc0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <TIM_OC2_SetConfig+0x120>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <TIM_OC2_SetConfig+0xc0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <TIM_OC2_SetConfig+0x124>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_OC2_SetConfig+0xc0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a17      	ldr	r2, [pc, #92]	; (80030f4 <TIM_OC2_SetConfig+0x118>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d113      	bne.n	80030c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030aa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40013400 	.word	0x40013400
 80030f4:	40015000 	.word	0x40015000
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800

08003104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <TIM_OC3_SetConfig+0x10c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_OC3_SetConfig+0x72>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <TIM_OC3_SetConfig+0x110>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_OC3_SetConfig+0x72>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <TIM_OC3_SetConfig+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003190:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <TIM_OC3_SetConfig+0x10c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <TIM_OC3_SetConfig+0xbe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_OC3_SetConfig+0x110>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00f      	beq.n	80031c2 <TIM_OC3_SetConfig+0xbe>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <TIM_OC3_SetConfig+0x118>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_OC3_SetConfig+0xbe>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <TIM_OC3_SetConfig+0x11c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <TIM_OC3_SetConfig+0xbe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <TIM_OC3_SetConfig+0x120>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_OC3_SetConfig+0xbe>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <TIM_OC3_SetConfig+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d113      	bne.n	80031ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	621a      	str	r2, [r3, #32]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40013400 	.word	0x40013400
 8003218:	40015000 	.word	0x40015000
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800

08003228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	031b      	lsls	r3, r3, #12
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <TIM_OC4_SetConfig+0xc8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <TIM_OC4_SetConfig+0x8c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <TIM_OC4_SetConfig+0xcc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00f      	beq.n	80032b4 <TIM_OC4_SetConfig+0x8c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <TIM_OC4_SetConfig+0xd0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_OC4_SetConfig+0x8c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a17      	ldr	r2, [pc, #92]	; (80032fc <TIM_OC4_SetConfig+0xd4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_OC4_SetConfig+0x8c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <TIM_OC4_SetConfig+0xd8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC4_SetConfig+0x8c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <TIM_OC4_SetConfig+0xdc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d109      	bne.n	80032c8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	019b      	lsls	r3, r3, #6
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40013400 	.word	0x40013400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800
 8003304:	40015000 	.word	0x40015000

08003308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800334c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <TIM_OC5_SetConfig+0xbc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <TIM_OC5_SetConfig+0x82>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <TIM_OC5_SetConfig+0xc0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00f      	beq.n	800338a <TIM_OC5_SetConfig+0x82>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_OC5_SetConfig+0xc4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <TIM_OC5_SetConfig+0x82>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <TIM_OC5_SetConfig+0xc8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d007      	beq.n	800338a <TIM_OC5_SetConfig+0x82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <TIM_OC5_SetConfig+0xcc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <TIM_OC5_SetConfig+0x82>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <TIM_OC5_SetConfig+0xd0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d109      	bne.n	800339e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	621a      	str	r2, [r3, #32]
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40013400 	.word	0x40013400
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40014400 	.word	0x40014400
 80033d4:	40014800 	.word	0x40014800
 80033d8:	40015000 	.word	0x40015000

080033dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	051b      	lsls	r3, r3, #20
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1a      	ldr	r2, [pc, #104]	; (800349c <TIM_OC6_SetConfig+0xc0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <TIM_OC6_SetConfig+0x84>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <TIM_OC6_SetConfig+0xc4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00f      	beq.n	8003460 <TIM_OC6_SetConfig+0x84>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <TIM_OC6_SetConfig+0xc8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_OC6_SetConfig+0x84>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a17      	ldr	r2, [pc, #92]	; (80034a8 <TIM_OC6_SetConfig+0xcc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_OC6_SetConfig+0x84>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a16      	ldr	r2, [pc, #88]	; (80034ac <TIM_OC6_SetConfig+0xd0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_OC6_SetConfig+0x84>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <TIM_OC6_SetConfig+0xd4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d109      	bne.n	8003474 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	029b      	lsls	r3, r3, #10
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40013400 	.word	0x40013400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800
 80034b0:	40015000 	.word	0x40015000

080034b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b30      	cmp	r3, #48	; 0x30
 80034fc:	d05c      	beq.n	80035b8 <TIM_SlaveTimer_SetConfig+0x104>
 80034fe:	2b30      	cmp	r3, #48	; 0x30
 8003500:	d806      	bhi.n	8003510 <TIM_SlaveTimer_SetConfig+0x5c>
 8003502:	2b10      	cmp	r3, #16
 8003504:	d058      	beq.n	80035b8 <TIM_SlaveTimer_SetConfig+0x104>
 8003506:	2b20      	cmp	r3, #32
 8003508:	d056      	beq.n	80035b8 <TIM_SlaveTimer_SetConfig+0x104>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d054      	beq.n	80035b8 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800350e:	e054      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8003510:	2b50      	cmp	r3, #80	; 0x50
 8003512:	d03d      	beq.n	8003590 <TIM_SlaveTimer_SetConfig+0xdc>
 8003514:	2b50      	cmp	r3, #80	; 0x50
 8003516:	d802      	bhi.n	800351e <TIM_SlaveTimer_SetConfig+0x6a>
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d010      	beq.n	800353e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800351c:	e04d      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800351e:	2b60      	cmp	r3, #96	; 0x60
 8003520:	d040      	beq.n	80035a4 <TIM_SlaveTimer_SetConfig+0xf0>
 8003522:	2b70      	cmp	r3, #112	; 0x70
 8003524:	d000      	beq.n	8003528 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8003526:	e048      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68d9      	ldr	r1, [r3, #12]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f000 f8be 	bl	80036b8 <TIM_ETR_SetConfig>
      break;
 800353c:	e03d      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b05      	cmp	r3, #5
 8003544:	d101      	bne.n	800354a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e038      	b.n	80035bc <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003570:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
      break;
 800358e:	e014      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	461a      	mov	r2, r3
 800359e:	f000 f811 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      break;
 80035a2:	e00a      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f000 f836 	bl	8003622 <TIM_TI2_ConfigInputStage>
      break;
 80035b6:	e000      	b.n	80035ba <TIM_SlaveTimer_SetConfig+0x106>
        break;
 80035b8:	bf00      	nop
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 030a 	bic.w	r3, r3, #10
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003622:	b480      	push	{r7}
 8003624:	b087      	sub	sp, #28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0210 	bic.w	r2, r3, #16
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800364c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800365e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f043 0307 	orr.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	021a      	lsls	r2, r3, #8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	431a      	orrs	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2201      	movs	r2, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e06d      	b.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a30      	ldr	r2, [pc, #192]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01d      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d018      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a11      	ldr	r2, [pc, #68]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10c      	bne.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40013400 	.word	0x40013400
 800384c:	40015000 	.word	0x40015000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40014000 	.word	0x40014000

0800385c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003874:	2302      	movs	r3, #2
 8003876:	e06a      	b.n	800394e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d115      	bne.n	800393c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	051b      	lsls	r3, r3, #20
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40015000 	.word	0x40015000

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	4e0d      	ldr	r6, [pc, #52]	; (80039a0 <__libc_init_array+0x38>)
 800396c:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 800396e:	1ba4      	subs	r4, r4, r6
 8003970:	10a4      	asrs	r4, r4, #2
 8003972:	2500      	movs	r5, #0
 8003974:	42a5      	cmp	r5, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	4e0b      	ldr	r6, [pc, #44]	; (80039a8 <__libc_init_array+0x40>)
 800397a:	4c0c      	ldr	r4, [pc, #48]	; (80039ac <__libc_init_array+0x44>)
 800397c:	f000 f820 	bl	80039c0 <_init>
 8003980:	1ba4      	subs	r4, r4, r6
 8003982:	10a4      	asrs	r4, r4, #2
 8003984:	2500      	movs	r5, #0
 8003986:	42a5      	cmp	r5, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003990:	4798      	blx	r3
 8003992:	3501      	adds	r5, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800399a:	4798      	blx	r3
 800399c:	3501      	adds	r5, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	08003a08 	.word	0x08003a08
 80039a4:	08003a08 	.word	0x08003a08
 80039a8:	08003a08 	.word	0x08003a08
 80039ac:	08003a0c 	.word	0x08003a0c

080039b0 <memset>:
 80039b0:	4402      	add	r2, r0
 80039b2:	4603      	mov	r3, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <_init>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr

080039cc <_fini>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr
