
MTP_LAB_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004254  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080043f0  080043f0  000143f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004600  08004600  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004600  08004600  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004600  08004600  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08004614  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004614  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d33  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001540  00000000  00000000  00027d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  000292b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  00029990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b8f  00000000  00000000  00029fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000667f  00000000  00000000  0004bb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc374  00000000  00000000  000521c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e53a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  0011e5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043d4 	.word	0x080043d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080043d4 	.word	0x080043d4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_DAC_EnableDMAReq>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableDMAReq(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	601a      	str	r2, [r3, #0]
          DAC_CR_DMAEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2104      	movs	r1, #4
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LL_DMA_EnableChannel+0x3c>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <LL_DMA_EnableChannel+0x3c>)
 8000ccc:	5c8a      	ldrb	r2, [r1, r2]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	440a      	add	r2, r1
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	080043f0 	.word	0x080043f0

08000cec <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LL_DMA_SetDataTransferDirection+0x48>)
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d0c:	f023 0310 	bic.w	r3, r3, #16
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	3a01      	subs	r2, #1
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <LL_DMA_SetDataTransferDirection+0x48>)
 8000d16:	5c8a      	ldrb	r2, [r1, r2]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	440a      	add	r2, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	080043f0 	.word	0x080043f0

08000d38 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <LL_DMA_SetMode+0x44>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 0220 	bic.w	r2, r3, #32
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <LL_DMA_SetMode+0x44>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	4619      	mov	r1, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	440b      	add	r3, r1
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	080043f0 	.word	0x080043f0

08000d80 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	461a      	mov	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000da6:	5ccb      	ldrb	r3, [r1, r3]
 8000da8:	4619      	mov	r1, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	440b      	add	r3, r1
 8000dae:	4619      	mov	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	080043f0 	.word	0x080043f0

08000dc8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <LL_DMA_SetMemoryIncMode+0x44>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <LL_DMA_SetMemoryIncMode+0x44>)
 8000dee:	5ccb      	ldrb	r3, [r1, r3]
 8000df0:	4619      	mov	r1, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	440b      	add	r3, r1
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	080043f0 	.word	0x080043f0

08000e10 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <LL_DMA_SetPeriphSize+0x44>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	461a      	mov	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <LL_DMA_SetPeriphSize+0x44>)
 8000e36:	5ccb      	ldrb	r3, [r1, r3]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	4619      	mov	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	080043f0 	.word	0x080043f0

08000e58 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <LL_DMA_SetMemorySize+0x44>)
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <LL_DMA_SetMemorySize+0x44>)
 8000e7e:	5ccb      	ldrb	r3, [r1, r3]
 8000e80:	4619      	mov	r1, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	440b      	add	r3, r1
 8000e86:	4619      	mov	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	080043f0 	.word	0x080043f0

08000ea0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	440b      	add	r3, r1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	080043f0 	.word	0x080043f0

08000ee8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <LL_DMA_SetDataLength+0x44>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	0c1b      	lsrs	r3, r3, #16
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <LL_DMA_SetDataLength+0x44>)
 8000f0e:	5c8a      	ldrb	r2, [r1, r2]
 8000f10:	4611      	mov	r1, r2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	440a      	add	r2, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	080043f0 	.word	0x080043f0

08000f30 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <LL_DMA_SetMemoryAddress+0x2c>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	080043f0 	.word	0x080043f0

08000f60 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <LL_DMA_SetPeriphAddress+0x2c>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6093      	str	r3, [r2, #8]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	080043f0 	.word	0x080043f0

08000f90 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f06f 0201 	mvn.w	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4013      	ands	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000

08001064 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <LL_APB1_GRP1_EnableClock+0x2c>)
 800106e:	69da      	ldr	r2, [r3, #28]
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4313      	orrs	r3, r2
 8001076:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <LL_APB1_GRP1_EnableClock+0x2c>)
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4013      	ands	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000

08001094 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010b2:	4904      	ldr	r1, [pc, #16]	; (80010c4 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40010000 	.word	0x40010000

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  for (uint16_t i = 0; i < (int)RESOLUTION; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	e044      	b.n	800115e <main+0x96>
	  ubSinValues[i] = (uint8_t)((sin((double)M_PI*2.0*(double)i/RESOLUTION) * (double)0.5 + (double)0.7)*(double)(RESOLUTION-50));
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9c0 	bl	800045c <__aeabi_ui2d>
 80010dc:	a346      	add	r3, pc, #280	; (adr r3, 80011f8 <main+0x130>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fa35 	bl	8000550 <__aeabi_dmul>
 80010e6:	4603      	mov	r3, r0
 80010e8:	460c      	mov	r4, r1
 80010ea:	4618      	mov	r0, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <main+0x110>)
 80010f4:	f7ff fb56 	bl	80007a4 <__aeabi_ddiv>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	ec44 3b17 	vmov	d7, r3, r4
 8001100:	eeb0 0a47 	vmov.f32	s0, s14
 8001104:	eef0 0a67 	vmov.f32	s1, s15
 8001108:	f002 f952 	bl	80033b0 <sin>
 800110c:	ec51 0b10 	vmov	r0, r1, d0
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <main+0x114>)
 8001116:	f7ff fa1b 	bl	8000550 <__aeabi_dmul>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	a329      	add	r3, pc, #164	; (adr r3, 80011c8 <main+0x100>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff f85c 	bl	80001e4 <__adddf3>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	a326      	add	r3, pc, #152	; (adr r3, 80011d0 <main+0x108>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa09 	bl	8000550 <__aeabi_dmul>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	461a      	mov	r2, r3
 8001144:	4623      	mov	r3, r4
 8001146:	88fc      	ldrh	r4, [r7, #6]
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fcc2 	bl	8000ad4 <__aeabi_d2uiz>
 8001150:	4603      	mov	r3, r0
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <main+0x118>)
 8001156:	551a      	strb	r2, [r3, r4]
  for (uint16_t i = 0; i < (int)RESOLUTION; i++) {
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	3301      	adds	r3, #1
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	2bff      	cmp	r3, #255	; 0xff
 8001162:	d9b7      	bls.n	80010d4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f000 fa56 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f84a 	bl	8001200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 f956 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8001170:	f000 f93c 	bl	80013ec <MX_DMA_Init>
  MX_DAC1_Init();
 8001174:	f000 f888 	bl	8001288 <MX_DAC1_Init>
  MX_TIM6_Init();
 8001178:	f000 f900 	bl	800137c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)ubSinValues);
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <main+0x118>)
 800117e:	461a      	mov	r2, r3
 8001180:	2103      	movs	r1, #3
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <main+0x11c>)
 8001184:	f7ff fed4 	bl	8000f30 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, RESOLUTION);
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	2103      	movs	r1, #3
 800118e:	4815      	ldr	r0, [pc, #84]	; (80011e4 <main+0x11c>)
 8001190:	f7ff feaa 	bl	8000ee8 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&DAC1->DHR8R1);
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <main+0x120>)
 8001196:	2103      	movs	r1, #3
 8001198:	4812      	ldr	r0, [pc, #72]	; (80011e4 <main+0x11c>)
 800119a:	f7ff fee1 	bl	8000f60 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800119e:	2103      	movs	r1, #3
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <main+0x11c>)
 80011a2:	f7ff fd83 	bl	8000cac <LL_DMA_EnableChannel>

  LL_DAC_EnableDMAReq(DAC1, LL_DAC_CHANNEL_1);
 80011a6:	4911      	ldr	r1, [pc, #68]	; (80011ec <main+0x124>)
 80011a8:	4811      	ldr	r0, [pc, #68]	; (80011f0 <main+0x128>)
 80011aa:	f7ff fd3c 	bl	8000c26 <LL_DAC_EnableDMAReq>

  LL_TIM_ClearFlag_UPDATE(TIM6);
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <main+0x12c>)
 80011b0:	f7ff ff31 	bl	8001016 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <main+0x12c>)
 80011b6:	f7ff feeb 	bl	8000f90 <LL_TIM_EnableCounter>

  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 80011ba:	490c      	ldr	r1, [pc, #48]	; (80011ec <main+0x124>)
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <main+0x128>)
 80011be:	f7ff fd49 	bl	8000c54 <LL_DAC_Enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <main+0xfa>
 80011c4:	f3af 8000 	nop.w
 80011c8:	66666666 	.word	0x66666666
 80011cc:	3fe66666 	.word	0x3fe66666
 80011d0:	00000000 	.word	0x00000000
 80011d4:	4069c000 	.word	0x4069c000
 80011d8:	40700000 	.word	0x40700000
 80011dc:	3fe00000 	.word	0x3fe00000
 80011e0:	2000002c 	.word	0x2000002c
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40007410 	.word	0x40007410
 80011ec:	02100001 	.word	0x02100001
 80011f0:	40007400 	.word	0x40007400
 80011f4:	40001000 	.word	0x40001000
 80011f8:	54442d18 	.word	0x54442d18
 80011fc:	401921fb 	.word	0x401921fb

08001200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	2228      	movs	r2, #40	; 0x28
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f8c6 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001238:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fcd2 	bl	8001bf0 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001252:	f000 f921 	bl	8001498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2302      	movs	r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2102      	movs	r1, #2
 8001270:	4618      	mov	r0, r3
 8001272:	f001 fbd3 	bl	8002a1c <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800127c:	f000 f90c 	bl	8001498 <Error_Handler>
  }
}
 8001280:	bf00      	nop
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80012ac:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80012b0:	f7ff fed8 	bl	8001064 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012b8:	f7ff febc 	bl	8001034 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80012bc:	2310      	movs	r3, #16
 80012be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012c0:	2303      	movs	r3, #3
 80012c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f001 feff 	bl	80030d2 <LL_GPIO_Init>

  /* DAC1 DMA Init */
  
  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80012d4:	2210      	movs	r2, #16
 80012d6:	2103      	movs	r1, #3
 80012d8:	4824      	ldr	r0, [pc, #144]	; (800136c <MX_DAC1_Init+0xe4>)
 80012da:	f7ff fd07 	bl	8000cec <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_VERYHIGH);
 80012de:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80012e2:	2103      	movs	r1, #3
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <MX_DAC1_Init+0xe4>)
 80012e6:	f7ff fddb 	bl	8000ea0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 80012ea:	2220      	movs	r2, #32
 80012ec:	2103      	movs	r1, #3
 80012ee:	481f      	ldr	r0, [pc, #124]	; (800136c <MX_DAC1_Init+0xe4>)
 80012f0:	f7ff fd22 	bl	8000d38 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2103      	movs	r1, #3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <MX_DAC1_Init+0xe4>)
 80012fa:	f7ff fd41 	bl	8000d80 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	2103      	movs	r1, #3
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_DAC1_Init+0xe4>)
 8001304:	f7ff fd60 	bl	8000dc8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8001308:	2200      	movs	r2, #0
 800130a:	2103      	movs	r1, #3
 800130c:	4817      	ldr	r0, [pc, #92]	; (800136c <MX_DAC1_Init+0xe4>)
 800130e:	f7ff fd7f 	bl	8000e10 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8001312:	2200      	movs	r2, #0
 8001314:	2103      	movs	r1, #3
 8001316:	4815      	ldr	r0, [pc, #84]	; (800136c <MX_DAC1_Init+0xe4>)
 8001318:	f7ff fd9e 	bl	8000e58 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 800131c:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_DAC1_Init+0xe8>)
 800131e:	f7ff feb9 	bl	8001094 <LL_SYSCFG_SetRemapDMA_DAC>

  /* DAC1 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8001322:	f7ff fbf7 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8001326:	4603      	mov	r3, r0
 8001328:	2200      	movs	r2, #0
 800132a:	2104      	movs	r1, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fc47 	bl	8000bc0 <NVIC_EncodePriority>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	2036      	movs	r0, #54	; 0x36
 8001338:	f7ff fc18 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800133c:	2036      	movs	r0, #54	; 0x36
 800133e:	f7ff fbf7 	bl	8000b30 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM6_TRGO;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	461a      	mov	r2, r3
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <MX_DAC1_Init+0xec>)
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <MX_DAC1_Init+0xf0>)
 8001358:	f001 fd65 	bl	8002e26 <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 800135c:	4905      	ldr	r1, [pc, #20]	; (8001374 <MX_DAC1_Init+0xec>)
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_DAC1_Init+0xf0>)
 8001360:	f7ff fc8e 	bl	8000c80 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020000 	.word	0x40020000
 8001370:	00202000 	.word	0x00202000
 8001374:	02100001 	.word	0x02100001
 8001378:	40007400 	.word	0x40007400

0800137c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001390:	2010      	movs	r0, #16
 8001392:	f7ff fe67 	bl	8001064 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8001396:	f7ff fbbd 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 800139a:	4603      	mov	r3, r0
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc0d 	bl	8000bc0 <NVIC_EncodePriority>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	2036      	movs	r0, #54	; 0x36
 80013ac:	f7ff fbde 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b0:	2036      	movs	r0, #54	; 0x36
 80013b2:	f7ff fbbd 	bl	8000b30 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 29;
 80013be:	231d      	movs	r3, #29
 80013c0:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <MX_TIM6_Init+0x6c>)
 80013c8:	f001 ff2e 	bl	8003228 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM6_Init+0x6c>)
 80013ce:	f7ff fdef 	bl	8000fb0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_UPDATE);
 80013d2:	2120      	movs	r1, #32
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_TIM6_Init+0x6c>)
 80013d6:	f7ff fdfb 	bl	8000fd0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <MX_TIM6_Init+0x6c>)
 80013dc:	f7ff fe0b 	bl	8000ff6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40001000 	.word	0x40001000

080013ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fe1f 	bl	8001034 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013f6:	f7ff fb8d 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fbdd 	bl	8000bc0 <NVIC_EncodePriority>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	200d      	movs	r0, #13
 800140c:	f7ff fbae 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001410:	200d      	movs	r0, #13
 8001412:	f7ff fb8d 	bl	8000b30 <__NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_GPIO_Init+0x74>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <MX_GPIO_Init+0x74>)
 8001438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_GPIO_Init+0x74>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_GPIO_Init+0x74>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <MX_GPIO_Init+0x74>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_GPIO_Init+0x74>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2101      	movs	r1, #1
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <MX_GPIO_Init+0x78>)
 8001468:	f000 fbaa 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146c:	2301      	movs	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0x78>)
 8001484:	f000 fa12 	bl	80018ac <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	48000800 	.word	0x48000800

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x44>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x44>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x44>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x44>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <LL_TIM_ClearFlag_UPDATE>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f06f 0201 	mvn.w	r2, #1
 80014fe:	611a      	str	r2, [r3, #16]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f89e 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  LL_TIM_ClearFlag_UPDATE(TIM6);
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <TIM6_DAC_IRQHandler+0x1c>)
 800157e:	f7ff ffb7 	bl	80014f0 <LL_TIM_ClearFlag_UPDATE>
  GPIOC->ODR	^= LL_GPIO_PIN_0;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <TIM6_DAC_IRQHandler+0x20>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <TIM6_DAC_IRQHandler+0x20>)
 8001588:	f083 0301 	eor.w	r3, r3, #1
 800158c:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40001000 	.word	0x40001000
 8001598:	48000800 	.word	0x48000800

0800159c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopForever+0x6>)
  ldr r1, =_edata
 80015c6:	490e      	ldr	r1, [pc, #56]	; (8001600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <LoopForever+0xe>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015dc:	4c0b      	ldr	r4, [pc, #44]	; (800160c <LoopForever+0x16>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ea:	f7ff ffd7 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f001 feb3 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f2:	f7ff fd69 	bl	80010c8 <main>

080015f6 <LoopForever>:

LoopForever:
    b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001604:	08004608 	.word	0x08004608
  ldr r2, =_sbss
 8001608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800160c:	20000130 	.word	0x20000130

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x28>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f90d 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff ff3a 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40022000 	.word	0x40022000

08001640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f917 	bl	8001892 <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f8ed 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000
 8001698:	20000008 	.word	0x20000008
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000008 	.word	0x20000008
 80016c4:	2000012c 	.word	0x2000012c

080016c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000012c 	.word	0x2000012c

080016e0 <__NVIC_SetPriorityGrouping>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff47 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff5c 	bl	8001728 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffb0 	bl	8001800 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e160      	b.n	8001b7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8152 	beq.w	8001b78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d00b      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d007      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e8:	2b11      	cmp	r3, #17
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0xea>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b12      	cmp	r3, #18
 8001994:	d123      	bne.n	80019de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	6939      	ldr	r1, [r7, #16]
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0203 	and.w	r2, r3, #3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80ac 	beq.w	8001b78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_GPIO_Init+0x2f0>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_GPIO_Init+0x2f0>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_GPIO_Init+0x2f0>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a38:	4a59      	ldr	r2, [pc, #356]	; (8001ba0 <HAL_GPIO_Init+0x2f4>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a62:	d025      	beq.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_GPIO_Init+0x2f8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d01f      	beq.n	8001aac <HAL_GPIO_Init+0x200>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d019      	beq.n	8001aa8 <HAL_GPIO_Init+0x1fc>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x1f8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1f4>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a4b      	ldr	r2, [pc, #300]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1f0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a4a      	ldr	r2, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1ec>
 8001a94:	2306      	movs	r3, #6
 8001a96:	e00c      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001a98:	2307      	movs	r3, #7
 8001a9a:	e00a      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	e008      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e006      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e004      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac2:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_GPIO_Init+0x2f4>)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001af4:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b1e:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f47f ae97 	bne.w	80018bc <HAL_GPIO_Init+0x10>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	48000800 	.word	0x48000800
 8001bac:	48000c00 	.word	0x48000c00
 8001bb0:	48001000 	.word	0x48001000
 8001bb4:	48001400 	.word	0x48001400
 8001bb8:	48001800 	.word	0x48001800
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f000 bf01 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8160 	beq.w	8001eda <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c1a:	4bae      	ldr	r3, [pc, #696]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d00c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c26:	4bab      	ldr	r3, [pc, #684]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d159      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d152      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xf6>
 8001c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x82>
 8001c6c:	4b99      	ldr	r3, [pc, #612]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0xae>
 8001c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c76:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c9a:	4b8e      	ldr	r3, [pc, #568]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001ca6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001caa:	fa92 f2a2 	rbit	r2, r2
 8001cae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001cb2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8102 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x2e8>
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 80fc 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f000 be93 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x110>
 8001cf2:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a77      	ldr	r2, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e030      	b.n	8001d62 <HAL_RCC_OscConfig+0x172>
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x134>
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01e      	b.n	8001d62 <HAL_RCC_OscConfig+0x172>
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x15a>
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a64      	ldr	r2, [pc, #400]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e00b      	b.n	8001d62 <HAL_RCC_OscConfig+0x172>
 8001d4a:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a61      	ldr	r2, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b5f      	ldr	r3, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5e      	ldr	r2, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d059      	beq.n	8001e20 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fcac 	bl	80016c8 <HAL_GetTick>
 8001d70:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff fca7 	bl	80016c8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d902      	bls.n	8001d8c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	f000 be40 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8001d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d90:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001da0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x1ce>
 8001db8:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x1fa>
 8001dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dee:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001df2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001dfe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e02:	fab2 f282 	clz	r2, r2
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f042 0220 	orr.w	r2, r2, #32
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f002 021f 	and.w	r2, r2, #31
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ab      	beq.n	8001d76 <HAL_RCC_OscConfig+0x186>
 8001e1e:	e05c      	b.n	8001eda <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc52 	bl	80016c8 <HAL_GetTick>
 8001e24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fc4d 	bl	80016c8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d902      	bls.n	8001e40 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f000 bde6 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8001e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e44:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001e54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x282>
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	e015      	b.n	8001e9e <HAL_RCC_OscConfig+0x2ae>
 8001e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x2e4>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001ea6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001eaa:	fa92 f2a2 	rbit	r2, r2
 8001eae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001eb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ab      	bne.n	8001e2a <HAL_RCC_OscConfig+0x23a>
 8001ed2:	e002      	b.n	8001eda <HAL_RCC_OscConfig+0x2ea>
 8001ed4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8170 	beq.w	80021ca <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eea:	4bd0      	ldr	r3, [pc, #832]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ef6:	4bcd      	ldr	r3, [pc, #820]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d16d      	bne.n	8001fde <HAL_RCC_OscConfig+0x3ee>
 8001f02:	4bca      	ldr	r3, [pc, #808]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d166      	bne.n	8001fde <HAL_RCC_OscConfig+0x3ee>
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f22:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_OscConfig+0x350>
 8001f3a:	4bbc      	ldr	r3, [pc, #752]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e013      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f58:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f64:	4bb1      	ldr	r3, [pc, #708]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f6e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f7a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_RCC_OscConfig+0x3ba>
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d002      	beq.n	8001faa <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f000 bd31 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4ba0      	ldr	r3, [pc, #640]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	21f8      	movs	r1, #248	; 0xf8
 8001fba:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001fc2:	fa91 f1a1 	rbit	r1, r1
 8001fc6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001fca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fce:	fab1 f181 	clz	r1, r1
 8001fd2:	b2c9      	uxtb	r1, r1
 8001fd4:	408b      	lsls	r3, r1
 8001fd6:	4995      	ldr	r1, [pc, #596]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fdc:	e0f5      	b.n	80021ca <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8085 	beq.w	80020f4 <HAL_RCC_OscConfig+0x504>
 8001fea:	2301      	movs	r3, #1
 8001fec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ffc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800200a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	2301      	movs	r3, #1
 8002014:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb57 	bl	80016c8 <HAL_GetTick>
 800201a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff fb52 	bl	80016c8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d902      	bls.n	8002036 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	f000 bceb 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002048:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_OscConfig+0x476>
 8002060:	4b72      	ldr	r3, [pc, #456]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e013      	b.n	800208e <HAL_RCC_OscConfig+0x49e>
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800207e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800208a:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	2202      	movs	r2, #2
 8002090:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002094:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80020a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0af      	beq.n	8002020 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	21f8      	movs	r1, #248	; 0xf8
 80020d0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80020d8:	fa91 f1a1 	rbit	r1, r1
 80020dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80020e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020e4:	fab1 f181 	clz	r1, r1
 80020e8:	b2c9      	uxtb	r1, r1
 80020ea:	408b      	lsls	r3, r1
 80020ec:	494f      	ldr	r1, [pc, #316]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
 80020f2:	e06a      	b.n	80021ca <HAL_RCC_OscConfig+0x5da>
 80020f4:	2301      	movs	r3, #1
 80020f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002106:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	461a      	mov	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fad2 	bl	80016c8 <HAL_GetTick>
 8002124:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff facd 	bl	80016c8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d902      	bls.n	8002140 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	f000 bc66 	b.w	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8002140:	2302      	movs	r3, #2
 8002142:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002152:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0x580>
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e013      	b.n	8002198 <HAL_RCC_OscConfig+0x5a8>
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002188:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_RCC_OscConfig+0x63c>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2202      	movs	r2, #2
 800219a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800219e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80021aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021ae:	fab2 f282 	clz	r2, r2
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f042 0220 	orr.w	r2, r2, #32
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f002 021f 	and.w	r2, r2, #31
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1af      	bne.n	800212a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80da 	beq.w	800238e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d069      	beq.n	80022b8 <HAL_RCC_OscConfig+0x6c8>
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80021f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x640>)
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	461a      	mov	r2, r3
 800220a:	2301      	movs	r3, #1
 800220c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7ff fa5b 	bl	80016c8 <HAL_GetTick>
 8002212:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e00d      	b.n	8002234 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff fa56 	bl	80016c8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d905      	bls.n	8002234 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e3ef      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 800222c:	40021000 	.word	0x40021000
 8002230:	10908120 	.word	0x10908120
 8002234:	2302      	movs	r3, #2
 8002236:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800224c:	2202      	movs	r2, #2
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	fa93 f2a3 	rbit	r2, r3
 800225a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002264:	2202      	movs	r2, #2
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002276:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002278:	4ba4      	ldr	r3, [pc, #656]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800227a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800227c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002280:	2102      	movs	r1, #2
 8002282:	6019      	str	r1, [r3, #0]
 8002284:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f1a3 	rbit	r1, r3
 800228e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002292:	6019      	str	r1, [r3, #0]
  return result;
 8002294:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0b0      	beq.n	8002218 <HAL_RCC_OscConfig+0x628>
 80022b6:	e06a      	b.n	800238e <HAL_RCC_OscConfig+0x79e>
 80022b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022ce:	601a      	str	r2, [r3, #0]
  return result;
 80022d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4b8c      	ldr	r3, [pc, #560]	; (8002510 <HAL_RCC_OscConfig+0x920>)
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	2300      	movs	r3, #0
 80022e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff f9ed 	bl	80016c8 <HAL_GetTick>
 80022ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f2:	e009      	b.n	8002308 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff f9e8 	bl	80016c8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e381      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8002308:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800230c:	2202      	movs	r2, #2
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa93 f2a3 	rbit	r2, r3
 800231a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002324:	2202      	movs	r2, #2
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800233c:	2202      	movs	r2, #2
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800234e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b6e      	ldr	r3, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002354:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002358:	2102      	movs	r1, #2
 800235a:	6019      	str	r1, [r3, #0]
 800235c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fa93 f1a3 	rbit	r1, r3
 8002366:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800236a:	6019      	str	r1, [r3, #0]
  return result;
 800236c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1b2      	bne.n	80022f4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8157 	beq.w	800264c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a4:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d112      	bne.n	80023d6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ba:	61d3      	str	r3, [r2, #28]
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x924>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11a      	bne.n	8002418 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <HAL_RCC_OscConfig+0x924>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4b      	ldr	r2, [pc, #300]	; (8002514 <HAL_RCC_OscConfig+0x924>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7ff f96b 	bl	80016c8 <HAL_GetTick>
 80023f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f8:	f7ff f966 	bl	80016c8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e2ff      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x924>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x840>
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a39      	ldr	r2, [pc, #228]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	e02f      	b.n	8002490 <HAL_RCC_OscConfig+0x8a0>
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x864>
 800243a:	4b34      	ldr	r3, [pc, #208]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a33      	ldr	r2, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a30      	ldr	r2, [pc, #192]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0x8a0>
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x888>
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a27      	ldr	r2, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x8a0>
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a20      	ldr	r2, [pc, #128]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d06a      	beq.n	8002570 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7ff f915 	bl	80016c8 <HAL_GetTick>
 800249e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7ff f910 	bl	80016c8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e2a7      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 80024bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024ea:	601a      	str	r2, [r3, #0]
  return result;
 80024ec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x928>
 8002506:	4b01      	ldr	r3, [pc, #4]	; (800250c <HAL_RCC_OscConfig+0x91c>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	e013      	b.n	8002534 <HAL_RCC_OscConfig+0x944>
 800250c:	40021000 	.word	0x40021000
 8002510:	10908120 	.word	0x10908120
 8002514:	40007000 	.word	0x40007000
 8002518:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800251c:	2202      	movs	r2, #2
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	4bc0      	ldr	r3, [pc, #768]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002538:	2102      	movs	r1, #2
 800253a:	6011      	str	r1, [r2, #0]
 800253c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	fa92 f1a2 	rbit	r1, r2
 8002546:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800254a:	6011      	str	r1, [r2, #0]
  return result;
 800254c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d09a      	beq.n	80024a4 <HAL_RCC_OscConfig+0x8b4>
 800256e:	e063      	b.n	8002638 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7ff f8aa 	bl	80016c8 <HAL_GetTick>
 8002574:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7ff f8a5 	bl	80016c8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e23c      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8002592:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002596:	2202      	movs	r2, #2
 8002598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025ae:	2202      	movs	r2, #2
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025c0:	601a      	str	r2, [r3, #0]
  return result;
 80025c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_OscConfig+0x9f2>
 80025dc:	4b95      	ldr	r3, [pc, #596]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	e00d      	b.n	80025fe <HAL_RCC_OscConfig+0xa0e>
 80025e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025e6:	2202      	movs	r2, #2
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	4b8e      	ldr	r3, [pc, #568]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002602:	2102      	movs	r1, #2
 8002604:	6011      	str	r1, [r2, #0]
 8002606:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	fa92 f1a2 	rbit	r1, r2
 8002610:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002614:	6011      	str	r1, [r2, #0]
  return result;
 8002616:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1a0      	bne.n	800257a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002638:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002640:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4a7b      	ldr	r2, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 81d9 	beq.w	8002a0a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002658:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	f000 81a6 	beq.w	80029b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b02      	cmp	r3, #2
 800266e:	f040 811e 	bne.w	80028ae <HAL_RCC_OscConfig+0xcbe>
 8002672:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800268a:	601a      	str	r2, [r3, #0]
  return result;
 800268c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002690:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800269c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	461a      	mov	r2, r3
 80026a4:	2300      	movs	r3, #0
 80026a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff f80e 	bl	80016c8 <HAL_GetTick>
 80026ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff f809 	bl	80016c8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1a2      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 80026c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	fa93 f2a3 	rbit	r2, r3
 80026da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026de:	601a      	str	r2, [r3, #0]
  return result;
 80026e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0xb10>
 80026fa:	4b4e      	ldr	r3, [pc, #312]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	e01b      	b.n	8002738 <HAL_RCC_OscConfig+0xb48>
 8002700:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800271e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800273c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002740:	6011      	str	r1, [r2, #0]
 8002742:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fa92 f1a2 	rbit	r1, r2
 800274c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002750:	6011      	str	r1, [r2, #0]
  return result;
 8002752:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fab2 f282 	clz	r2, r2
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f042 0220 	orr.w	r2, r2, #32
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f002 021f 	and.w	r2, r2, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d19e      	bne.n	80026b2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f023 020f 	bic.w	r2, r3, #15
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	492c      	ldr	r1, [pc, #176]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 8002784:	4313      	orrs	r3, r2
 8002786:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a19      	ldr	r1, [r3, #32]
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	430b      	orrs	r3, r1
 800279e:	4925      	ldr	r1, [pc, #148]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027bc:	601a      	str	r2, [r3, #0]
  return result;
 80027be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027c2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	461a      	mov	r2, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe ff75 	bl	80016c8 <HAL_GetTick>
 80027de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe ff70 	bl	80016c8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e109      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 80027f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002810:	601a      	str	r2, [r3, #0]
  return result;
 8002812:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002816:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0xc48>
 800282c:	4b01      	ldr	r3, [pc, #4]	; (8002834 <HAL_RCC_OscConfig+0xc44>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	e01e      	b.n	8002870 <HAL_RCC_OscConfig+0xc80>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800283c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0xe28>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002874:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002878:	6011      	str	r1, [r2, #0]
 800287a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fa92 f1a2 	rbit	r1, r2
 8002884:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002888:	6011      	str	r1, [r2, #0]
  return result;
 800288a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d09b      	beq.n	80027e4 <HAL_RCC_OscConfig+0xbf4>
 80028ac:	e0ad      	b.n	8002a0a <HAL_RCC_OscConfig+0xe1a>
 80028ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028c6:	601a      	str	r2, [r3, #0]
  return result;
 80028c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	461a      	mov	r2, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fef0 	bl	80016c8 <HAL_GetTick>
 80028e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	e009      	b.n	8002902 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe feeb 	bl	80016c8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e084      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
 8002902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800291a:	601a      	str	r2, [r3, #0]
  return result;
 800291c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002920:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_RCC_OscConfig+0xd4c>
 8002936:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <HAL_RCC_OscConfig+0xe28>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	e01b      	b.n	8002974 <HAL_RCC_OscConfig+0xd84>
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f107 0320 	add.w	r3, r7, #32
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f107 0318 	add.w	r3, r7, #24
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCC_OscConfig+0xe28>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f107 0214 	add.w	r2, r7, #20
 8002978:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800297c:	6011      	str	r1, [r2, #0]
 800297e:	f107 0214 	add.w	r2, r7, #20
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	fa92 f1a2 	rbit	r1, r2
 8002988:	f107 0210 	add.w	r2, r7, #16
 800298c:	6011      	str	r1, [r2, #0]
  return result;
 800298e:	f107 0210 	add.w	r2, r7, #16
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f002 021f 	and.w	r2, r2, #31
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d19e      	bne.n	80028ee <HAL_RCC_OscConfig+0xcfe>
 80029b0:	e02b      	b.n	8002a0a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e025      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0xe28>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_RCC_OscConfig+0xe28>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d111      	bne.n	8002a06 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80029e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d108      	bne.n	8002a06 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80029f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f8:	f003 020f 	and.w	r2, r3, #15
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b09e      	sub	sp, #120	; 0x78
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e162      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b90      	ldr	r3, [pc, #576]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b8d      	ldr	r3, [pc, #564]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	498b      	ldr	r1, [pc, #556]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e14a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	497f      	ldr	r1, [pc, #508]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80dc 	beq.w	8002c48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d13c      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xf6>
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xa6>
 8002abc:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e00f      	b.n	8002ae2 <HAL_RCC_ClockConfig+0xc6>
 8002ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	667b      	str	r3, [r7, #100]	; 0x64
 8002ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ae6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f002 021f 	and.w	r2, r2, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d17b      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0f3      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d13c      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x178>
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x128>
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00f      	b.n	8002b64 <HAL_RCC_ClockConfig+0x148>
 8002b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
 8002b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
 8002b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b68:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f002 021f 	and.w	r2, r2, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d13a      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b2      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
 8002b94:	2302      	movs	r3, #2
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1a0>
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x1bc>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	2302      	movs	r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2202      	movs	r2, #2
 8002bda:	61ba      	str	r2, [r7, #24]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	fa92 f2a2 	rbit	r2, r2
 8002be2:	617a      	str	r2, [r7, #20]
  return result;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0220 	orr.w	r2, r2, #32
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e079      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	491a      	ldr	r1, [pc, #104]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c18:	f7fe fd56 	bl	80016c8 <HAL_GetTick>
 8002c1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7fe fd52 	bl	80016c8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e061      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_ClockConfig+0x260>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 020c 	and.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1eb      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d214      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4906      	ldr	r1, [pc, #24]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e040      	b.n	8002cfa <HAL_RCC_ClockConfig+0x2de>
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	491a      	ldr	r1, [pc, #104]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4912      	ldr	r1, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cbe:	f000 f829 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_RCC_ClockConfig+0x2e8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	22f0      	movs	r2, #240	; 0xf0
 8002cce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	40d3      	lsrs	r3, r2
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x2ec>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_RCC_ClockConfig+0x2f0>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCC_ClockConfig+0x2f4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fca4 	bl	8001640 <HAL_InitTick>
  
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3778      	adds	r7, #120	; 0x78
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	080043f8 	.word	0x080043f8
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b08b      	sub	sp, #44	; 0x2c
 8002d18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x30>
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x36>
 8002d42:	e03f      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d46:	623b      	str	r3, [r7, #32]
      break;
 8002d48:	e03f      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	607a      	str	r2, [r7, #4]
  return result;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	40d3      	lsrs	r3, r2
 8002d68:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	220f      	movs	r2, #15
 8002d78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	60fa      	str	r2, [r7, #12]
  return result;
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	40d3      	lsrs	r3, r2
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	e007      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	623b      	str	r3, [r7, #32]
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dc6:	623b      	str	r3, [r7, #32]
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	6a3b      	ldr	r3, [r7, #32]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	372c      	adds	r7, #44	; 0x2c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	007a1200 	.word	0x007a1200
 8002de0:	08004408 	.word	0x08004408
 8002de4:	08004418 	.word	0x08004418

08002de8 <LL_DAC_IsEnabled>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff ffd5 	bl	8002de8 <LL_DAC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d13a      	bne.n	8002eba <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01e      	beq.n	8002e8a <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	f640 71fa 	movw	r1, #4090	; 0xffa
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	401a      	ands	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4319      	orrs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4319      	orrs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4319      	orrs	r1, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e019      	b.n	8002ebe <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	21fa      	movs	r1, #250	; 0xfa
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4319      	orrs	r1, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e001      	b.n	8002ebe <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	613b      	str	r3, [r7, #16]
  return result;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2103      	movs	r1, #3
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	61bb      	str	r3, [r7, #24]
  return result;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b089      	sub	sp, #36	; 0x24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	613b      	str	r3, [r7, #16]
  return result;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	61bb      	str	r3, [r7, #24]
  return result;
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002fa8:	bf00      	nop
 8002faa:	3724      	adds	r7, #36	; 0x24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	613b      	str	r3, [r7, #16]
  return result;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2103      	movs	r1, #3
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	61bb      	str	r3, [r7, #24]
  return result;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	60da      	str	r2, [r3, #12]
}
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003012:	b480      	push	{r7}
 8003014:	b089      	sub	sp, #36	; 0x24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	613b      	str	r3, [r7, #16]
  return result;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	210f      	movs	r1, #15
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	401a      	ands	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	61bb      	str	r3, [r7, #24]
  return result;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003064:	bf00      	nop
 8003066:	3724      	adds	r7, #36	; 0x24
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	613b      	str	r3, [r7, #16]
  return result;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	210f      	movs	r1, #15
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	401a      	ands	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	61bb      	str	r3, [r7, #24]
  return result;
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80030c6:	bf00      	nop
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b088      	sub	sp, #32
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	613b      	str	r3, [r7, #16]
  return result;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030f4:	e051      	b.n	800319a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d043      	beq.n	8003194 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d003      	beq.n	800311c <LL_GPIO_Init+0x4a>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d10e      	bne.n	800313a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	461a      	mov	r2, r3
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff16 	bl	8002f56 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	461a      	mov	r2, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fef6 	bl	8002f26 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	461a      	mov	r2, r3
 8003140:	69b9      	ldr	r1, [r7, #24]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ff36 	bl	8002fb4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d11a      	bne.n	8003186 <LL_GPIO_Init+0xb4>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	60bb      	str	r3, [r7, #8]
  return result;
 800315c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b07      	cmp	r3, #7
 8003166:	d807      	bhi.n	8003178 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	461a      	mov	r2, r3
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff4e 	bl	8003012 <LL_GPIO_SetAFPin_0_7>
 8003176:	e006      	b.n	8003186 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	461a      	mov	r2, r3
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff75 	bl	8003070 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fe9a 	bl	8002ec8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1a6      	bne.n	80030f6 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <LL_TIM_SetPrescaler>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_TIM_SetAutoReload>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_TIM_SetRepetitionCounter>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	615a      	str	r2, [r3, #20]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3f      	ldr	r2, [pc, #252]	; (8003338 <LL_TIM_Init+0x110>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <LL_TIM_Init+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d00f      	beq.n	8003268 <LL_TIM_Init+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3c      	ldr	r2, [pc, #240]	; (800333c <LL_TIM_Init+0x114>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <LL_TIM_Init+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <LL_TIM_Init+0x118>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <LL_TIM_Init+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3a      	ldr	r2, [pc, #232]	; (8003344 <LL_TIM_Init+0x11c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <LL_TIM_Init+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a39      	ldr	r2, [pc, #228]	; (8003348 <LL_TIM_Init+0x120>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d106      	bne.n	8003276 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <LL_TIM_Init+0x110>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01f      	beq.n	80032be <LL_TIM_Init+0x96>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d01b      	beq.n	80032be <LL_TIM_Init+0x96>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2c      	ldr	r2, [pc, #176]	; (800333c <LL_TIM_Init+0x114>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d017      	beq.n	80032be <LL_TIM_Init+0x96>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <LL_TIM_Init+0x118>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <LL_TIM_Init+0x96>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <LL_TIM_Init+0x11c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <LL_TIM_Init+0x96>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	; (800334c <LL_TIM_Init+0x124>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00b      	beq.n	80032be <LL_TIM_Init+0x96>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a29      	ldr	r2, [pc, #164]	; (8003350 <LL_TIM_Init+0x128>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <LL_TIM_Init+0x96>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a28      	ldr	r2, [pc, #160]	; (8003354 <LL_TIM_Init+0x12c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <LL_TIM_Init+0x96>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a23      	ldr	r2, [pc, #140]	; (8003348 <LL_TIM_Init+0x120>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d106      	bne.n	80032cc <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff78 	bl	80031ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff64 	bl	80031b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <LL_TIM_Init+0x110>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <LL_TIM_Init+0xf2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a13      	ldr	r2, [pc, #76]	; (8003344 <LL_TIM_Init+0x11c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00f      	beq.n	800331a <LL_TIM_Init+0xf2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a13      	ldr	r2, [pc, #76]	; (800334c <LL_TIM_Init+0x124>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00b      	beq.n	800331a <LL_TIM_Init+0xf2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <LL_TIM_Init+0x128>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <LL_TIM_Init+0xf2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a11      	ldr	r2, [pc, #68]	; (8003354 <LL_TIM_Init+0x12c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <LL_TIM_Init+0xf2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <LL_TIM_Init+0x120>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d105      	bne.n	8003326 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff62 	bl	80031ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ff6d 	bl	8003206 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40013400 	.word	0x40013400
 8003348:	40015000 	.word	0x40015000
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4e0d      	ldr	r6, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1ba4      	subs	r4, r4, r6
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2500      	movs	r5, #0
 8003364:	42a5      	cmp	r5, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4e0b      	ldr	r6, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f001 f832 	bl	80043d4 <_init>
 8003370:	1ba4      	subs	r4, r4, r6
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2500      	movs	r5, #0
 8003376:	42a5      	cmp	r5, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003380:	4798      	blx	r3
 8003382:	3501      	adds	r5, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338a:	4798      	blx	r3
 800338c:	3501      	adds	r5, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	08004600 	.word	0x08004600
 8003394:	08004600 	.word	0x08004600
 8003398:	08004600 	.word	0x08004600
 800339c:	08004604 	.word	0x08004604

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <sin>:
 80033b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033b2:	ec51 0b10 	vmov	r0, r1, d0
 80033b6:	4a20      	ldr	r2, [pc, #128]	; (8003438 <sin+0x88>)
 80033b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033bc:	4293      	cmp	r3, r2
 80033be:	dc07      	bgt.n	80033d0 <sin+0x20>
 80033c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003430 <sin+0x80>
 80033c4:	2000      	movs	r0, #0
 80033c6:	f000 fe37 	bl	8004038 <__kernel_sin>
 80033ca:	ec51 0b10 	vmov	r0, r1, d0
 80033ce:	e007      	b.n	80033e0 <sin+0x30>
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <sin+0x8c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	dd09      	ble.n	80033ea <sin+0x3a>
 80033d6:	ee10 2a10 	vmov	r2, s0
 80033da:	460b      	mov	r3, r1
 80033dc:	f7fc ff00 	bl	80001e0 <__aeabi_dsub>
 80033e0:	ec41 0b10 	vmov	d0, r0, r1
 80033e4:	b005      	add	sp, #20
 80033e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ea:	4668      	mov	r0, sp
 80033ec:	f000 f828 	bl	8003440 <__ieee754_rem_pio2>
 80033f0:	f000 0003 	and.w	r0, r0, #3
 80033f4:	2801      	cmp	r0, #1
 80033f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033fa:	ed9d 0b00 	vldr	d0, [sp]
 80033fe:	d004      	beq.n	800340a <sin+0x5a>
 8003400:	2802      	cmp	r0, #2
 8003402:	d005      	beq.n	8003410 <sin+0x60>
 8003404:	b970      	cbnz	r0, 8003424 <sin+0x74>
 8003406:	2001      	movs	r0, #1
 8003408:	e7dd      	b.n	80033c6 <sin+0x16>
 800340a:	f000 fa0d 	bl	8003828 <__kernel_cos>
 800340e:	e7dc      	b.n	80033ca <sin+0x1a>
 8003410:	2001      	movs	r0, #1
 8003412:	f000 fe11 	bl	8004038 <__kernel_sin>
 8003416:	ec53 2b10 	vmov	r2, r3, d0
 800341a:	ee10 0a10 	vmov	r0, s0
 800341e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003422:	e7dd      	b.n	80033e0 <sin+0x30>
 8003424:	f000 fa00 	bl	8003828 <__kernel_cos>
 8003428:	e7f5      	b.n	8003416 <sin+0x66>
 800342a:	bf00      	nop
 800342c:	f3af 8000 	nop.w
	...
 8003438:	3fe921fb 	.word	0x3fe921fb
 800343c:	7fefffff 	.word	0x7fefffff

08003440 <__ieee754_rem_pio2>:
 8003440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003444:	ec57 6b10 	vmov	r6, r7, d0
 8003448:	4bc3      	ldr	r3, [pc, #780]	; (8003758 <__ieee754_rem_pio2+0x318>)
 800344a:	b08d      	sub	sp, #52	; 0x34
 800344c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003450:	4598      	cmp	r8, r3
 8003452:	4604      	mov	r4, r0
 8003454:	9704      	str	r7, [sp, #16]
 8003456:	dc07      	bgt.n	8003468 <__ieee754_rem_pio2+0x28>
 8003458:	2200      	movs	r2, #0
 800345a:	2300      	movs	r3, #0
 800345c:	ed84 0b00 	vstr	d0, [r4]
 8003460:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003464:	2500      	movs	r5, #0
 8003466:	e027      	b.n	80034b8 <__ieee754_rem_pio2+0x78>
 8003468:	4bbc      	ldr	r3, [pc, #752]	; (800375c <__ieee754_rem_pio2+0x31c>)
 800346a:	4598      	cmp	r8, r3
 800346c:	dc75      	bgt.n	800355a <__ieee754_rem_pio2+0x11a>
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	4dbb      	ldr	r5, [pc, #748]	; (8003760 <__ieee754_rem_pio2+0x320>)
 8003472:	2b00      	cmp	r3, #0
 8003474:	ee10 0a10 	vmov	r0, s0
 8003478:	a3a9      	add	r3, pc, #676	; (adr r3, 8003720 <__ieee754_rem_pio2+0x2e0>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	4639      	mov	r1, r7
 8003480:	dd36      	ble.n	80034f0 <__ieee754_rem_pio2+0xb0>
 8003482:	f7fc fead 	bl	80001e0 <__aeabi_dsub>
 8003486:	45a8      	cmp	r8, r5
 8003488:	4606      	mov	r6, r0
 800348a:	460f      	mov	r7, r1
 800348c:	d018      	beq.n	80034c0 <__ieee754_rem_pio2+0x80>
 800348e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e8>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fc fea4 	bl	80001e0 <__aeabi_dsub>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	e9c4 2300 	strd	r2, r3, [r4]
 80034a0:	4630      	mov	r0, r6
 80034a2:	4639      	mov	r1, r7
 80034a4:	f7fc fe9c 	bl	80001e0 <__aeabi_dsub>
 80034a8:	a39f      	add	r3, pc, #636	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e8>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f7fc fe97 	bl	80001e0 <__aeabi_dsub>
 80034b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80034b6:	2501      	movs	r5, #1
 80034b8:	4628      	mov	r0, r5
 80034ba:	b00d      	add	sp, #52	; 0x34
 80034bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c0:	a39b      	add	r3, pc, #620	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2f0>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc fe8b 	bl	80001e0 <__aeabi_dsub>
 80034ca:	a39b      	add	r3, pc, #620	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f8>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	4606      	mov	r6, r0
 80034d2:	460f      	mov	r7, r1
 80034d4:	f7fc fe84 	bl	80001e0 <__aeabi_dsub>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	e9c4 2300 	strd	r2, r3, [r4]
 80034e0:	4630      	mov	r0, r6
 80034e2:	4639      	mov	r1, r7
 80034e4:	f7fc fe7c 	bl	80001e0 <__aeabi_dsub>
 80034e8:	a393      	add	r3, pc, #588	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f8>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	e7de      	b.n	80034ae <__ieee754_rem_pio2+0x6e>
 80034f0:	f7fc fe78 	bl	80001e4 <__adddf3>
 80034f4:	45a8      	cmp	r8, r5
 80034f6:	4606      	mov	r6, r0
 80034f8:	460f      	mov	r7, r1
 80034fa:	d016      	beq.n	800352a <__ieee754_rem_pio2+0xea>
 80034fc:	a38a      	add	r3, pc, #552	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e8>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fc fe6f 	bl	80001e4 <__adddf3>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	e9c4 2300 	strd	r2, r3, [r4]
 800350e:	4630      	mov	r0, r6
 8003510:	4639      	mov	r1, r7
 8003512:	f7fc fe65 	bl	80001e0 <__aeabi_dsub>
 8003516:	a384      	add	r3, pc, #528	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e8>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fc fe62 	bl	80001e4 <__adddf3>
 8003520:	f04f 35ff 	mov.w	r5, #4294967295
 8003524:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003528:	e7c6      	b.n	80034b8 <__ieee754_rem_pio2+0x78>
 800352a:	a381      	add	r3, pc, #516	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2f0>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f7fc fe58 	bl	80001e4 <__adddf3>
 8003534:	a380      	add	r3, pc, #512	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f8>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	4606      	mov	r6, r0
 800353c:	460f      	mov	r7, r1
 800353e:	f7fc fe51 	bl	80001e4 <__adddf3>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9c4 2300 	strd	r2, r3, [r4]
 800354a:	4630      	mov	r0, r6
 800354c:	4639      	mov	r1, r7
 800354e:	f7fc fe47 	bl	80001e0 <__aeabi_dsub>
 8003552:	a379      	add	r3, pc, #484	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f8>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	e7e0      	b.n	800351c <__ieee754_rem_pio2+0xdc>
 800355a:	4b82      	ldr	r3, [pc, #520]	; (8003764 <__ieee754_rem_pio2+0x324>)
 800355c:	4598      	cmp	r8, r3
 800355e:	f300 80d0 	bgt.w	8003702 <__ieee754_rem_pio2+0x2c2>
 8003562:	f000 fe23 	bl	80041ac <fabs>
 8003566:	ec57 6b10 	vmov	r6, r7, d0
 800356a:	ee10 0a10 	vmov	r0, s0
 800356e:	a374      	add	r3, pc, #464	; (adr r3, 8003740 <__ieee754_rem_pio2+0x300>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	4639      	mov	r1, r7
 8003576:	f7fc ffeb 	bl	8000550 <__aeabi_dmul>
 800357a:	2200      	movs	r2, #0
 800357c:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <__ieee754_rem_pio2+0x328>)
 800357e:	f7fc fe31 	bl	80001e4 <__adddf3>
 8003582:	f7fd fa7f 	bl	8000a84 <__aeabi_d2iz>
 8003586:	4605      	mov	r5, r0
 8003588:	f7fc ff78 	bl	800047c <__aeabi_i2d>
 800358c:	a364      	add	r3, pc, #400	; (adr r3, 8003720 <__ieee754_rem_pio2+0x2e0>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003596:	f7fc ffdb 	bl	8000550 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4630      	mov	r0, r6
 80035a0:	4639      	mov	r1, r7
 80035a2:	f7fc fe1d 	bl	80001e0 <__aeabi_dsub>
 80035a6:	a360      	add	r3, pc, #384	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e8>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	4682      	mov	sl, r0
 80035ae:	468b      	mov	fp, r1
 80035b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035b4:	f7fc ffcc 	bl	8000550 <__aeabi_dmul>
 80035b8:	2d1f      	cmp	r5, #31
 80035ba:	4606      	mov	r6, r0
 80035bc:	460f      	mov	r7, r1
 80035be:	dc0c      	bgt.n	80035da <__ieee754_rem_pio2+0x19a>
 80035c0:	1e6a      	subs	r2, r5, #1
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <__ieee754_rem_pio2+0x32c>)
 80035c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c8:	4543      	cmp	r3, r8
 80035ca:	d006      	beq.n	80035da <__ieee754_rem_pio2+0x19a>
 80035cc:	4632      	mov	r2, r6
 80035ce:	463b      	mov	r3, r7
 80035d0:	4650      	mov	r0, sl
 80035d2:	4659      	mov	r1, fp
 80035d4:	f7fc fe04 	bl	80001e0 <__aeabi_dsub>
 80035d8:	e00e      	b.n	80035f8 <__ieee754_rem_pio2+0x1b8>
 80035da:	4632      	mov	r2, r6
 80035dc:	463b      	mov	r3, r7
 80035de:	4650      	mov	r0, sl
 80035e0:	4659      	mov	r1, fp
 80035e2:	f7fc fdfd 	bl	80001e0 <__aeabi_dsub>
 80035e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80035ea:	9305      	str	r3, [sp, #20]
 80035ec:	9a05      	ldr	r2, [sp, #20]
 80035ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	dc02      	bgt.n	80035fe <__ieee754_rem_pio2+0x1be>
 80035f8:	e9c4 0100 	strd	r0, r1, [r4]
 80035fc:	e039      	b.n	8003672 <__ieee754_rem_pio2+0x232>
 80035fe:	a34c      	add	r3, pc, #304	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2f0>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003608:	f7fc ffa2 	bl	8000550 <__aeabi_dmul>
 800360c:	4606      	mov	r6, r0
 800360e:	460f      	mov	r7, r1
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4650      	mov	r0, sl
 8003616:	4659      	mov	r1, fp
 8003618:	f7fc fde2 	bl	80001e0 <__aeabi_dsub>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4680      	mov	r8, r0
 8003622:	4689      	mov	r9, r1
 8003624:	4650      	mov	r0, sl
 8003626:	4659      	mov	r1, fp
 8003628:	f7fc fdda 	bl	80001e0 <__aeabi_dsub>
 800362c:	4632      	mov	r2, r6
 800362e:	463b      	mov	r3, r7
 8003630:	f7fc fdd6 	bl	80001e0 <__aeabi_dsub>
 8003634:	a340      	add	r3, pc, #256	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f8>)
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	4606      	mov	r6, r0
 800363c:	460f      	mov	r7, r1
 800363e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003642:	f7fc ff85 	bl	8000550 <__aeabi_dmul>
 8003646:	4632      	mov	r2, r6
 8003648:	463b      	mov	r3, r7
 800364a:	f7fc fdc9 	bl	80001e0 <__aeabi_dsub>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4606      	mov	r6, r0
 8003654:	460f      	mov	r7, r1
 8003656:	4640      	mov	r0, r8
 8003658:	4649      	mov	r1, r9
 800365a:	f7fc fdc1 	bl	80001e0 <__aeabi_dsub>
 800365e:	9a05      	ldr	r2, [sp, #20]
 8003660:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b31      	cmp	r3, #49	; 0x31
 8003668:	dc20      	bgt.n	80036ac <__ieee754_rem_pio2+0x26c>
 800366a:	e9c4 0100 	strd	r0, r1, [r4]
 800366e:	46c2      	mov	sl, r8
 8003670:	46cb      	mov	fp, r9
 8003672:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003676:	4650      	mov	r0, sl
 8003678:	4642      	mov	r2, r8
 800367a:	464b      	mov	r3, r9
 800367c:	4659      	mov	r1, fp
 800367e:	f7fc fdaf 	bl	80001e0 <__aeabi_dsub>
 8003682:	463b      	mov	r3, r7
 8003684:	4632      	mov	r2, r6
 8003686:	f7fc fdab 	bl	80001e0 <__aeabi_dsub>
 800368a:	9b04      	ldr	r3, [sp, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003692:	f6bf af11 	bge.w	80034b8 <__ieee754_rem_pio2+0x78>
 8003696:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800369a:	6063      	str	r3, [r4, #4]
 800369c:	f8c4 8000 	str.w	r8, [r4]
 80036a0:	60a0      	str	r0, [r4, #8]
 80036a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036a6:	60e3      	str	r3, [r4, #12]
 80036a8:	426d      	negs	r5, r5
 80036aa:	e705      	b.n	80034b8 <__ieee754_rem_pio2+0x78>
 80036ac:	a326      	add	r3, pc, #152	; (adr r3, 8003748 <__ieee754_rem_pio2+0x308>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036b6:	f7fc ff4b 	bl	8000550 <__aeabi_dmul>
 80036ba:	4606      	mov	r6, r0
 80036bc:	460f      	mov	r7, r1
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4640      	mov	r0, r8
 80036c4:	4649      	mov	r1, r9
 80036c6:	f7fc fd8b 	bl	80001e0 <__aeabi_dsub>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4682      	mov	sl, r0
 80036d0:	468b      	mov	fp, r1
 80036d2:	4640      	mov	r0, r8
 80036d4:	4649      	mov	r1, r9
 80036d6:	f7fc fd83 	bl	80001e0 <__aeabi_dsub>
 80036da:	4632      	mov	r2, r6
 80036dc:	463b      	mov	r3, r7
 80036de:	f7fc fd7f 	bl	80001e0 <__aeabi_dsub>
 80036e2:	a31b      	add	r3, pc, #108	; (adr r3, 8003750 <__ieee754_rem_pio2+0x310>)
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	4606      	mov	r6, r0
 80036ea:	460f      	mov	r7, r1
 80036ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f0:	f7fc ff2e 	bl	8000550 <__aeabi_dmul>
 80036f4:	4632      	mov	r2, r6
 80036f6:	463b      	mov	r3, r7
 80036f8:	f7fc fd72 	bl	80001e0 <__aeabi_dsub>
 80036fc:	4606      	mov	r6, r0
 80036fe:	460f      	mov	r7, r1
 8003700:	e764      	b.n	80035cc <__ieee754_rem_pio2+0x18c>
 8003702:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <__ieee754_rem_pio2+0x330>)
 8003704:	4598      	cmp	r8, r3
 8003706:	dd35      	ble.n	8003774 <__ieee754_rem_pio2+0x334>
 8003708:	ee10 2a10 	vmov	r2, s0
 800370c:	463b      	mov	r3, r7
 800370e:	4630      	mov	r0, r6
 8003710:	4639      	mov	r1, r7
 8003712:	f7fc fd65 	bl	80001e0 <__aeabi_dsub>
 8003716:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800371a:	e9c4 0100 	strd	r0, r1, [r4]
 800371e:	e6a1      	b.n	8003464 <__ieee754_rem_pio2+0x24>
 8003720:	54400000 	.word	0x54400000
 8003724:	3ff921fb 	.word	0x3ff921fb
 8003728:	1a626331 	.word	0x1a626331
 800372c:	3dd0b461 	.word	0x3dd0b461
 8003730:	1a600000 	.word	0x1a600000
 8003734:	3dd0b461 	.word	0x3dd0b461
 8003738:	2e037073 	.word	0x2e037073
 800373c:	3ba3198a 	.word	0x3ba3198a
 8003740:	6dc9c883 	.word	0x6dc9c883
 8003744:	3fe45f30 	.word	0x3fe45f30
 8003748:	2e000000 	.word	0x2e000000
 800374c:	3ba3198a 	.word	0x3ba3198a
 8003750:	252049c1 	.word	0x252049c1
 8003754:	397b839a 	.word	0x397b839a
 8003758:	3fe921fb 	.word	0x3fe921fb
 800375c:	4002d97b 	.word	0x4002d97b
 8003760:	3ff921fb 	.word	0x3ff921fb
 8003764:	413921fb 	.word	0x413921fb
 8003768:	3fe00000 	.word	0x3fe00000
 800376c:	08004428 	.word	0x08004428
 8003770:	7fefffff 	.word	0x7fefffff
 8003774:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003778:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800377c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003780:	4630      	mov	r0, r6
 8003782:	460f      	mov	r7, r1
 8003784:	f7fd f97e 	bl	8000a84 <__aeabi_d2iz>
 8003788:	f7fc fe78 	bl	800047c <__aeabi_i2d>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4630      	mov	r0, r6
 8003792:	4639      	mov	r1, r7
 8003794:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003798:	f7fc fd22 	bl	80001e0 <__aeabi_dsub>
 800379c:	2200      	movs	r2, #0
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <__ieee754_rem_pio2+0x3dc>)
 80037a0:	f7fc fed6 	bl	8000550 <__aeabi_dmul>
 80037a4:	460f      	mov	r7, r1
 80037a6:	4606      	mov	r6, r0
 80037a8:	f7fd f96c 	bl	8000a84 <__aeabi_d2iz>
 80037ac:	f7fc fe66 	bl	800047c <__aeabi_i2d>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4630      	mov	r0, r6
 80037b6:	4639      	mov	r1, r7
 80037b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80037bc:	f7fc fd10 	bl	80001e0 <__aeabi_dsub>
 80037c0:	2200      	movs	r2, #0
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <__ieee754_rem_pio2+0x3dc>)
 80037c4:	f7fc fec4 	bl	8000550 <__aeabi_dmul>
 80037c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80037d0:	f04f 0803 	mov.w	r8, #3
 80037d4:	2600      	movs	r6, #0
 80037d6:	2700      	movs	r7, #0
 80037d8:	4632      	mov	r2, r6
 80037da:	463b      	mov	r3, r7
 80037dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80037e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80037e4:	f7fd f91c 	bl	8000a20 <__aeabi_dcmpeq>
 80037e8:	b9b0      	cbnz	r0, 8003818 <__ieee754_rem_pio2+0x3d8>
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <__ieee754_rem_pio2+0x3e0>)
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2302      	movs	r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	462a      	mov	r2, r5
 80037f4:	4643      	mov	r3, r8
 80037f6:	4621      	mov	r1, r4
 80037f8:	a806      	add	r0, sp, #24
 80037fa:	f000 f8dd 	bl	80039b8 <__kernel_rem_pio2>
 80037fe:	9b04      	ldr	r3, [sp, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	4605      	mov	r5, r0
 8003804:	f6bf ae58 	bge.w	80034b8 <__ieee754_rem_pio2+0x78>
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800380e:	6063      	str	r3, [r4, #4]
 8003810:	68e3      	ldr	r3, [r4, #12]
 8003812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003816:	e746      	b.n	80036a6 <__ieee754_rem_pio2+0x266>
 8003818:	46d0      	mov	r8, sl
 800381a:	e7dd      	b.n	80037d8 <__ieee754_rem_pio2+0x398>
 800381c:	41700000 	.word	0x41700000
 8003820:	080044a8 	.word	0x080044a8
 8003824:	00000000 	.word	0x00000000

08003828 <__kernel_cos>:
 8003828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	ec59 8b10 	vmov	r8, r9, d0
 8003830:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003834:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003838:	ed2d 8b02 	vpush	{d8}
 800383c:	eeb0 8a41 	vmov.f32	s16, s2
 8003840:	eef0 8a61 	vmov.f32	s17, s3
 8003844:	da07      	bge.n	8003856 <__kernel_cos+0x2e>
 8003846:	ee10 0a10 	vmov	r0, s0
 800384a:	4649      	mov	r1, r9
 800384c:	f7fd f91a 	bl	8000a84 <__aeabi_d2iz>
 8003850:	2800      	cmp	r0, #0
 8003852:	f000 8089 	beq.w	8003968 <__kernel_cos+0x140>
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fc fe77 	bl	8000550 <__aeabi_dmul>
 8003862:	2200      	movs	r2, #0
 8003864:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <__kernel_cos+0x178>)
 8003866:	4604      	mov	r4, r0
 8003868:	460d      	mov	r5, r1
 800386a:	f7fc fe71 	bl	8000550 <__aeabi_dmul>
 800386e:	a340      	add	r3, pc, #256	; (adr r3, 8003970 <__kernel_cos+0x148>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	4682      	mov	sl, r0
 8003876:	468b      	mov	fp, r1
 8003878:	4620      	mov	r0, r4
 800387a:	4629      	mov	r1, r5
 800387c:	f7fc fe68 	bl	8000550 <__aeabi_dmul>
 8003880:	a33d      	add	r3, pc, #244	; (adr r3, 8003978 <__kernel_cos+0x150>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc fcad 	bl	80001e4 <__adddf3>
 800388a:	4622      	mov	r2, r4
 800388c:	462b      	mov	r3, r5
 800388e:	f7fc fe5f 	bl	8000550 <__aeabi_dmul>
 8003892:	a33b      	add	r3, pc, #236	; (adr r3, 8003980 <__kernel_cos+0x158>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f7fc fca2 	bl	80001e0 <__aeabi_dsub>
 800389c:	4622      	mov	r2, r4
 800389e:	462b      	mov	r3, r5
 80038a0:	f7fc fe56 	bl	8000550 <__aeabi_dmul>
 80038a4:	a338      	add	r3, pc, #224	; (adr r3, 8003988 <__kernel_cos+0x160>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f7fc fc9b 	bl	80001e4 <__adddf3>
 80038ae:	4622      	mov	r2, r4
 80038b0:	462b      	mov	r3, r5
 80038b2:	f7fc fe4d 	bl	8000550 <__aeabi_dmul>
 80038b6:	a336      	add	r3, pc, #216	; (adr r3, 8003990 <__kernel_cos+0x168>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f7fc fc90 	bl	80001e0 <__aeabi_dsub>
 80038c0:	4622      	mov	r2, r4
 80038c2:	462b      	mov	r3, r5
 80038c4:	f7fc fe44 	bl	8000550 <__aeabi_dmul>
 80038c8:	a333      	add	r3, pc, #204	; (adr r3, 8003998 <__kernel_cos+0x170>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fc89 	bl	80001e4 <__adddf3>
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	f7fc fe3b 	bl	8000550 <__aeabi_dmul>
 80038da:	4622      	mov	r2, r4
 80038dc:	462b      	mov	r3, r5
 80038de:	f7fc fe37 	bl	8000550 <__aeabi_dmul>
 80038e2:	ec53 2b18 	vmov	r2, r3, d8
 80038e6:	4604      	mov	r4, r0
 80038e8:	460d      	mov	r5, r1
 80038ea:	4640      	mov	r0, r8
 80038ec:	4649      	mov	r1, r9
 80038ee:	f7fc fe2f 	bl	8000550 <__aeabi_dmul>
 80038f2:	460b      	mov	r3, r1
 80038f4:	4602      	mov	r2, r0
 80038f6:	4629      	mov	r1, r5
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7fc fc71 	bl	80001e0 <__aeabi_dsub>
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <__kernel_cos+0x17c>)
 8003900:	429e      	cmp	r6, r3
 8003902:	4680      	mov	r8, r0
 8003904:	4689      	mov	r9, r1
 8003906:	dc11      	bgt.n	800392c <__kernel_cos+0x104>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4650      	mov	r0, sl
 800390e:	4659      	mov	r1, fp
 8003910:	f7fc fc66 	bl	80001e0 <__aeabi_dsub>
 8003914:	460b      	mov	r3, r1
 8003916:	4924      	ldr	r1, [pc, #144]	; (80039a8 <__kernel_cos+0x180>)
 8003918:	4602      	mov	r2, r0
 800391a:	2000      	movs	r0, #0
 800391c:	f7fc fc60 	bl	80001e0 <__aeabi_dsub>
 8003920:	ecbd 8b02 	vpop	{d8}
 8003924:	ec41 0b10 	vmov	d0, r0, r1
 8003928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <__kernel_cos+0x184>)
 800392e:	491e      	ldr	r1, [pc, #120]	; (80039a8 <__kernel_cos+0x180>)
 8003930:	429e      	cmp	r6, r3
 8003932:	bfcc      	ite	gt
 8003934:	4d1e      	ldrgt	r5, [pc, #120]	; (80039b0 <__kernel_cos+0x188>)
 8003936:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800393a:	2400      	movs	r4, #0
 800393c:	4622      	mov	r2, r4
 800393e:	462b      	mov	r3, r5
 8003940:	2000      	movs	r0, #0
 8003942:	f7fc fc4d 	bl	80001e0 <__aeabi_dsub>
 8003946:	4622      	mov	r2, r4
 8003948:	4606      	mov	r6, r0
 800394a:	460f      	mov	r7, r1
 800394c:	462b      	mov	r3, r5
 800394e:	4650      	mov	r0, sl
 8003950:	4659      	mov	r1, fp
 8003952:	f7fc fc45 	bl	80001e0 <__aeabi_dsub>
 8003956:	4642      	mov	r2, r8
 8003958:	464b      	mov	r3, r9
 800395a:	f7fc fc41 	bl	80001e0 <__aeabi_dsub>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4630      	mov	r0, r6
 8003964:	4639      	mov	r1, r7
 8003966:	e7d9      	b.n	800391c <__kernel_cos+0xf4>
 8003968:	2000      	movs	r0, #0
 800396a:	490f      	ldr	r1, [pc, #60]	; (80039a8 <__kernel_cos+0x180>)
 800396c:	e7d8      	b.n	8003920 <__kernel_cos+0xf8>
 800396e:	bf00      	nop
 8003970:	be8838d4 	.word	0xbe8838d4
 8003974:	bda8fae9 	.word	0xbda8fae9
 8003978:	bdb4b1c4 	.word	0xbdb4b1c4
 800397c:	3e21ee9e 	.word	0x3e21ee9e
 8003980:	809c52ad 	.word	0x809c52ad
 8003984:	3e927e4f 	.word	0x3e927e4f
 8003988:	19cb1590 	.word	0x19cb1590
 800398c:	3efa01a0 	.word	0x3efa01a0
 8003990:	16c15177 	.word	0x16c15177
 8003994:	3f56c16c 	.word	0x3f56c16c
 8003998:	5555554c 	.word	0x5555554c
 800399c:	3fa55555 	.word	0x3fa55555
 80039a0:	3fe00000 	.word	0x3fe00000
 80039a4:	3fd33332 	.word	0x3fd33332
 80039a8:	3ff00000 	.word	0x3ff00000
 80039ac:	3fe90000 	.word	0x3fe90000
 80039b0:	3fd20000 	.word	0x3fd20000
 80039b4:	00000000 	.word	0x00000000

080039b8 <__kernel_rem_pio2>:
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	ed2d 8b02 	vpush	{d8}
 80039c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80039c4:	1ed4      	subs	r4, r2, #3
 80039c6:	9308      	str	r3, [sp, #32]
 80039c8:	9101      	str	r1, [sp, #4]
 80039ca:	4bc5      	ldr	r3, [pc, #788]	; (8003ce0 <__kernel_rem_pio2+0x328>)
 80039cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80039ce:	9009      	str	r0, [sp, #36]	; 0x24
 80039d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039d4:	9304      	str	r3, [sp, #16]
 80039d6:	9b08      	ldr	r3, [sp, #32]
 80039d8:	3b01      	subs	r3, #1
 80039da:	9307      	str	r3, [sp, #28]
 80039dc:	2318      	movs	r3, #24
 80039de:	fb94 f4f3 	sdiv	r4, r4, r3
 80039e2:	f06f 0317 	mvn.w	r3, #23
 80039e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80039ea:	fb04 3303 	mla	r3, r4, r3, r3
 80039ee:	eb03 0a02 	add.w	sl, r3, r2
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	9a07      	ldr	r2, [sp, #28]
 80039f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003cd0 <__kernel_rem_pio2+0x318>
 80039fa:	eb03 0802 	add.w	r8, r3, r2
 80039fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003a00:	1aa7      	subs	r7, r4, r2
 8003a02:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a06:	ae22      	add	r6, sp, #136	; 0x88
 8003a08:	2500      	movs	r5, #0
 8003a0a:	4545      	cmp	r5, r8
 8003a0c:	dd13      	ble.n	8003a36 <__kernel_rem_pio2+0x7e>
 8003a0e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8003cd0 <__kernel_rem_pio2+0x318>
 8003a12:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003a16:	2600      	movs	r6, #0
 8003a18:	9b04      	ldr	r3, [sp, #16]
 8003a1a:	429e      	cmp	r6, r3
 8003a1c:	dc32      	bgt.n	8003a84 <__kernel_rem_pio2+0xcc>
 8003a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	9b08      	ldr	r3, [sp, #32]
 8003a24:	199d      	adds	r5, r3, r6
 8003a26:	ab22      	add	r3, sp, #136	; 0x88
 8003a28:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003a2c:	9306      	str	r3, [sp, #24]
 8003a2e:	ec59 8b18 	vmov	r8, r9, d8
 8003a32:	2700      	movs	r7, #0
 8003a34:	e01f      	b.n	8003a76 <__kernel_rem_pio2+0xbe>
 8003a36:	42ef      	cmn	r7, r5
 8003a38:	d407      	bmi.n	8003a4a <__kernel_rem_pio2+0x92>
 8003a3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003a3e:	f7fc fd1d 	bl	800047c <__aeabi_i2d>
 8003a42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a46:	3501      	adds	r5, #1
 8003a48:	e7df      	b.n	8003a0a <__kernel_rem_pio2+0x52>
 8003a4a:	ec51 0b18 	vmov	r0, r1, d8
 8003a4e:	e7f8      	b.n	8003a42 <__kernel_rem_pio2+0x8a>
 8003a50:	9906      	ldr	r1, [sp, #24]
 8003a52:	9d02      	ldr	r5, [sp, #8]
 8003a54:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003a58:	9106      	str	r1, [sp, #24]
 8003a5a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003a5e:	9502      	str	r5, [sp, #8]
 8003a60:	f7fc fd76 	bl	8000550 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4640      	mov	r0, r8
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	f7fc fbba 	bl	80001e4 <__adddf3>
 8003a70:	3701      	adds	r7, #1
 8003a72:	4680      	mov	r8, r0
 8003a74:	4689      	mov	r9, r1
 8003a76:	9b07      	ldr	r3, [sp, #28]
 8003a78:	429f      	cmp	r7, r3
 8003a7a:	dde9      	ble.n	8003a50 <__kernel_rem_pio2+0x98>
 8003a7c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7c9      	b.n	8003a18 <__kernel_rem_pio2+0x60>
 8003a84:	9b04      	ldr	r3, [sp, #16]
 8003a86:	aa0e      	add	r2, sp, #56	; 0x38
 8003a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a8c:	930c      	str	r3, [sp, #48]	; 0x30
 8003a8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003a90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a94:	9c04      	ldr	r4, [sp, #16]
 8003a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a98:	ab9a      	add	r3, sp, #616	; 0x268
 8003a9a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8003a9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003aa6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003aaa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8003aae:	ab9a      	add	r3, sp, #616	; 0x268
 8003ab0:	445b      	add	r3, fp
 8003ab2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8003ab6:	2500      	movs	r5, #0
 8003ab8:	1b63      	subs	r3, r4, r5
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dc78      	bgt.n	8003bb0 <__kernel_rem_pio2+0x1f8>
 8003abe:	4650      	mov	r0, sl
 8003ac0:	ec49 8b10 	vmov	d0, r8, r9
 8003ac4:	f000 fc00 	bl	80042c8 <scalbn>
 8003ac8:	ec57 6b10 	vmov	r6, r7, d0
 8003acc:	2200      	movs	r2, #0
 8003ace:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ad2:	ee10 0a10 	vmov	r0, s0
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	f7fc fd3a 	bl	8000550 <__aeabi_dmul>
 8003adc:	ec41 0b10 	vmov	d0, r0, r1
 8003ae0:	f000 fb6e 	bl	80041c0 <floor>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	ec51 0b10 	vmov	r0, r1, d0
 8003aea:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <__kernel_rem_pio2+0x32c>)
 8003aec:	f7fc fd30 	bl	8000550 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4630      	mov	r0, r6
 8003af6:	4639      	mov	r1, r7
 8003af8:	f7fc fb72 	bl	80001e0 <__aeabi_dsub>
 8003afc:	460f      	mov	r7, r1
 8003afe:	4606      	mov	r6, r0
 8003b00:	f7fc ffc0 	bl	8000a84 <__aeabi_d2iz>
 8003b04:	9006      	str	r0, [sp, #24]
 8003b06:	f7fc fcb9 	bl	800047c <__aeabi_i2d>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4630      	mov	r0, r6
 8003b10:	4639      	mov	r1, r7
 8003b12:	f7fc fb65 	bl	80001e0 <__aeabi_dsub>
 8003b16:	f1ba 0f00 	cmp.w	sl, #0
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460f      	mov	r7, r1
 8003b1e:	dd6c      	ble.n	8003bfa <__kernel_rem_pio2+0x242>
 8003b20:	1e62      	subs	r2, r4, #1
 8003b22:	ab0e      	add	r3, sp, #56	; 0x38
 8003b24:	f1ca 0118 	rsb	r1, sl, #24
 8003b28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b2c:	9d06      	ldr	r5, [sp, #24]
 8003b2e:	fa40 f301 	asr.w	r3, r0, r1
 8003b32:	441d      	add	r5, r3
 8003b34:	408b      	lsls	r3, r1
 8003b36:	1ac0      	subs	r0, r0, r3
 8003b38:	ab0e      	add	r3, sp, #56	; 0x38
 8003b3a:	9506      	str	r5, [sp, #24]
 8003b3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003b40:	f1ca 0317 	rsb	r3, sl, #23
 8003b44:	fa40 f303 	asr.w	r3, r0, r3
 8003b48:	9302      	str	r3, [sp, #8]
 8003b4a:	9b02      	ldr	r3, [sp, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dd62      	ble.n	8003c16 <__kernel_rem_pio2+0x25e>
 8003b50:	9b06      	ldr	r3, [sp, #24]
 8003b52:	2200      	movs	r2, #0
 8003b54:	3301      	adds	r3, #1
 8003b56:	9306      	str	r3, [sp, #24]
 8003b58:	4615      	mov	r5, r2
 8003b5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003b5e:	4294      	cmp	r4, r2
 8003b60:	f300 8095 	bgt.w	8003c8e <__kernel_rem_pio2+0x2d6>
 8003b64:	f1ba 0f00 	cmp.w	sl, #0
 8003b68:	dd07      	ble.n	8003b7a <__kernel_rem_pio2+0x1c2>
 8003b6a:	f1ba 0f01 	cmp.w	sl, #1
 8003b6e:	f000 80a2 	beq.w	8003cb6 <__kernel_rem_pio2+0x2fe>
 8003b72:	f1ba 0f02 	cmp.w	sl, #2
 8003b76:	f000 80c1 	beq.w	8003cfc <__kernel_rem_pio2+0x344>
 8003b7a:	9b02      	ldr	r3, [sp, #8]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d14a      	bne.n	8003c16 <__kernel_rem_pio2+0x25e>
 8003b80:	4632      	mov	r2, r6
 8003b82:	463b      	mov	r3, r7
 8003b84:	2000      	movs	r0, #0
 8003b86:	4958      	ldr	r1, [pc, #352]	; (8003ce8 <__kernel_rem_pio2+0x330>)
 8003b88:	f7fc fb2a 	bl	80001e0 <__aeabi_dsub>
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	460f      	mov	r7, r1
 8003b90:	2d00      	cmp	r5, #0
 8003b92:	d040      	beq.n	8003c16 <__kernel_rem_pio2+0x25e>
 8003b94:	4650      	mov	r0, sl
 8003b96:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003cd8 <__kernel_rem_pio2+0x320>
 8003b9a:	f000 fb95 	bl	80042c8 <scalbn>
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	ec53 2b10 	vmov	r2, r3, d0
 8003ba6:	f7fc fb1b 	bl	80001e0 <__aeabi_dsub>
 8003baa:	4606      	mov	r6, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	e032      	b.n	8003c16 <__kernel_rem_pio2+0x25e>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4b4e      	ldr	r3, [pc, #312]	; (8003cec <__kernel_rem_pio2+0x334>)
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	f7fc fcca 	bl	8000550 <__aeabi_dmul>
 8003bbc:	f7fc ff62 	bl	8000a84 <__aeabi_d2iz>
 8003bc0:	f7fc fc5c 	bl	800047c <__aeabi_i2d>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <__kernel_rem_pio2+0x338>)
 8003bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bcc:	f7fc fcc0 	bl	8000550 <__aeabi_dmul>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	f7fc fb02 	bl	80001e0 <__aeabi_dsub>
 8003bdc:	f7fc ff52 	bl	8000a84 <__aeabi_d2iz>
 8003be0:	ab0e      	add	r3, sp, #56	; 0x38
 8003be2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003be6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bee:	f7fc faf9 	bl	80001e4 <__adddf3>
 8003bf2:	3501      	adds	r5, #1
 8003bf4:	4680      	mov	r8, r0
 8003bf6:	4689      	mov	r9, r1
 8003bf8:	e75e      	b.n	8003ab8 <__kernel_rem_pio2+0x100>
 8003bfa:	d105      	bne.n	8003c08 <__kernel_rem_pio2+0x250>
 8003bfc:	1e63      	subs	r3, r4, #1
 8003bfe:	aa0e      	add	r2, sp, #56	; 0x38
 8003c00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c04:	15c3      	asrs	r3, r0, #23
 8003c06:	e79f      	b.n	8003b48 <__kernel_rem_pio2+0x190>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <__kernel_rem_pio2+0x33c>)
 8003c0c:	f7fc ff26 	bl	8000a5c <__aeabi_dcmpge>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d139      	bne.n	8003c88 <__kernel_rem_pio2+0x2d0>
 8003c14:	9002      	str	r0, [sp, #8]
 8003c16:	2200      	movs	r2, #0
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	f7fc feff 	bl	8000a20 <__aeabi_dcmpeq>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	f000 80c7 	beq.w	8003db6 <__kernel_rem_pio2+0x3fe>
 8003c28:	1e65      	subs	r5, r4, #1
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	9904      	ldr	r1, [sp, #16]
 8003c30:	428b      	cmp	r3, r1
 8003c32:	da6a      	bge.n	8003d0a <__kernel_rem_pio2+0x352>
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	f000 8088 	beq.w	8003d4a <__kernel_rem_pio2+0x392>
 8003c3a:	ab0e      	add	r3, sp, #56	; 0x38
 8003c3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003c40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80b4 	beq.w	8003db2 <__kernel_rem_pio2+0x3fa>
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003cd8 <__kernel_rem_pio2+0x320>
 8003c50:	f000 fb3a 	bl	80042c8 <scalbn>
 8003c54:	00ec      	lsls	r4, r5, #3
 8003c56:	ab72      	add	r3, sp, #456	; 0x1c8
 8003c58:	191e      	adds	r6, r3, r4
 8003c5a:	ec59 8b10 	vmov	r8, r9, d0
 8003c5e:	f106 0a08 	add.w	sl, r6, #8
 8003c62:	462f      	mov	r7, r5
 8003c64:	2f00      	cmp	r7, #0
 8003c66:	f280 80df 	bge.w	8003e28 <__kernel_rem_pio2+0x470>
 8003c6a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8003cd0 <__kernel_rem_pio2+0x318>
 8003c6e:	f04f 0a00 	mov.w	sl, #0
 8003c72:	eba5 030a 	sub.w	r3, r5, sl
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f2c0 810a 	blt.w	8003e90 <__kernel_rem_pio2+0x4d8>
 8003c7c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003cf8 <__kernel_rem_pio2+0x340>
 8003c80:	ec59 8b18 	vmov	r8, r9, d8
 8003c84:	2700      	movs	r7, #0
 8003c86:	e0f5      	b.n	8003e74 <__kernel_rem_pio2+0x4bc>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	9302      	str	r3, [sp, #8]
 8003c8c:	e760      	b.n	8003b50 <__kernel_rem_pio2+0x198>
 8003c8e:	ab0e      	add	r3, sp, #56	; 0x38
 8003c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c94:	b94d      	cbnz	r5, 8003caa <__kernel_rem_pio2+0x2f2>
 8003c96:	b12b      	cbz	r3, 8003ca4 <__kernel_rem_pio2+0x2ec>
 8003c98:	a80e      	add	r0, sp, #56	; 0x38
 8003c9a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003c9e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	3201      	adds	r2, #1
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	e759      	b.n	8003b5e <__kernel_rem_pio2+0x1a6>
 8003caa:	a80e      	add	r0, sp, #56	; 0x38
 8003cac:	1acb      	subs	r3, r1, r3
 8003cae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003cb2:	462b      	mov	r3, r5
 8003cb4:	e7f6      	b.n	8003ca4 <__kernel_rem_pio2+0x2ec>
 8003cb6:	1e62      	subs	r2, r4, #1
 8003cb8:	ab0e      	add	r3, sp, #56	; 0x38
 8003cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003cc2:	a90e      	add	r1, sp, #56	; 0x38
 8003cc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003cc8:	e757      	b.n	8003b7a <__kernel_rem_pio2+0x1c2>
 8003cca:	bf00      	nop
 8003ccc:	f3af 8000 	nop.w
	...
 8003cdc:	3ff00000 	.word	0x3ff00000
 8003ce0:	080045f0 	.word	0x080045f0
 8003ce4:	40200000 	.word	0x40200000
 8003ce8:	3ff00000 	.word	0x3ff00000
 8003cec:	3e700000 	.word	0x3e700000
 8003cf0:	41700000 	.word	0x41700000
 8003cf4:	3fe00000 	.word	0x3fe00000
 8003cf8:	080045b0 	.word	0x080045b0
 8003cfc:	1e62      	subs	r2, r4, #1
 8003cfe:	ab0e      	add	r3, sp, #56	; 0x38
 8003d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d08:	e7db      	b.n	8003cc2 <__kernel_rem_pio2+0x30a>
 8003d0a:	a90e      	add	r1, sp, #56	; 0x38
 8003d0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	430a      	orrs	r2, r1
 8003d14:	e78b      	b.n	8003c2e <__kernel_rem_pio2+0x276>
 8003d16:	3301      	adds	r3, #1
 8003d18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d0fa      	beq.n	8003d16 <__kernel_rem_pio2+0x35e>
 8003d20:	9a08      	ldr	r2, [sp, #32]
 8003d22:	4422      	add	r2, r4
 8003d24:	00d2      	lsls	r2, r2, #3
 8003d26:	a922      	add	r1, sp, #136	; 0x88
 8003d28:	18e3      	adds	r3, r4, r3
 8003d2a:	9206      	str	r2, [sp, #24]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	9302      	str	r3, [sp, #8]
 8003d30:	f10b 0108 	add.w	r1, fp, #8
 8003d34:	f102 0308 	add.w	r3, r2, #8
 8003d38:	1c66      	adds	r6, r4, #1
 8003d3a:	910a      	str	r1, [sp, #40]	; 0x28
 8003d3c:	2500      	movs	r5, #0
 8003d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8003d40:	9b02      	ldr	r3, [sp, #8]
 8003d42:	42b3      	cmp	r3, r6
 8003d44:	da04      	bge.n	8003d50 <__kernel_rem_pio2+0x398>
 8003d46:	461c      	mov	r4, r3
 8003d48:	e6a6      	b.n	8003a98 <__kernel_rem_pio2+0xe0>
 8003d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e7e3      	b.n	8003d18 <__kernel_rem_pio2+0x360>
 8003d50:	9b06      	ldr	r3, [sp, #24]
 8003d52:	18ef      	adds	r7, r5, r3
 8003d54:	ab22      	add	r3, sp, #136	; 0x88
 8003d56:	441f      	add	r7, r3
 8003d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d5e:	f7fc fb8d 	bl	800047c <__aeabi_i2d>
 8003d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d64:	461c      	mov	r4, r3
 8003d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d68:	e9c7 0100 	strd	r0, r1, [r7]
 8003d6c:	eb03 0b05 	add.w	fp, r3, r5
 8003d70:	2700      	movs	r7, #0
 8003d72:	f04f 0800 	mov.w	r8, #0
 8003d76:	f04f 0900 	mov.w	r9, #0
 8003d7a:	9b07      	ldr	r3, [sp, #28]
 8003d7c:	429f      	cmp	r7, r3
 8003d7e:	dd08      	ble.n	8003d92 <__kernel_rem_pio2+0x3da>
 8003d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d82:	aa72      	add	r2, sp, #456	; 0x1c8
 8003d84:	18eb      	adds	r3, r5, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8003d8c:	3601      	adds	r6, #1
 8003d8e:	3508      	adds	r5, #8
 8003d90:	e7d6      	b.n	8003d40 <__kernel_rem_pio2+0x388>
 8003d92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003d96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003d9a:	f7fc fbd9 	bl	8000550 <__aeabi_dmul>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4640      	mov	r0, r8
 8003da4:	4649      	mov	r1, r9
 8003da6:	f7fc fa1d 	bl	80001e4 <__adddf3>
 8003daa:	3701      	adds	r7, #1
 8003dac:	4680      	mov	r8, r0
 8003dae:	4689      	mov	r9, r1
 8003db0:	e7e3      	b.n	8003d7a <__kernel_rem_pio2+0x3c2>
 8003db2:	3d01      	subs	r5, #1
 8003db4:	e741      	b.n	8003c3a <__kernel_rem_pio2+0x282>
 8003db6:	f1ca 0000 	rsb	r0, sl, #0
 8003dba:	ec47 6b10 	vmov	d0, r6, r7
 8003dbe:	f000 fa83 	bl	80042c8 <scalbn>
 8003dc2:	ec57 6b10 	vmov	r6, r7, d0
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4b99      	ldr	r3, [pc, #612]	; (8004030 <__kernel_rem_pio2+0x678>)
 8003dca:	ee10 0a10 	vmov	r0, s0
 8003dce:	4639      	mov	r1, r7
 8003dd0:	f7fc fe44 	bl	8000a5c <__aeabi_dcmpge>
 8003dd4:	b1f8      	cbz	r0, 8003e16 <__kernel_rem_pio2+0x45e>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4b96      	ldr	r3, [pc, #600]	; (8004034 <__kernel_rem_pio2+0x67c>)
 8003dda:	4630      	mov	r0, r6
 8003ddc:	4639      	mov	r1, r7
 8003dde:	f7fc fbb7 	bl	8000550 <__aeabi_dmul>
 8003de2:	f7fc fe4f 	bl	8000a84 <__aeabi_d2iz>
 8003de6:	4680      	mov	r8, r0
 8003de8:	f7fc fb48 	bl	800047c <__aeabi_i2d>
 8003dec:	2200      	movs	r2, #0
 8003dee:	4b90      	ldr	r3, [pc, #576]	; (8004030 <__kernel_rem_pio2+0x678>)
 8003df0:	f7fc fbae 	bl	8000550 <__aeabi_dmul>
 8003df4:	460b      	mov	r3, r1
 8003df6:	4602      	mov	r2, r0
 8003df8:	4639      	mov	r1, r7
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f7fc f9f0 	bl	80001e0 <__aeabi_dsub>
 8003e00:	f7fc fe40 	bl	8000a84 <__aeabi_d2iz>
 8003e04:	1c65      	adds	r5, r4, #1
 8003e06:	ab0e      	add	r3, sp, #56	; 0x38
 8003e08:	f10a 0a18 	add.w	sl, sl, #24
 8003e0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003e10:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003e14:	e719      	b.n	8003c4a <__kernel_rem_pio2+0x292>
 8003e16:	4630      	mov	r0, r6
 8003e18:	4639      	mov	r1, r7
 8003e1a:	f7fc fe33 	bl	8000a84 <__aeabi_d2iz>
 8003e1e:	ab0e      	add	r3, sp, #56	; 0x38
 8003e20:	4625      	mov	r5, r4
 8003e22:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003e26:	e710      	b.n	8003c4a <__kernel_rem_pio2+0x292>
 8003e28:	ab0e      	add	r3, sp, #56	; 0x38
 8003e2a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003e2e:	f7fc fb25 	bl	800047c <__aeabi_i2d>
 8003e32:	4642      	mov	r2, r8
 8003e34:	464b      	mov	r3, r9
 8003e36:	f7fc fb8b 	bl	8000550 <__aeabi_dmul>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003e40:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <__kernel_rem_pio2+0x67c>)
 8003e42:	4640      	mov	r0, r8
 8003e44:	4649      	mov	r1, r9
 8003e46:	f7fc fb83 	bl	8000550 <__aeabi_dmul>
 8003e4a:	3f01      	subs	r7, #1
 8003e4c:	4680      	mov	r8, r0
 8003e4e:	4689      	mov	r9, r1
 8003e50:	e708      	b.n	8003c64 <__kernel_rem_pio2+0x2ac>
 8003e52:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8003e5e:	f7fc fb77 	bl	8000550 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4640      	mov	r0, r8
 8003e68:	4649      	mov	r1, r9
 8003e6a:	f7fc f9bb 	bl	80001e4 <__adddf3>
 8003e6e:	3701      	adds	r7, #1
 8003e70:	4680      	mov	r8, r0
 8003e72:	4689      	mov	r9, r1
 8003e74:	9b04      	ldr	r3, [sp, #16]
 8003e76:	429f      	cmp	r7, r3
 8003e78:	dc01      	bgt.n	8003e7e <__kernel_rem_pio2+0x4c6>
 8003e7a:	45ba      	cmp	sl, r7
 8003e7c:	dae9      	bge.n	8003e52 <__kernel_rem_pio2+0x49a>
 8003e7e:	ab4a      	add	r3, sp, #296	; 0x128
 8003e80:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e84:	e9c3 8900 	strd	r8, r9, [r3]
 8003e88:	f10a 0a01 	add.w	sl, sl, #1
 8003e8c:	3e08      	subs	r6, #8
 8003e8e:	e6f0      	b.n	8003c72 <__kernel_rem_pio2+0x2ba>
 8003e90:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d85b      	bhi.n	8003f4e <__kernel_rem_pio2+0x596>
 8003e96:	e8df f003 	tbb	[pc, r3]
 8003e9a:	264a      	.short	0x264a
 8003e9c:	0226      	.short	0x0226
 8003e9e:	ab9a      	add	r3, sp, #616	; 0x268
 8003ea0:	441c      	add	r4, r3
 8003ea2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003ea6:	46a2      	mov	sl, r4
 8003ea8:	46ab      	mov	fp, r5
 8003eaa:	f1bb 0f00 	cmp.w	fp, #0
 8003eae:	dc6c      	bgt.n	8003f8a <__kernel_rem_pio2+0x5d2>
 8003eb0:	46a2      	mov	sl, r4
 8003eb2:	46ab      	mov	fp, r5
 8003eb4:	f1bb 0f01 	cmp.w	fp, #1
 8003eb8:	f300 8086 	bgt.w	8003fc8 <__kernel_rem_pio2+0x610>
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2d01      	cmp	r5, #1
 8003ec2:	f300 80a0 	bgt.w	8004006 <__kernel_rem_pio2+0x64e>
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003ecc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 809e 	bne.w	8004012 <__kernel_rem_pio2+0x65a>
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	e9c3 7800 	strd	r7, r8, [r3]
 8003edc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003ee0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003ee4:	e033      	b.n	8003f4e <__kernel_rem_pio2+0x596>
 8003ee6:	3408      	adds	r4, #8
 8003ee8:	ab4a      	add	r3, sp, #296	; 0x128
 8003eea:	441c      	add	r4, r3
 8003eec:	462e      	mov	r6, r5
 8003eee:	2000      	movs	r0, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	da3a      	bge.n	8003f6c <__kernel_rem_pio2+0x5b4>
 8003ef6:	9b02      	ldr	r3, [sp, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d03d      	beq.n	8003f78 <__kernel_rem_pio2+0x5c0>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f02:	9c01      	ldr	r4, [sp, #4]
 8003f04:	e9c4 2300 	strd	r2, r3, [r4]
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003f10:	f7fc f966 	bl	80001e0 <__aeabi_dsub>
 8003f14:	ae4c      	add	r6, sp, #304	; 0x130
 8003f16:	2401      	movs	r4, #1
 8003f18:	42a5      	cmp	r5, r4
 8003f1a:	da30      	bge.n	8003f7e <__kernel_rem_pio2+0x5c6>
 8003f1c:	9b02      	ldr	r3, [sp, #8]
 8003f1e:	b113      	cbz	r3, 8003f26 <__kernel_rem_pio2+0x56e>
 8003f20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f24:	4619      	mov	r1, r3
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003f2c:	e00f      	b.n	8003f4e <__kernel_rem_pio2+0x596>
 8003f2e:	ab9a      	add	r3, sp, #616	; 0x268
 8003f30:	441c      	add	r4, r3
 8003f32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003f36:	2000      	movs	r0, #0
 8003f38:	2100      	movs	r1, #0
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	da10      	bge.n	8003f60 <__kernel_rem_pio2+0x5a8>
 8003f3e:	9b02      	ldr	r3, [sp, #8]
 8003f40:	b113      	cbz	r3, 8003f48 <__kernel_rem_pio2+0x590>
 8003f42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f46:	4619      	mov	r1, r3
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	e9c3 0100 	strd	r0, r1, [r3]
 8003f4e:	9b06      	ldr	r3, [sp, #24]
 8003f50:	f003 0007 	and.w	r0, r3, #7
 8003f54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003f58:	ecbd 8b02 	vpop	{d8}
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f64:	f7fc f93e 	bl	80001e4 <__adddf3>
 8003f68:	3d01      	subs	r5, #1
 8003f6a:	e7e6      	b.n	8003f3a <__kernel_rem_pio2+0x582>
 8003f6c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f70:	f7fc f938 	bl	80001e4 <__adddf3>
 8003f74:	3e01      	subs	r6, #1
 8003f76:	e7bc      	b.n	8003ef2 <__kernel_rem_pio2+0x53a>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	e7c1      	b.n	8003f02 <__kernel_rem_pio2+0x54a>
 8003f7e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003f82:	f7fc f92f 	bl	80001e4 <__adddf3>
 8003f86:	3401      	adds	r4, #1
 8003f88:	e7c6      	b.n	8003f18 <__kernel_rem_pio2+0x560>
 8003f8a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8003f8e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003f92:	4640      	mov	r0, r8
 8003f94:	ec53 2b17 	vmov	r2, r3, d7
 8003f98:	4649      	mov	r1, r9
 8003f9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f9e:	f7fc f921 	bl	80001e4 <__adddf3>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460f      	mov	r7, r1
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc f917 	bl	80001e0 <__aeabi_dsub>
 8003fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fb6:	f7fc f915 	bl	80001e4 <__adddf3>
 8003fba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fbe:	e9ca 0100 	strd	r0, r1, [sl]
 8003fc2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8003fc6:	e770      	b.n	8003eaa <__kernel_rem_pio2+0x4f2>
 8003fc8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8003fcc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	ec53 2b17 	vmov	r2, r3, d7
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fdc:	f7fc f902 	bl	80001e4 <__adddf3>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	4689      	mov	r9, r1
 8003fe8:	4630      	mov	r0, r6
 8003fea:	4639      	mov	r1, r7
 8003fec:	f7fc f8f8 	bl	80001e0 <__aeabi_dsub>
 8003ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ff4:	f7fc f8f6 	bl	80001e4 <__adddf3>
 8003ff8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ffc:	e9ca 0100 	strd	r0, r1, [sl]
 8004000:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8004004:	e756      	b.n	8003eb4 <__kernel_rem_pio2+0x4fc>
 8004006:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800400a:	f7fc f8eb 	bl	80001e4 <__adddf3>
 800400e:	3d01      	subs	r5, #1
 8004010:	e756      	b.n	8003ec0 <__kernel_rem_pio2+0x508>
 8004012:	9b01      	ldr	r3, [sp, #4]
 8004014:	9a01      	ldr	r2, [sp, #4]
 8004016:	601f      	str	r7, [r3, #0]
 8004018:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800401c:	605c      	str	r4, [r3, #4]
 800401e:	609d      	str	r5, [r3, #8]
 8004020:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004024:	60d3      	str	r3, [r2, #12]
 8004026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800402a:	6110      	str	r0, [r2, #16]
 800402c:	6153      	str	r3, [r2, #20]
 800402e:	e78e      	b.n	8003f4e <__kernel_rem_pio2+0x596>
 8004030:	41700000 	.word	0x41700000
 8004034:	3e700000 	.word	0x3e700000

08004038 <__kernel_sin>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	ec55 4b10 	vmov	r4, r5, d0
 8004040:	b085      	sub	sp, #20
 8004042:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004046:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800404a:	ed8d 1b00 	vstr	d1, [sp]
 800404e:	9002      	str	r0, [sp, #8]
 8004050:	da06      	bge.n	8004060 <__kernel_sin+0x28>
 8004052:	ee10 0a10 	vmov	r0, s0
 8004056:	4629      	mov	r1, r5
 8004058:	f7fc fd14 	bl	8000a84 <__aeabi_d2iz>
 800405c:	2800      	cmp	r0, #0
 800405e:	d051      	beq.n	8004104 <__kernel_sin+0xcc>
 8004060:	4622      	mov	r2, r4
 8004062:	462b      	mov	r3, r5
 8004064:	4620      	mov	r0, r4
 8004066:	4629      	mov	r1, r5
 8004068:	f7fc fa72 	bl	8000550 <__aeabi_dmul>
 800406c:	4682      	mov	sl, r0
 800406e:	468b      	mov	fp, r1
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4620      	mov	r0, r4
 8004076:	4629      	mov	r1, r5
 8004078:	f7fc fa6a 	bl	8000550 <__aeabi_dmul>
 800407c:	a341      	add	r3, pc, #260	; (adr r3, 8004184 <__kernel_sin+0x14c>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	4680      	mov	r8, r0
 8004084:	4689      	mov	r9, r1
 8004086:	4650      	mov	r0, sl
 8004088:	4659      	mov	r1, fp
 800408a:	f7fc fa61 	bl	8000550 <__aeabi_dmul>
 800408e:	a33f      	add	r3, pc, #252	; (adr r3, 800418c <__kernel_sin+0x154>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc f8a4 	bl	80001e0 <__aeabi_dsub>
 8004098:	4652      	mov	r2, sl
 800409a:	465b      	mov	r3, fp
 800409c:	f7fc fa58 	bl	8000550 <__aeabi_dmul>
 80040a0:	a33c      	add	r3, pc, #240	; (adr r3, 8004194 <__kernel_sin+0x15c>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc f89d 	bl	80001e4 <__adddf3>
 80040aa:	4652      	mov	r2, sl
 80040ac:	465b      	mov	r3, fp
 80040ae:	f7fc fa4f 	bl	8000550 <__aeabi_dmul>
 80040b2:	a33a      	add	r3, pc, #232	; (adr r3, 800419c <__kernel_sin+0x164>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f7fc f892 	bl	80001e0 <__aeabi_dsub>
 80040bc:	4652      	mov	r2, sl
 80040be:	465b      	mov	r3, fp
 80040c0:	f7fc fa46 	bl	8000550 <__aeabi_dmul>
 80040c4:	a337      	add	r3, pc, #220	; (adr r3, 80041a4 <__kernel_sin+0x16c>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	f7fc f88b 	bl	80001e4 <__adddf3>
 80040ce:	9b02      	ldr	r3, [sp, #8]
 80040d0:	4606      	mov	r6, r0
 80040d2:	460f      	mov	r7, r1
 80040d4:	b9db      	cbnz	r3, 800410e <__kernel_sin+0xd6>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4650      	mov	r0, sl
 80040dc:	4659      	mov	r1, fp
 80040de:	f7fc fa37 	bl	8000550 <__aeabi_dmul>
 80040e2:	a325      	add	r3, pc, #148	; (adr r3, 8004178 <__kernel_sin+0x140>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f7fc f87a 	bl	80001e0 <__aeabi_dsub>
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	f7fc fa2e 	bl	8000550 <__aeabi_dmul>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4620      	mov	r0, r4
 80040fa:	4629      	mov	r1, r5
 80040fc:	f7fc f872 	bl	80001e4 <__adddf3>
 8004100:	4604      	mov	r4, r0
 8004102:	460d      	mov	r5, r1
 8004104:	ec45 4b10 	vmov	d0, r4, r5
 8004108:	b005      	add	sp, #20
 800410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410e:	2200      	movs	r2, #0
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <__kernel_sin+0x148>)
 8004112:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004116:	f7fc fa1b 	bl	8000550 <__aeabi_dmul>
 800411a:	4632      	mov	r2, r6
 800411c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004120:	463b      	mov	r3, r7
 8004122:	4640      	mov	r0, r8
 8004124:	4649      	mov	r1, r9
 8004126:	f7fc fa13 	bl	8000550 <__aeabi_dmul>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004132:	f7fc f855 	bl	80001e0 <__aeabi_dsub>
 8004136:	4652      	mov	r2, sl
 8004138:	465b      	mov	r3, fp
 800413a:	f7fc fa09 	bl	8000550 <__aeabi_dmul>
 800413e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004142:	f7fc f84d 	bl	80001e0 <__aeabi_dsub>
 8004146:	a30c      	add	r3, pc, #48	; (adr r3, 8004178 <__kernel_sin+0x140>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	4606      	mov	r6, r0
 800414e:	460f      	mov	r7, r1
 8004150:	4640      	mov	r0, r8
 8004152:	4649      	mov	r1, r9
 8004154:	f7fc f9fc 	bl	8000550 <__aeabi_dmul>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4630      	mov	r0, r6
 800415e:	4639      	mov	r1, r7
 8004160:	f7fc f840 	bl	80001e4 <__adddf3>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fc f838 	bl	80001e0 <__aeabi_dsub>
 8004170:	e7c6      	b.n	8004100 <__kernel_sin+0xc8>
 8004172:	bf00      	nop
 8004174:	f3af 8000 	nop.w
 8004178:	55555549 	.word	0x55555549
 800417c:	3fc55555 	.word	0x3fc55555
 8004180:	3fe00000 	.word	0x3fe00000
 8004184:	5acfd57c 	.word	0x5acfd57c
 8004188:	3de5d93a 	.word	0x3de5d93a
 800418c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004190:	3e5ae5e6 	.word	0x3e5ae5e6
 8004194:	57b1fe7d 	.word	0x57b1fe7d
 8004198:	3ec71de3 	.word	0x3ec71de3
 800419c:	19c161d5 	.word	0x19c161d5
 80041a0:	3f2a01a0 	.word	0x3f2a01a0
 80041a4:	1110f8a6 	.word	0x1110f8a6
 80041a8:	3f811111 	.word	0x3f811111

080041ac <fabs>:
 80041ac:	ec51 0b10 	vmov	r0, r1, d0
 80041b0:	ee10 2a10 	vmov	r2, s0
 80041b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80041b8:	ec43 2b10 	vmov	d0, r2, r3
 80041bc:	4770      	bx	lr
	...

080041c0 <floor>:
 80041c0:	ec51 0b10 	vmov	r0, r1, d0
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80041cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80041d0:	2e13      	cmp	r6, #19
 80041d2:	460c      	mov	r4, r1
 80041d4:	ee10 5a10 	vmov	r5, s0
 80041d8:	4680      	mov	r8, r0
 80041da:	dc34      	bgt.n	8004246 <floor+0x86>
 80041dc:	2e00      	cmp	r6, #0
 80041de:	da16      	bge.n	800420e <floor+0x4e>
 80041e0:	a335      	add	r3, pc, #212	; (adr r3, 80042b8 <floor+0xf8>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f7fb fffd 	bl	80001e4 <__adddf3>
 80041ea:	2200      	movs	r2, #0
 80041ec:	2300      	movs	r3, #0
 80041ee:	f7fc fc3f 	bl	8000a70 <__aeabi_dcmpgt>
 80041f2:	b148      	cbz	r0, 8004208 <floor+0x48>
 80041f4:	2c00      	cmp	r4, #0
 80041f6:	da59      	bge.n	80042ac <floor+0xec>
 80041f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80041fc:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <floor+0x100>)
 80041fe:	432b      	orrs	r3, r5
 8004200:	2500      	movs	r5, #0
 8004202:	42ab      	cmp	r3, r5
 8004204:	bf18      	it	ne
 8004206:	4614      	movne	r4, r2
 8004208:	4621      	mov	r1, r4
 800420a:	4628      	mov	r0, r5
 800420c:	e025      	b.n	800425a <floor+0x9a>
 800420e:	4f2d      	ldr	r7, [pc, #180]	; (80042c4 <floor+0x104>)
 8004210:	4137      	asrs	r7, r6
 8004212:	ea01 0307 	and.w	r3, r1, r7
 8004216:	4303      	orrs	r3, r0
 8004218:	d01f      	beq.n	800425a <floor+0x9a>
 800421a:	a327      	add	r3, pc, #156	; (adr r3, 80042b8 <floor+0xf8>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f7fb ffe0 	bl	80001e4 <__adddf3>
 8004224:	2200      	movs	r2, #0
 8004226:	2300      	movs	r3, #0
 8004228:	f7fc fc22 	bl	8000a70 <__aeabi_dcmpgt>
 800422c:	2800      	cmp	r0, #0
 800422e:	d0eb      	beq.n	8004208 <floor+0x48>
 8004230:	2c00      	cmp	r4, #0
 8004232:	bfbe      	ittt	lt
 8004234:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004238:	fa43 f606 	asrlt.w	r6, r3, r6
 800423c:	19a4      	addlt	r4, r4, r6
 800423e:	ea24 0407 	bic.w	r4, r4, r7
 8004242:	2500      	movs	r5, #0
 8004244:	e7e0      	b.n	8004208 <floor+0x48>
 8004246:	2e33      	cmp	r6, #51	; 0x33
 8004248:	dd0b      	ble.n	8004262 <floor+0xa2>
 800424a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800424e:	d104      	bne.n	800425a <floor+0x9a>
 8004250:	ee10 2a10 	vmov	r2, s0
 8004254:	460b      	mov	r3, r1
 8004256:	f7fb ffc5 	bl	80001e4 <__adddf3>
 800425a:	ec41 0b10 	vmov	d0, r0, r1
 800425e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004262:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	fa23 f707 	lsr.w	r7, r3, r7
 800426e:	4207      	tst	r7, r0
 8004270:	d0f3      	beq.n	800425a <floor+0x9a>
 8004272:	a311      	add	r3, pc, #68	; (adr r3, 80042b8 <floor+0xf8>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fb ffb4 	bl	80001e4 <__adddf3>
 800427c:	2200      	movs	r2, #0
 800427e:	2300      	movs	r3, #0
 8004280:	f7fc fbf6 	bl	8000a70 <__aeabi_dcmpgt>
 8004284:	2800      	cmp	r0, #0
 8004286:	d0bf      	beq.n	8004208 <floor+0x48>
 8004288:	2c00      	cmp	r4, #0
 800428a:	da02      	bge.n	8004292 <floor+0xd2>
 800428c:	2e14      	cmp	r6, #20
 800428e:	d103      	bne.n	8004298 <floor+0xd8>
 8004290:	3401      	adds	r4, #1
 8004292:	ea25 0507 	bic.w	r5, r5, r7
 8004296:	e7b7      	b.n	8004208 <floor+0x48>
 8004298:	2301      	movs	r3, #1
 800429a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800429e:	fa03 f606 	lsl.w	r6, r3, r6
 80042a2:	4435      	add	r5, r6
 80042a4:	4545      	cmp	r5, r8
 80042a6:	bf38      	it	cc
 80042a8:	18e4      	addcc	r4, r4, r3
 80042aa:	e7f2      	b.n	8004292 <floor+0xd2>
 80042ac:	2500      	movs	r5, #0
 80042ae:	462c      	mov	r4, r5
 80042b0:	e7aa      	b.n	8004208 <floor+0x48>
 80042b2:	bf00      	nop
 80042b4:	f3af 8000 	nop.w
 80042b8:	8800759c 	.word	0x8800759c
 80042bc:	7e37e43c 	.word	0x7e37e43c
 80042c0:	bff00000 	.word	0xbff00000
 80042c4:	000fffff 	.word	0x000fffff

080042c8 <scalbn>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	ec55 4b10 	vmov	r4, r5, d0
 80042ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80042d2:	4606      	mov	r6, r0
 80042d4:	462b      	mov	r3, r5
 80042d6:	b9aa      	cbnz	r2, 8004304 <scalbn+0x3c>
 80042d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80042dc:	4323      	orrs	r3, r4
 80042de:	d03b      	beq.n	8004358 <scalbn+0x90>
 80042e0:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <scalbn+0xe0>)
 80042e2:	4629      	mov	r1, r5
 80042e4:	2200      	movs	r2, #0
 80042e6:	ee10 0a10 	vmov	r0, s0
 80042ea:	f7fc f931 	bl	8000550 <__aeabi_dmul>
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <scalbn+0xe4>)
 80042f0:	429e      	cmp	r6, r3
 80042f2:	4604      	mov	r4, r0
 80042f4:	460d      	mov	r5, r1
 80042f6:	da12      	bge.n	800431e <scalbn+0x56>
 80042f8:	a327      	add	r3, pc, #156	; (adr r3, 8004398 <scalbn+0xd0>)
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f7fc f927 	bl	8000550 <__aeabi_dmul>
 8004302:	e009      	b.n	8004318 <scalbn+0x50>
 8004304:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004308:	428a      	cmp	r2, r1
 800430a:	d10c      	bne.n	8004326 <scalbn+0x5e>
 800430c:	ee10 2a10 	vmov	r2, s0
 8004310:	4620      	mov	r0, r4
 8004312:	4629      	mov	r1, r5
 8004314:	f7fb ff66 	bl	80001e4 <__adddf3>
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	e01c      	b.n	8004358 <scalbn+0x90>
 800431e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004322:	460b      	mov	r3, r1
 8004324:	3a36      	subs	r2, #54	; 0x36
 8004326:	4432      	add	r2, r6
 8004328:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800432c:	428a      	cmp	r2, r1
 800432e:	dd0b      	ble.n	8004348 <scalbn+0x80>
 8004330:	ec45 4b11 	vmov	d1, r4, r5
 8004334:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80043a0 <scalbn+0xd8>
 8004338:	f000 f83c 	bl	80043b4 <copysign>
 800433c:	a318      	add	r3, pc, #96	; (adr r3, 80043a0 <scalbn+0xd8>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	ec51 0b10 	vmov	r0, r1, d0
 8004346:	e7da      	b.n	80042fe <scalbn+0x36>
 8004348:	2a00      	cmp	r2, #0
 800434a:	dd08      	ble.n	800435e <scalbn+0x96>
 800434c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004358:	ec45 4b10 	vmov	d0, r4, r5
 800435c:	bd70      	pop	{r4, r5, r6, pc}
 800435e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004362:	da0d      	bge.n	8004380 <scalbn+0xb8>
 8004364:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004368:	429e      	cmp	r6, r3
 800436a:	ec45 4b11 	vmov	d1, r4, r5
 800436e:	dce1      	bgt.n	8004334 <scalbn+0x6c>
 8004370:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004398 <scalbn+0xd0>
 8004374:	f000 f81e 	bl	80043b4 <copysign>
 8004378:	a307      	add	r3, pc, #28	; (adr r3, 8004398 <scalbn+0xd0>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	e7e0      	b.n	8004342 <scalbn+0x7a>
 8004380:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004384:	3236      	adds	r2, #54	; 0x36
 8004386:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800438a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	2200      	movs	r2, #0
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <scalbn+0xe8>)
 8004396:	e7b2      	b.n	80042fe <scalbn+0x36>
 8004398:	c2f8f359 	.word	0xc2f8f359
 800439c:	01a56e1f 	.word	0x01a56e1f
 80043a0:	8800759c 	.word	0x8800759c
 80043a4:	7e37e43c 	.word	0x7e37e43c
 80043a8:	43500000 	.word	0x43500000
 80043ac:	ffff3cb0 	.word	0xffff3cb0
 80043b0:	3c900000 	.word	0x3c900000

080043b4 <copysign>:
 80043b4:	ec51 0b10 	vmov	r0, r1, d0
 80043b8:	ee11 0a90 	vmov	r0, s3
 80043bc:	ee10 2a10 	vmov	r2, s0
 80043c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80043c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80043c8:	ea41 0300 	orr.w	r3, r1, r0
 80043cc:	ec43 2b10 	vmov	d0, r2, r3
 80043d0:	4770      	bx	lr
	...

080043d4 <_init>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr

080043e0 <_fini>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr
