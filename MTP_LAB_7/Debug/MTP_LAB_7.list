
MTP_LAB_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000425c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080043f8  080043f8  000143f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004608  08004608  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004608  08004608  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  0800461c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800461c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d59  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001540  00000000  00000000  00027d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  000292d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  000299c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b89  00000000  00000000  00029ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006694  00000000  00000000  0004bb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc37a  00000000  00000000  0005220d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f1c  00000000  00000000  0011e604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043dc 	.word	0x080043dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080043dc 	.word	0x080043dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_DAC_EnableDMAReq>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableDMAReq(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	601a      	str	r2, [r3, #0]
          DAC_CR_DMAEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2104      	movs	r1, #4
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LL_DMA_EnableChannel+0x3c>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <LL_DMA_EnableChannel+0x3c>)
 8000ccc:	5c8a      	ldrb	r2, [r1, r2]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	440a      	add	r2, r1
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	080043f8 	.word	0x080043f8

08000cec <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LL_DMA_SetDataTransferDirection+0x48>)
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d0c:	f023 0310 	bic.w	r3, r3, #16
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	3a01      	subs	r2, #1
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <LL_DMA_SetDataTransferDirection+0x48>)
 8000d16:	5c8a      	ldrb	r2, [r1, r2]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	440a      	add	r2, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	080043f8 	.word	0x080043f8

08000d38 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <LL_DMA_SetMode+0x44>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 0220 	bic.w	r2, r3, #32
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <LL_DMA_SetMode+0x44>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	4619      	mov	r1, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	440b      	add	r3, r1
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	080043f8 	.word	0x080043f8

08000d80 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	461a      	mov	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000da6:	5ccb      	ldrb	r3, [r1, r3]
 8000da8:	4619      	mov	r1, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	440b      	add	r3, r1
 8000dae:	4619      	mov	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	080043f8 	.word	0x080043f8

08000dc8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <LL_DMA_SetMemoryIncMode+0x44>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <LL_DMA_SetMemoryIncMode+0x44>)
 8000dee:	5ccb      	ldrb	r3, [r1, r3]
 8000df0:	4619      	mov	r1, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	440b      	add	r3, r1
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	080043f8 	.word	0x080043f8

08000e10 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <LL_DMA_SetPeriphSize+0x44>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	461a      	mov	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <LL_DMA_SetPeriphSize+0x44>)
 8000e36:	5ccb      	ldrb	r3, [r1, r3]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	4619      	mov	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	080043f8 	.word	0x080043f8

08000e58 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <LL_DMA_SetMemorySize+0x44>)
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <LL_DMA_SetMemorySize+0x44>)
 8000e7e:	5ccb      	ldrb	r3, [r1, r3]
 8000e80:	4619      	mov	r1, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	440b      	add	r3, r1
 8000e86:	4619      	mov	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	080043f8 	.word	0x080043f8

08000ea0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	440b      	add	r3, r1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	080043f8 	.word	0x080043f8

08000ee8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <LL_DMA_SetDataLength+0x44>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	0c1b      	lsrs	r3, r3, #16
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <LL_DMA_SetDataLength+0x44>)
 8000f0e:	5c8a      	ldrb	r2, [r1, r2]
 8000f10:	4611      	mov	r1, r2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	440a      	add	r2, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	080043f8 	.word	0x080043f8

08000f30 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <LL_DMA_SetMemoryAddress+0x2c>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	080043f8 	.word	0x080043f8

08000f60 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <LL_DMA_SetPeriphAddress+0x2c>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6093      	str	r3, [r2, #8]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	080043f8 	.word	0x080043f8

08000f90 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f06f 0201 	mvn.w	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60da      	str	r2, [r3, #12]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4013      	ands	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000

08001084 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800108e:	69da      	ldr	r2, [r3, #28]
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000

080010b4 <LL_SYSCFG_SetRemapDMA_DAC>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_DAC(uint32_t Remap)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010d2:	4904      	ldr	r1, [pc, #16]	; (80010e4 <LL_SYSCFG_SetRemapDMA_DAC+0x30>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40010000 	.word	0x40010000

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  for (uint16_t i = 0; i < 256; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	e03b      	b.n	800116c <main+0x84>
	  ubSinValues[i] = (uint8_t)((sin(M_PI*2.0*(double)i/256.0) + 1.0)*(255.0/2.0));
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f9b0 	bl	800045c <__aeabi_ui2d>
 80010fc:	a340      	add	r3, pc, #256	; (adr r3, 8001200 <main+0x118>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff fa25 	bl	8000550 <__aeabi_dmul>
 8001106:	4603      	mov	r3, r0
 8001108:	460c      	mov	r4, r1
 800110a:	4618      	mov	r0, r3
 800110c:	4621      	mov	r1, r4
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <main+0xf8>)
 8001114:	f7ff fb46 	bl	80007a4 <__aeabi_ddiv>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	ec44 3b17 	vmov	d7, r3, r4
 8001120:	eeb0 0a47 	vmov.f32	s0, s14
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	f002 f946 	bl	80033b8 <sin>
 800112c:	ec51 0b10 	vmov	r0, r1, d0
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <main+0xfc>)
 8001136:	f7ff f855 	bl	80001e4 <__adddf3>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	a325      	add	r3, pc, #148	; (adr r3, 80011d8 <main+0xf0>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa02 	bl	8000550 <__aeabi_dmul>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	461a      	mov	r2, r3
 8001152:	4623      	mov	r3, r4
 8001154:	88fc      	ldrh	r4, [r7, #6]
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fcbb 	bl	8000ad4 <__aeabi_d2uiz>
 800115e:	4603      	mov	r3, r0
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <main+0x100>)
 8001164:	551a      	strb	r2, [r3, r4]
  for (uint16_t i = 0; i < 256; i++) {
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	3301      	adds	r3, #1
 800116a:	80fb      	strh	r3, [r7, #6]
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	2bff      	cmp	r3, #255	; 0xff
 8001170:	d9c0      	bls.n	80010f4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f000 fa53 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001176:	f000 f847 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117a:	f000 f953 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 800117e:	f000 f939 	bl	80013f4 <MX_DMA_Init>
  MX_DAC1_Init();
 8001182:	f000 f885 	bl	8001290 <MX_DAC1_Init>
  MX_TIM6_Init();
 8001186:	f000 f8fd 	bl	8001384 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)ubSinValues);
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0x100>)
 800118c:	461a      	mov	r2, r3
 800118e:	2103      	movs	r1, #3
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <main+0x104>)
 8001192:	f7ff fecd 	bl	8000f30 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 256);
 8001196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119a:	2103      	movs	r1, #3
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <main+0x104>)
 800119e:	f7ff fea3 	bl	8000ee8 <LL_DMA_SetDataLength>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&DAC1->DHR8R1);
 80011a2:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <main+0x108>)
 80011a4:	2103      	movs	r1, #3
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <main+0x104>)
 80011a8:	f7ff feda 	bl	8000f60 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 80011ac:	2103      	movs	r1, #3
 80011ae:	480f      	ldr	r0, [pc, #60]	; (80011ec <main+0x104>)
 80011b0:	f7ff fd7c 	bl	8000cac <LL_DMA_EnableChannel>

  LL_DAC_EnableDMAReq(DAC1, LL_DAC_CHANNEL_1);
 80011b4:	490f      	ldr	r1, [pc, #60]	; (80011f4 <main+0x10c>)
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <main+0x110>)
 80011b8:	f7ff fd35 	bl	8000c26 <LL_DAC_EnableDMAReq>

  LL_TIM_ClearFlag_UPDATE(TIM6);
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <main+0x114>)
 80011be:	f7ff ff2a 	bl	8001016 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM6);
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <main+0x114>)
 80011c4:	f7ff ff35 	bl	8001032 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <main+0x114>)
 80011ca:	f7ff fee1 	bl	8000f90 <LL_TIM_EnableCounter>

  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 80011ce:	4909      	ldr	r1, [pc, #36]	; (80011f4 <main+0x10c>)
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <main+0x110>)
 80011d2:	f7ff fd3f 	bl	8000c54 <LL_DAC_Enable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <main+0xee>
 80011d8:	00000000 	.word	0x00000000
 80011dc:	405fe000 	.word	0x405fe000
 80011e0:	40700000 	.word	0x40700000
 80011e4:	3ff00000 	.word	0x3ff00000
 80011e8:	2000002c 	.word	0x2000002c
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40007410 	.word	0x40007410
 80011f4:	02100001 	.word	0x02100001
 80011f8:	40007400 	.word	0x40007400
 80011fc:	40001000 	.word	0x40001000
 8001200:	54442d18 	.word	0x54442d18
 8001204:	401921fb 	.word	0x401921fb

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b090      	sub	sp, #64	; 0x40
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2228      	movs	r2, #40	; 0x28
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f002 f8c6 	bl	80033a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	2301      	movs	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001232:	2310      	movs	r3, #16
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001236:	2302      	movs	r3, #2
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001240:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fcd2 	bl	8001bf8 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800125a:	f000 f921 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2102      	movs	r1, #2
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fbd3 	bl	8002a24 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001284:	f000 f90c 	bl	80014a0 <Error_Handler>
  }
}
 8001288:	bf00      	nop
 800128a:	3740      	adds	r7, #64	; 0x40
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 80012b4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80012b8:	f7ff fee4 	bl	8001084 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012c0:	f7ff fec8 	bl	8001054 <LL_AHB1_GRP1_EnableClock>
  /**DAC1 GPIO Configuration  
  PA4   ------> DAC1_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80012c4:	2310      	movs	r3, #16
 80012c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f001 feff 	bl	80030da <LL_GPIO_Init>

  /* DAC1 DMA Init */
  
  /* DAC1_CH1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80012dc:	2210      	movs	r2, #16
 80012de:	2103      	movs	r1, #3
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <MX_DAC1_Init+0xe4>)
 80012e2:	f7ff fd03 	bl	8000cec <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2103      	movs	r1, #3
 80012ea:	4822      	ldr	r0, [pc, #136]	; (8001374 <MX_DAC1_Init+0xe4>)
 80012ec:	f7ff fdd8 	bl	8000ea0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 80012f0:	2220      	movs	r2, #32
 80012f2:	2103      	movs	r1, #3
 80012f4:	481f      	ldr	r0, [pc, #124]	; (8001374 <MX_DAC1_Init+0xe4>)
 80012f6:	f7ff fd1f 	bl	8000d38 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2103      	movs	r1, #3
 80012fe:	481d      	ldr	r0, [pc, #116]	; (8001374 <MX_DAC1_Init+0xe4>)
 8001300:	f7ff fd3e 	bl	8000d80 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	2103      	movs	r1, #3
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <MX_DAC1_Init+0xe4>)
 800130a:	f7ff fd5d 	bl	8000dc8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800130e:	2200      	movs	r2, #0
 8001310:	2103      	movs	r1, #3
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <MX_DAC1_Init+0xe4>)
 8001314:	f7ff fd7c 	bl	8000e10 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8001318:	2200      	movs	r2, #0
 800131a:	2103      	movs	r1, #3
 800131c:	4815      	ldr	r0, [pc, #84]	; (8001374 <MX_DAC1_Init+0xe4>)
 800131e:	f7ff fd9b 	bl	8000e58 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_DAC(LL_SYSCFG_DAC1_CH1_RMP_DMA1_CH3);
 8001322:	4815      	ldr	r0, [pc, #84]	; (8001378 <MX_DAC1_Init+0xe8>)
 8001324:	f7ff fec6 	bl	80010b4 <LL_SYSCFG_SetRemapDMA_DAC>

  /* DAC1 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8001328:	f7ff fbf4 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 800132c:	4603      	mov	r3, r0
 800132e:	2200      	movs	r2, #0
 8001330:	2104      	movs	r1, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fc44 	bl	8000bc0 <NVIC_EncodePriority>
 8001338:	4603      	mov	r3, r0
 800133a:	4619      	mov	r1, r3
 800133c:	2036      	movs	r0, #54	; 0x36
 800133e:	f7ff fc15 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001342:	2036      	movs	r0, #54	; 0x36
 8001344:	f7ff fbf4 	bl	8000b30 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM6_TRGO;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	461a      	mov	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <MX_DAC1_Init+0xec>)
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <MX_DAC1_Init+0xf0>)
 800135e:	f001 fd66 	bl	8002e2e <LL_DAC_Init>
  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8001362:	4906      	ldr	r1, [pc, #24]	; (800137c <MX_DAC1_Init+0xec>)
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_DAC1_Init+0xf0>)
 8001366:	f7ff fc8b 	bl	8000c80 <LL_DAC_EnableTrigger>
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000
 8001378:	00202000 	.word	0x00202000
 800137c:	02100001 	.word	0x02100001
 8001380:	40007400 	.word	0x40007400

08001384 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001398:	2010      	movs	r0, #16
 800139a:	f7ff fe73 	bl	8001084 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800139e:	f7ff fbb9 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2200      	movs	r2, #0
 80013a6:	2104      	movs	r1, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fc09 	bl	8000bc0 <NVIC_EncodePriority>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	2036      	movs	r0, #54	; 0x36
 80013b4:	f7ff fbda 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b8:	2036      	movs	r0, #54	; 0x36
 80013ba:	f7ff fbb9 	bl	8000b30 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 80013c6:	2331      	movs	r3, #49	; 0x31
 80013c8:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_TIM6_Init+0x6c>)
 80013d0:	f001 ff2e 	bl	8003230 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_TIM6_Init+0x6c>)
 80013d6:	f7ff fdeb 	bl	8000fb0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_UPDATE);
 80013da:	2120      	movs	r1, #32
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_TIM6_Init+0x6c>)
 80013de:	f7ff fdf7 	bl	8000fd0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MX_TIM6_Init+0x6c>)
 80013e4:	f7ff fe07 	bl	8000ff6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40001000 	.word	0x40001000

080013f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fe2b 	bl	8001054 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013fe:	f7ff fb89 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8001402:	4603      	mov	r3, r0
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fbd9 	bl	8000bc0 <NVIC_EncodePriority>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	200d      	movs	r0, #13
 8001414:	f7ff fbaa 	bl	8000b6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001418:	200d      	movs	r0, #13
 800141a:	f7ff fb89 	bl	8000b30 <__NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_GPIO_Init+0x74>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <MX_GPIO_Init+0x74>)
 8001440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_GPIO_Init+0x74>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_GPIO_Init+0x74>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <MX_GPIO_Init+0x74>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_GPIO_Init+0x74>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2101      	movs	r1, #1
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <MX_GPIO_Init+0x78>)
 8001470:	f000 fbaa 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001474:	2301      	movs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_GPIO_Init+0x78>)
 800148c:	f000 fa12 	bl	80018b4 <HAL_GPIO_Init>

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	48000800 	.word	0x48000800

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_MspInit+0x44>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_MspInit+0x44>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_MspInit+0x44>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_MspInit+0x44>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x44>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x44>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000

080014f8 <LL_TIM_ClearFlag_UPDATE>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f06f 0201 	mvn.w	r2, #1
 8001506:	611a      	str	r2, [r3, #16]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001568:	f000 f89e 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  LL_TIM_ClearFlag_UPDATE(TIM6);
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <TIM6_DAC_IRQHandler+0x1c>)
 8001586:	f7ff ffb7 	bl	80014f8 <LL_TIM_ClearFlag_UPDATE>
  GPIOC->ODR	^= LL_GPIO_PIN_0;
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <TIM6_DAC_IRQHandler+0x20>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <TIM6_DAC_IRQHandler+0x20>)
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM6_DAC_IRQn 0 */
  
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40001000 	.word	0x40001000
 80015a0:	48000800 	.word	0x48000800

080015a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015f2:	f7ff ffd7 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f001 feb3 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015fa:	f7ff fd75 	bl	80010e8 <main>

080015fe <LoopForever>:

LoopForever:
    b LoopForever
 80015fe:	e7fe      	b.n	80015fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001600:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800160c:	08004610 	.word	0x08004610
  ldr r2, =_sbss
 8001610:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001614:	20000130 	.word	0x20000130

08001618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC1_2_IRQHandler>
	...

0800161c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x28>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x28>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f90d 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff ff3a 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f917 	bl	800189a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f8ed 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	2000012c 	.word	0x2000012c

080016d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2000012c 	.word	0x2000012c

080016e8 <__NVIC_SetPriorityGrouping>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_SetPriority>:
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff47 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff5c 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffb0 	bl	8001808 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e160      	b.n	8001b86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8152 	beq.w	8001b80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d00b      	beq.n	80018fc <HAL_GPIO_Init+0x48>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f0:	2b11      	cmp	r3, #17
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b12      	cmp	r3, #18
 80018fa:	d130      	bne.n	800195e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001932:	2201      	movs	r2, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 0201 	and.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0xea>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b12      	cmp	r3, #18
 800199c:	d123      	bne.n	80019e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0203 	and.w	r2, r3, #3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80ac 	beq.w	8001b80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	4b5e      	ldr	r3, [pc, #376]	; (8001ba4 <HAL_GPIO_Init+0x2f0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ba4 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <HAL_GPIO_Init+0x2f0>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a40:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <HAL_GPIO_Init+0x2f4>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6a:	d025      	beq.n	8001ab8 <HAL_GPIO_Init+0x204>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a4f      	ldr	r2, [pc, #316]	; (8001bac <HAL_GPIO_Init+0x2f8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d01f      	beq.n	8001ab4 <HAL_GPIO_Init+0x200>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a4e      	ldr	r2, [pc, #312]	; (8001bb0 <HAL_GPIO_Init+0x2fc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d019      	beq.n	8001ab0 <HAL_GPIO_Init+0x1fc>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4d      	ldr	r2, [pc, #308]	; (8001bb4 <HAL_GPIO_Init+0x300>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x1f8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <HAL_GPIO_Init+0x304>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1f4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a4b      	ldr	r2, [pc, #300]	; (8001bbc <HAL_GPIO_Init+0x308>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1f0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_GPIO_Init+0x30c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1ec>
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	e00c      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	e00a      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	e008      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001aac:	2303      	movs	r3, #3
 8001aae:	e004      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_GPIO_Init+0x206>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	f002 0203 	and.w	r2, r2, #3
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4093      	lsls	r3, r2
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aca:	4937      	ldr	r1, [pc, #220]	; (8001ba8 <HAL_GPIO_Init+0x2f4>)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad8:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b26:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_GPIO_Init+0x310>)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3301      	adds	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f47f ae97 	bne.w	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	48000800 	.word	0x48000800
 8001bb4:	48000c00 	.word	0x48000c00
 8001bb8:	48001000 	.word	0x48001000
 8001bbc:	48001400 	.word	0x48001400
 8001bc0:	48001800 	.word	0x48001800
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f000 bf01 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8160 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c22:	4bae      	ldr	r3, [pc, #696]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d00c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c2e:	4bab      	ldr	r3, [pc, #684]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d159      	bne.n	8001cee <HAL_RCC_OscConfig+0xf6>
 8001c3a:	4ba8      	ldr	r3, [pc, #672]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d152      	bne.n	8001cee <HAL_RCC_OscConfig+0xf6>
 8001c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_OscConfig+0x82>
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0xae>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001caa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001cae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001cba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8102 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x2e8>
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 80fc 	bne.w	8001ee0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f000 be93 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x110>
 8001cfa:	4b78      	ldr	r3, [pc, #480]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a77      	ldr	r2, [pc, #476]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e030      	b.n	8001d6a <HAL_RCC_OscConfig+0x172>
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x134>
 8001d12:	4b72      	ldr	r3, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a71      	ldr	r2, [pc, #452]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01e      	b.n	8001d6a <HAL_RCC_OscConfig+0x172>
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x15a>
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a67      	ldr	r2, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a64      	ldr	r2, [pc, #400]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e00b      	b.n	8001d6a <HAL_RCC_OscConfig+0x172>
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a61      	ldr	r2, [pc, #388]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5e      	ldr	r2, [pc, #376]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d059      	beq.n	8001e28 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcac 	bl	80016d0 <HAL_GetTick>
 8001d78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7e:	f7ff fca7 	bl	80016d0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d902      	bls.n	8001d94 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	f000 be40 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>
 8001d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d98:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001da8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1ce>
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e015      	b.n	8001df2 <HAL_RCC_OscConfig+0x1fa>
 8001dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001de2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001dfa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001dfe:	fa92 f2a2 	rbit	r2, r2
 8001e02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001e06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e0a:	fab2 f282 	clz	r2, r2
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f042 0220 	orr.w	r2, r2, #32
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f002 021f 	and.w	r2, r2, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ab      	beq.n	8001d7e <HAL_RCC_OscConfig+0x186>
 8001e26:	e05c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fc52 	bl	80016d0 <HAL_GetTick>
 8001e2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e32:	f7ff fc4d 	bl	80016d0 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d902      	bls.n	8001e48 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	f000 bde6 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001e5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0x282>
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2ae>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_RCC_OscConfig+0x2e4>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eaa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001eae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001eb2:	fa92 f2a2 	rbit	r2, r2
 8001eb6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001eba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ab      	bne.n	8001e32 <HAL_RCC_OscConfig+0x23a>
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2ea>
 8001edc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8170 	beq.w	80021d2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef2:	4bd0      	ldr	r3, [pc, #832]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001efe:	4bcd      	ldr	r3, [pc, #820]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d16d      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3ee>
 8001f0a:	4bca      	ldr	r3, [pc, #808]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f16:	d166      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3ee>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001f2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_OscConfig+0x350>
 8001f42:	4bbc      	ldr	r3, [pc, #752]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	e013      	b.n	8001f70 <HAL_RCC_OscConfig+0x378>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f60:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f6c:	4bb1      	ldr	r3, [pc, #708]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2202      	movs	r2, #2
 8001f72:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f76:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f7a:	fa92 f2a2 	rbit	r2, r2
 8001f7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3ba>
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d002      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f000 bd31 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4ba0      	ldr	r3, [pc, #640]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	21f8      	movs	r1, #248	; 0xf8
 8001fc2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001fca:	fa91 f1a1 	rbit	r1, r1
 8001fce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001fd2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fd6:	fab1 f181 	clz	r1, r1
 8001fda:	b2c9      	uxtb	r1, r1
 8001fdc:	408b      	lsls	r3, r1
 8001fde:	4995      	ldr	r1, [pc, #596]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe4:	e0f5      	b.n	80021d2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8085 	beq.w	80020fc <HAL_RCC_OscConfig+0x504>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002004:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002012:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	461a      	mov	r2, r3
 800201a:	2301      	movs	r3, #1
 800201c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff fb57 	bl	80016d0 <HAL_GetTick>
 8002022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff fb52 	bl	80016d0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d902      	bls.n	800203e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	f000 bceb 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002050:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x476>
 8002068:	4b72      	ldr	r3, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	e013      	b.n	8002096 <HAL_RCC_OscConfig+0x49e>
 800206e:	2302      	movs	r3, #2
 8002070:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002086:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002092:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2202      	movs	r2, #2
 8002098:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800209c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80020a0:	fa92 f2a2 	rbit	r2, r2
 80020a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80020a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0af      	beq.n	8002028 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	21f8      	movs	r1, #248	; 0xf8
 80020d8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80020e0:	fa91 f1a1 	rbit	r1, r1
 80020e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80020e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020ec:	fab1 f181 	clz	r1, r1
 80020f0:	b2c9      	uxtb	r1, r1
 80020f2:	408b      	lsls	r3, r1
 80020f4:	494f      	ldr	r1, [pc, #316]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
 80020fa:	e06a      	b.n	80021d2 <HAL_RCC_OscConfig+0x5da>
 80020fc:	2301      	movs	r3, #1
 80020fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800210e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800211c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	461a      	mov	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fad2 	bl	80016d0 <HAL_GetTick>
 800212c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff facd 	bl	80016d0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	f000 bc66 	b.w	8002a14 <HAL_RCC_OscConfig+0xe1c>
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800215a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_RCC_OscConfig+0x580>
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e013      	b.n	80021a0 <HAL_RCC_OscConfig+0x5a8>
 8002178:	2302      	movs	r3, #2
 800217a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002190:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_OscConfig+0x63c>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2202      	movs	r2, #2
 80021a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80021a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021aa:	fa92 f2a2 	rbit	r2, r2
 80021ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80021b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 021f 	and.w	r2, r2, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1af      	bne.n	8002132 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80da 	beq.w	8002396 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d069      	beq.n	80022c0 <HAL_RCC_OscConfig+0x6c8>
 80021ec:	2301      	movs	r3, #1
 80021ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80021fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_OscConfig+0x640>)
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	461a      	mov	r2, r3
 8002212:	2301      	movs	r3, #1
 8002214:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fa5b 	bl	80016d0 <HAL_GetTick>
 800221a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e00d      	b.n	800223c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fa56 	bl	80016d0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d905      	bls.n	800223c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e3ef      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 8002234:	40021000 	.word	0x40021000
 8002238:	10908120 	.word	0x10908120
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002254:	2202      	movs	r2, #2
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800226c:	2202      	movs	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800227e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002280:	4ba4      	ldr	r3, [pc, #656]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002284:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002288:	2102      	movs	r1, #2
 800228a:	6019      	str	r1, [r3, #0]
 800228c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f1a3 	rbit	r1, r3
 8002296:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800229a:	6019      	str	r1, [r3, #0]
  return result;
 800229c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0b0      	beq.n	8002220 <HAL_RCC_OscConfig+0x628>
 80022be:	e06a      	b.n	8002396 <HAL_RCC_OscConfig+0x79e>
 80022c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022d6:	601a      	str	r2, [r3, #0]
  return result;
 80022d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b8c      	ldr	r3, [pc, #560]	; (8002518 <HAL_RCC_OscConfig+0x920>)
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	2300      	movs	r3, #0
 80022f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff f9ed 	bl	80016d0 <HAL_GetTick>
 80022f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	e009      	b.n	8002310 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff f9e8 	bl	80016d0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e381      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 8002310:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002344:	2202      	movs	r2, #2
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002356:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 800235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002360:	2102      	movs	r1, #2
 8002362:	6019      	str	r1, [r3, #0]
 8002364:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f1a3 	rbit	r1, r3
 800236e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002372:	6019      	str	r1, [r3, #0]
  return result;
 8002374:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1b2      	bne.n	80022fc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 8157 	beq.w	8002654 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b56      	ldr	r3, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a55      	ldr	r2, [pc, #340]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	61d3      	str	r3, [r2, #28]
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCC_OscConfig+0x924>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11a      	bne.n	8002420 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x924>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_RCC_OscConfig+0x924>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7ff f96b 	bl	80016d0 <HAL_GetTick>
 80023fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	e009      	b.n	8002414 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002400:	f7ff f966 	bl	80016d0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e2ff      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x924>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ef      	beq.n	8002400 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x840>
 800242a:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a39      	ldr	r2, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e02f      	b.n	8002498 <HAL_RCC_OscConfig+0x8a0>
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x864>
 8002442:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a30      	ldr	r2, [pc, #192]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0x8a0>
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x888>
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
 8002472:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x8a0>
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06a      	beq.n	8002578 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff f915 	bl	80016d0 <HAL_GetTick>
 80024a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7ff f910 	bl	80016d0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e2a7      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 80024c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024c8:	2202      	movs	r2, #2
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024f2:	601a      	str	r2, [r3, #0]
  return result;
 80024f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0x928>
 800250e:	4b01      	ldr	r3, [pc, #4]	; (8002514 <HAL_RCC_OscConfig+0x91c>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0x944>
 8002514:	40021000 	.word	0x40021000
 8002518:	10908120 	.word	0x10908120
 800251c:	40007000 	.word	0x40007000
 8002520:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002524:	2202      	movs	r2, #2
 8002526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	4bc0      	ldr	r3, [pc, #768]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002540:	2102      	movs	r1, #2
 8002542:	6011      	str	r1, [r2, #0]
 8002544:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	fa92 f1a2 	rbit	r1, r2
 800254e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002552:	6011      	str	r1, [r2, #0]
  return result;
 8002554:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	fab2 f282 	clz	r2, r2
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d09a      	beq.n	80024ac <HAL_RCC_OscConfig+0x8b4>
 8002576:	e063      	b.n	8002640 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff f8aa 	bl	80016d0 <HAL_GetTick>
 800257c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00b      	b.n	800259a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff f8a5 	bl	80016d0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e23c      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 800259a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b6:	2202      	movs	r2, #2
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025c8:	601a      	str	r2, [r3, #0]
  return result;
 80025ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_OscConfig+0x9f2>
 80025e4:	4b95      	ldr	r3, [pc, #596]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	e00d      	b.n	8002606 <HAL_RCC_OscConfig+0xa0e>
 80025ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025ee:	2202      	movs	r2, #2
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	4b8e      	ldr	r3, [pc, #568]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800260a:	2102      	movs	r1, #2
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	fa92 f1a2 	rbit	r1, r2
 8002618:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800261c:	6011      	str	r1, [r2, #0]
  return result;
 800261e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1a0      	bne.n	8002582 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002640:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b7c      	ldr	r3, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	4a7b      	ldr	r2, [pc, #492]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 81d9 	beq.w	8002a12 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002660:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	f000 81a6 	beq.w	80029ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 811e 	bne.w	80028b6 <HAL_RCC_OscConfig+0xcbe>
 800267a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800267e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002692:	601a      	str	r2, [r3, #0]
  return result;
 8002694:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002698:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f80e 	bl	80016d0 <HAL_GetTick>
 80026b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b8:	e009      	b.n	80026ce <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ba:	f7ff f809 	bl	80016d0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1a2      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 80026ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026e6:	601a      	str	r2, [r3, #0]
  return result;
 80026e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d102      	bne.n	8002708 <HAL_RCC_OscConfig+0xb10>
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	e01b      	b.n	8002740 <HAL_RCC_OscConfig+0xb48>
 8002708:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800270c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002744:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	fa92 f1a2 	rbit	r1, r2
 8002754:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002758:	6011      	str	r1, [r2, #0]
  return result;
 800275a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f042 0220 	orr.w	r2, r2, #32
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f002 021f 	and.w	r2, r2, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d19e      	bne.n	80026ba <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f023 020f 	bic.w	r2, r3, #15
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	492c      	ldr	r1, [pc, #176]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 800278c:	4313      	orrs	r3, r2
 800278e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6a19      	ldr	r1, [r3, #32]
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	4925      	ldr	r1, [pc, #148]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
 80027ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027c4:	601a      	str	r2, [r3, #0]
  return result;
 80027c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	461a      	mov	r2, r3
 80027de:	2301      	movs	r3, #1
 80027e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe ff75 	bl	80016d0 <HAL_GetTick>
 80027e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ea:	e009      	b.n	8002800 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe ff70 	bl	80016d0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e109      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 8002800:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002818:	601a      	str	r2, [r3, #0]
  return result;
 800281a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800281e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0xc48>
 8002834:	4b01      	ldr	r3, [pc, #4]	; (800283c <HAL_RCC_OscConfig+0xc44>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e01e      	b.n	8002878 <HAL_RCC_OscConfig+0xc80>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0xe28>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800287c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002880:	6011      	str	r1, [r2, #0]
 8002882:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	fa92 f1a2 	rbit	r1, r2
 800288c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002890:	6011      	str	r1, [r2, #0]
  return result;
 8002892:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	fab2 f282 	clz	r2, r2
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f042 0220 	orr.w	r2, r2, #32
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	f002 021f 	and.w	r2, r2, #31
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d09b      	beq.n	80027ec <HAL_RCC_OscConfig+0xbf4>
 80028b4:	e0ad      	b.n	8002a12 <HAL_RCC_OscConfig+0xe1a>
 80028b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f2a3 	rbit	r2, r3
 80028ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ce:	601a      	str	r2, [r3, #0]
  return result;
 80028d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fef0 	bl	80016d0 <HAL_GetTick>
 80028f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	e009      	b.n	800290a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fe feeb 	bl	80016d0 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e084      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
 800290a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800290e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0xd4c>
 800293e:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_RCC_OscConfig+0xe28>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e01b      	b.n	800297c <HAL_RCC_OscConfig+0xd84>
 8002944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f107 0320 	add.w	r3, r7, #32
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	fa93 f2a3 	rbit	r2, r3
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_OscConfig+0xe28>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f107 0214 	add.w	r2, r7, #20
 8002980:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002984:	6011      	str	r1, [r2, #0]
 8002986:	f107 0214 	add.w	r2, r7, #20
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	fa92 f1a2 	rbit	r1, r2
 8002990:	f107 0210 	add.w	r2, r7, #16
 8002994:	6011      	str	r1, [r2, #0]
  return result;
 8002996:	f107 0210 	add.w	r2, r7, #16
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f042 0220 	orr.w	r2, r2, #32
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f002 021f 	and.w	r2, r2, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d19e      	bne.n	80028f6 <HAL_RCC_OscConfig+0xcfe>
 80029b8:	e02b      	b.n	8002a12 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e025      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_OscConfig+0xe28>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <HAL_RCC_OscConfig+0xe28>)
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d111      	bne.n	8002a0e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80029ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d108      	bne.n	8002a0e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a00:	f003 020f 	and.w	r2, r3, #15
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b09e      	sub	sp, #120	; 0x78
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e162      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b90      	ldr	r3, [pc, #576]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d910      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	498b      	ldr	r1, [pc, #556]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e14a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b82      	ldr	r3, [pc, #520]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	497f      	ldr	r1, [pc, #508]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80dc 	beq.w	8002c50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d13c      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xf6>
 8002aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <HAL_RCC_ClockConfig+0xa6>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	e00f      	b.n	8002aea <HAL_RCC_ClockConfig+0xc6>
 8002aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ace:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002adc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aee:	65ba      	str	r2, [r7, #88]	; 0x58
 8002af0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f002 021f 	and.w	r2, r2, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d17b      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0f3      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d13c      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x178>
 8002b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x128>
 8002b46:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e00f      	b.n	8002b6c <HAL_RCC_ClockConfig+0x148>
 8002b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b70:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b74:	fa92 f2a2 	rbit	r2, r2
 8002b78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d13a      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b2      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1a0>
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	e00d      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1bc>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2202      	movs	r2, #2
 8002be2:	61ba      	str	r2, [r7, #24]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	fa92 f2a2 	rbit	r2, r2
 8002bea:	617a      	str	r2, [r7, #20]
  return result;
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f042 0220 	orr.w	r2, r2, #32
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f002 021f 	and.w	r2, r2, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e079      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	491a      	ldr	r1, [pc, #104]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fd56 	bl	80016d0 <HAL_GetTick>
 8002c24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fd52 	bl	80016d0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e061      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d214      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4906      	ldr	r1, [pc, #24]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <HAL_RCC_ClockConfig+0x25c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e040      	b.n	8002d02 <HAL_RCC_ClockConfig+0x2de>
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_ClockConfig+0x2e8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	491a      	ldr	r1, [pc, #104]	; (8002d0c <HAL_RCC_ClockConfig+0x2e8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x2e8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4912      	ldr	r1, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x2e8>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cc6:	f000 f829 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cca:	4601      	mov	r1, r0
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_RCC_ClockConfig+0x2e8>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd4:	22f0      	movs	r2, #240	; 0xf0
 8002cd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	fa92 f2a2 	rbit	r2, r2
 8002cde:	60fa      	str	r2, [r7, #12]
  return result;
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	40d3      	lsrs	r3, r2
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x2ec>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	fa21 f303 	lsr.w	r3, r1, r3
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_RCC_ClockConfig+0x2f0>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_ClockConfig+0x2f4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fca4 	bl	8001648 <HAL_InitTick>
  
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3778      	adds	r7, #120	; 0x78
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08004400 	.word	0x08004400
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x30>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x36>
 8002d4a:	e03f      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	e03f      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	fa92 f2a2 	rbit	r2, r2
 8002d64:	607a      	str	r2, [r7, #4]
  return result;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	40d3      	lsrs	r3, r2
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	220f      	movs	r2, #15
 8002d80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	60fa      	str	r2, [r7, #12]
  return result;
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	fab2 f282 	clz	r2, r2
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	40d3      	lsrs	r3, r2
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	e007      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	623b      	str	r3, [r7, #32]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dce:	623b      	str	r3, [r7, #32]
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	372c      	adds	r7, #44	; 0x2c
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40021000 	.word	0x40021000
 8002de4:	007a1200 	.word	0x007a1200
 8002de8:	08004410 	.word	0x08004410
 8002dec:	08004420 	.word	0x08004420

08002df0 <LL_DAC_IsEnabled>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	401a      	ands	r2, r3
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ffd5 	bl	8002df0 <LL_DAC_IsEnabled>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d13a      	bne.n	8002ec2 <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01e      	beq.n	8002e92 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	f640 71fa 	movw	r1, #4090	; 0xffa
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	401a      	ands	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4319      	orrs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4319      	orrs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	4319      	orrs	r1, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e019      	b.n	8002ec6 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	21fa      	movs	r1, #250	; 0xfa
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4319      	orrs	r1, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e001      	b.n	8002ec6 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	613b      	str	r3, [r7, #16]
  return result;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2103      	movs	r1, #3
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	61bb      	str	r3, [r7, #24]
  return result;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b089      	sub	sp, #36	; 0x24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	613b      	str	r3, [r7, #16]
  return result;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2103      	movs	r1, #3
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	61bb      	str	r3, [r7, #24]
  return result;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	431a      	orrs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002fb0:	bf00      	nop
 8002fb2:	3724      	adds	r7, #36	; 0x24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]
  return result;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2103      	movs	r1, #3
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	61bb      	str	r3, [r7, #24]
  return result;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	60da      	str	r2, [r3, #12]
}
 800300e:	bf00      	nop
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800301a:	b480      	push	{r7}
 800301c:	b089      	sub	sp, #36	; 0x24
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	613b      	str	r3, [r7, #16]
  return result;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	210f      	movs	r1, #15
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	401a      	ands	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	61bb      	str	r3, [r7, #24]
  return result;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800306c:	bf00      	nop
 800306e:	3724      	adds	r7, #36	; 0x24
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	613b      	str	r3, [r7, #16]
  return result;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	210f      	movs	r1, #15
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	401a      	ands	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	61bb      	str	r3, [r7, #24]
  return result;
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b088      	sub	sp, #32
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	613b      	str	r3, [r7, #16]
  return result;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030fc:	e051      	b.n	80031a2 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d043      	beq.n	800319c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d003      	beq.n	8003124 <LL_GPIO_Init+0x4a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d10e      	bne.n	8003142 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	461a      	mov	r2, r3
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff16 	bl	8002f5e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fef6 	bl	8002f2e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	461a      	mov	r2, r3
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff36 	bl	8002fbc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d11a      	bne.n	800318e <LL_GPIO_Init+0xb4>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	60bb      	str	r3, [r7, #8]
  return result;
 8003164:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b07      	cmp	r3, #7
 800316e:	d807      	bhi.n	8003180 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	461a      	mov	r2, r3
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff4e 	bl	800301a <LL_GPIO_SetAFPin_0_7>
 800317e:	e006      	b.n	800318e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	461a      	mov	r2, r3
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff75 	bl	8003078 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	69b9      	ldr	r1, [r7, #24]
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fe9a 	bl	8002ed0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	3301      	adds	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1a6      	bne.n	80030fe <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <LL_TIM_SetPrescaler>:
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_TIM_SetAutoReload>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_TIM_SetRepetitionCounter>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3f      	ldr	r2, [pc, #252]	; (8003340 <LL_TIM_Init+0x110>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <LL_TIM_Init+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d00f      	beq.n	8003270 <LL_TIM_Init+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3c      	ldr	r2, [pc, #240]	; (8003344 <LL_TIM_Init+0x114>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00b      	beq.n	8003270 <LL_TIM_Init+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <LL_TIM_Init+0x118>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <LL_TIM_Init+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <LL_TIM_Init+0x11c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <LL_TIM_Init+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a39      	ldr	r2, [pc, #228]	; (8003350 <LL_TIM_Init+0x120>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d106      	bne.n	800327e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <LL_TIM_Init+0x110>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01f      	beq.n	80032c6 <LL_TIM_Init+0x96>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d01b      	beq.n	80032c6 <LL_TIM_Init+0x96>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2c      	ldr	r2, [pc, #176]	; (8003344 <LL_TIM_Init+0x114>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d017      	beq.n	80032c6 <LL_TIM_Init+0x96>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <LL_TIM_Init+0x118>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <LL_TIM_Init+0x96>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	; (800334c <LL_TIM_Init+0x11c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00f      	beq.n	80032c6 <LL_TIM_Init+0x96>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <LL_TIM_Init+0x124>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <LL_TIM_Init+0x96>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <LL_TIM_Init+0x128>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <LL_TIM_Init+0x96>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a28      	ldr	r2, [pc, #160]	; (800335c <LL_TIM_Init+0x12c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <LL_TIM_Init+0x96>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a23      	ldr	r2, [pc, #140]	; (8003350 <LL_TIM_Init+0x120>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d106      	bne.n	80032d4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff78 	bl	80031d6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff64 	bl	80031ba <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a12      	ldr	r2, [pc, #72]	; (8003340 <LL_TIM_Init+0x110>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <LL_TIM_Init+0xf2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a13      	ldr	r2, [pc, #76]	; (800334c <LL_TIM_Init+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <LL_TIM_Init+0xf2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <LL_TIM_Init+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00b      	beq.n	8003322 <LL_TIM_Init+0xf2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <LL_TIM_Init+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <LL_TIM_Init+0xf2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a11      	ldr	r2, [pc, #68]	; (800335c <LL_TIM_Init+0x12c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <LL_TIM_Init+0xf2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <LL_TIM_Init+0x120>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d105      	bne.n	800332e <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff62 	bl	80031f2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff6d 	bl	800320e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40013400 	.word	0x40013400
 8003350:	40015000 	.word	0x40015000
 8003354:	40014000 	.word	0x40014000
 8003358:	40014400 	.word	0x40014400
 800335c:	40014800 	.word	0x40014800

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4e0d      	ldr	r6, [pc, #52]	; (8003398 <__libc_init_array+0x38>)
 8003364:	4c0d      	ldr	r4, [pc, #52]	; (800339c <__libc_init_array+0x3c>)
 8003366:	1ba4      	subs	r4, r4, r6
 8003368:	10a4      	asrs	r4, r4, #2
 800336a:	2500      	movs	r5, #0
 800336c:	42a5      	cmp	r5, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	4e0b      	ldr	r6, [pc, #44]	; (80033a0 <__libc_init_array+0x40>)
 8003372:	4c0c      	ldr	r4, [pc, #48]	; (80033a4 <__libc_init_array+0x44>)
 8003374:	f001 f832 	bl	80043dc <_init>
 8003378:	1ba4      	subs	r4, r4, r6
 800337a:	10a4      	asrs	r4, r4, #2
 800337c:	2500      	movs	r5, #0
 800337e:	42a5      	cmp	r5, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003388:	4798      	blx	r3
 800338a:	3501      	adds	r5, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003392:	4798      	blx	r3
 8003394:	3501      	adds	r5, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	08004608 	.word	0x08004608
 800339c:	08004608 	.word	0x08004608
 80033a0:	08004608 	.word	0x08004608
 80033a4:	0800460c 	.word	0x0800460c

080033a8 <memset>:
 80033a8:	4402      	add	r2, r0
 80033aa:	4603      	mov	r3, r0
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d100      	bne.n	80033b2 <memset+0xa>
 80033b0:	4770      	bx	lr
 80033b2:	f803 1b01 	strb.w	r1, [r3], #1
 80033b6:	e7f9      	b.n	80033ac <memset+0x4>

080033b8 <sin>:
 80033b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033ba:	ec51 0b10 	vmov	r0, r1, d0
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <sin+0x88>)
 80033c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033c4:	4293      	cmp	r3, r2
 80033c6:	dc07      	bgt.n	80033d8 <sin+0x20>
 80033c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003438 <sin+0x80>
 80033cc:	2000      	movs	r0, #0
 80033ce:	f000 fe37 	bl	8004040 <__kernel_sin>
 80033d2:	ec51 0b10 	vmov	r0, r1, d0
 80033d6:	e007      	b.n	80033e8 <sin+0x30>
 80033d8:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <sin+0x8c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	dd09      	ble.n	80033f2 <sin+0x3a>
 80033de:	ee10 2a10 	vmov	r2, s0
 80033e2:	460b      	mov	r3, r1
 80033e4:	f7fc fefc 	bl	80001e0 <__aeabi_dsub>
 80033e8:	ec41 0b10 	vmov	d0, r0, r1
 80033ec:	b005      	add	sp, #20
 80033ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80033f2:	4668      	mov	r0, sp
 80033f4:	f000 f828 	bl	8003448 <__ieee754_rem_pio2>
 80033f8:	f000 0003 	and.w	r0, r0, #3
 80033fc:	2801      	cmp	r0, #1
 80033fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003402:	ed9d 0b00 	vldr	d0, [sp]
 8003406:	d004      	beq.n	8003412 <sin+0x5a>
 8003408:	2802      	cmp	r0, #2
 800340a:	d005      	beq.n	8003418 <sin+0x60>
 800340c:	b970      	cbnz	r0, 800342c <sin+0x74>
 800340e:	2001      	movs	r0, #1
 8003410:	e7dd      	b.n	80033ce <sin+0x16>
 8003412:	f000 fa0d 	bl	8003830 <__kernel_cos>
 8003416:	e7dc      	b.n	80033d2 <sin+0x1a>
 8003418:	2001      	movs	r0, #1
 800341a:	f000 fe11 	bl	8004040 <__kernel_sin>
 800341e:	ec53 2b10 	vmov	r2, r3, d0
 8003422:	ee10 0a10 	vmov	r0, s0
 8003426:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800342a:	e7dd      	b.n	80033e8 <sin+0x30>
 800342c:	f000 fa00 	bl	8003830 <__kernel_cos>
 8003430:	e7f5      	b.n	800341e <sin+0x66>
 8003432:	bf00      	nop
 8003434:	f3af 8000 	nop.w
	...
 8003440:	3fe921fb 	.word	0x3fe921fb
 8003444:	7fefffff 	.word	0x7fefffff

08003448 <__ieee754_rem_pio2>:
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	ec57 6b10 	vmov	r6, r7, d0
 8003450:	4bc3      	ldr	r3, [pc, #780]	; (8003760 <__ieee754_rem_pio2+0x318>)
 8003452:	b08d      	sub	sp, #52	; 0x34
 8003454:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003458:	4598      	cmp	r8, r3
 800345a:	4604      	mov	r4, r0
 800345c:	9704      	str	r7, [sp, #16]
 800345e:	dc07      	bgt.n	8003470 <__ieee754_rem_pio2+0x28>
 8003460:	2200      	movs	r2, #0
 8003462:	2300      	movs	r3, #0
 8003464:	ed84 0b00 	vstr	d0, [r4]
 8003468:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800346c:	2500      	movs	r5, #0
 800346e:	e027      	b.n	80034c0 <__ieee754_rem_pio2+0x78>
 8003470:	4bbc      	ldr	r3, [pc, #752]	; (8003764 <__ieee754_rem_pio2+0x31c>)
 8003472:	4598      	cmp	r8, r3
 8003474:	dc75      	bgt.n	8003562 <__ieee754_rem_pio2+0x11a>
 8003476:	9b04      	ldr	r3, [sp, #16]
 8003478:	4dbb      	ldr	r5, [pc, #748]	; (8003768 <__ieee754_rem_pio2+0x320>)
 800347a:	2b00      	cmp	r3, #0
 800347c:	ee10 0a10 	vmov	r0, s0
 8003480:	a3a9      	add	r3, pc, #676	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e0>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	4639      	mov	r1, r7
 8003488:	dd36      	ble.n	80034f8 <__ieee754_rem_pio2+0xb0>
 800348a:	f7fc fea9 	bl	80001e0 <__aeabi_dsub>
 800348e:	45a8      	cmp	r8, r5
 8003490:	4606      	mov	r6, r0
 8003492:	460f      	mov	r7, r1
 8003494:	d018      	beq.n	80034c8 <__ieee754_rem_pio2+0x80>
 8003496:	a3a6      	add	r3, pc, #664	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fc fea0 	bl	80001e0 <__aeabi_dsub>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	e9c4 2300 	strd	r2, r3, [r4]
 80034a8:	4630      	mov	r0, r6
 80034aa:	4639      	mov	r1, r7
 80034ac:	f7fc fe98 	bl	80001e0 <__aeabi_dsub>
 80034b0:	a39f      	add	r3, pc, #636	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fc fe93 	bl	80001e0 <__aeabi_dsub>
 80034ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80034be:	2501      	movs	r5, #1
 80034c0:	4628      	mov	r0, r5
 80034c2:	b00d      	add	sp, #52	; 0x34
 80034c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c8:	a39b      	add	r3, pc, #620	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f0>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fc fe87 	bl	80001e0 <__aeabi_dsub>
 80034d2:	a39b      	add	r3, pc, #620	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	4606      	mov	r6, r0
 80034da:	460f      	mov	r7, r1
 80034dc:	f7fc fe80 	bl	80001e0 <__aeabi_dsub>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	e9c4 2300 	strd	r2, r3, [r4]
 80034e8:	4630      	mov	r0, r6
 80034ea:	4639      	mov	r1, r7
 80034ec:	f7fc fe78 	bl	80001e0 <__aeabi_dsub>
 80034f0:	a393      	add	r3, pc, #588	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	e7de      	b.n	80034b6 <__ieee754_rem_pio2+0x6e>
 80034f8:	f7fc fe74 	bl	80001e4 <__adddf3>
 80034fc:	45a8      	cmp	r8, r5
 80034fe:	4606      	mov	r6, r0
 8003500:	460f      	mov	r7, r1
 8003502:	d016      	beq.n	8003532 <__ieee754_rem_pio2+0xea>
 8003504:	a38a      	add	r3, pc, #552	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fc fe6b 	bl	80001e4 <__adddf3>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	e9c4 2300 	strd	r2, r3, [r4]
 8003516:	4630      	mov	r0, r6
 8003518:	4639      	mov	r1, r7
 800351a:	f7fc fe61 	bl	80001e0 <__aeabi_dsub>
 800351e:	a384      	add	r3, pc, #528	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fc fe5e 	bl	80001e4 <__adddf3>
 8003528:	f04f 35ff 	mov.w	r5, #4294967295
 800352c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003530:	e7c6      	b.n	80034c0 <__ieee754_rem_pio2+0x78>
 8003532:	a381      	add	r3, pc, #516	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f0>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fc fe54 	bl	80001e4 <__adddf3>
 800353c:	a380      	add	r3, pc, #512	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	4606      	mov	r6, r0
 8003544:	460f      	mov	r7, r1
 8003546:	f7fc fe4d 	bl	80001e4 <__adddf3>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	e9c4 2300 	strd	r2, r3, [r4]
 8003552:	4630      	mov	r0, r6
 8003554:	4639      	mov	r1, r7
 8003556:	f7fc fe43 	bl	80001e0 <__aeabi_dsub>
 800355a:	a379      	add	r3, pc, #484	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	e7e0      	b.n	8003524 <__ieee754_rem_pio2+0xdc>
 8003562:	4b82      	ldr	r3, [pc, #520]	; (800376c <__ieee754_rem_pio2+0x324>)
 8003564:	4598      	cmp	r8, r3
 8003566:	f300 80d0 	bgt.w	800370a <__ieee754_rem_pio2+0x2c2>
 800356a:	f000 fe23 	bl	80041b4 <fabs>
 800356e:	ec57 6b10 	vmov	r6, r7, d0
 8003572:	ee10 0a10 	vmov	r0, s0
 8003576:	a374      	add	r3, pc, #464	; (adr r3, 8003748 <__ieee754_rem_pio2+0x300>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	4639      	mov	r1, r7
 800357e:	f7fc ffe7 	bl	8000550 <__aeabi_dmul>
 8003582:	2200      	movs	r2, #0
 8003584:	4b7a      	ldr	r3, [pc, #488]	; (8003770 <__ieee754_rem_pio2+0x328>)
 8003586:	f7fc fe2d 	bl	80001e4 <__adddf3>
 800358a:	f7fd fa7b 	bl	8000a84 <__aeabi_d2iz>
 800358e:	4605      	mov	r5, r0
 8003590:	f7fc ff74 	bl	800047c <__aeabi_i2d>
 8003594:	a364      	add	r3, pc, #400	; (adr r3, 8003728 <__ieee754_rem_pio2+0x2e0>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800359e:	f7fc ffd7 	bl	8000550 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4630      	mov	r0, r6
 80035a8:	4639      	mov	r1, r7
 80035aa:	f7fc fe19 	bl	80001e0 <__aeabi_dsub>
 80035ae:	a360      	add	r3, pc, #384	; (adr r3, 8003730 <__ieee754_rem_pio2+0x2e8>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	4682      	mov	sl, r0
 80035b6:	468b      	mov	fp, r1
 80035b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035bc:	f7fc ffc8 	bl	8000550 <__aeabi_dmul>
 80035c0:	2d1f      	cmp	r5, #31
 80035c2:	4606      	mov	r6, r0
 80035c4:	460f      	mov	r7, r1
 80035c6:	dc0c      	bgt.n	80035e2 <__ieee754_rem_pio2+0x19a>
 80035c8:	1e6a      	subs	r2, r5, #1
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <__ieee754_rem_pio2+0x32c>)
 80035cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d0:	4543      	cmp	r3, r8
 80035d2:	d006      	beq.n	80035e2 <__ieee754_rem_pio2+0x19a>
 80035d4:	4632      	mov	r2, r6
 80035d6:	463b      	mov	r3, r7
 80035d8:	4650      	mov	r0, sl
 80035da:	4659      	mov	r1, fp
 80035dc:	f7fc fe00 	bl	80001e0 <__aeabi_dsub>
 80035e0:	e00e      	b.n	8003600 <__ieee754_rem_pio2+0x1b8>
 80035e2:	4632      	mov	r2, r6
 80035e4:	463b      	mov	r3, r7
 80035e6:	4650      	mov	r0, sl
 80035e8:	4659      	mov	r1, fp
 80035ea:	f7fc fdf9 	bl	80001e0 <__aeabi_dsub>
 80035ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	9a05      	ldr	r2, [sp, #20]
 80035f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	dc02      	bgt.n	8003606 <__ieee754_rem_pio2+0x1be>
 8003600:	e9c4 0100 	strd	r0, r1, [r4]
 8003604:	e039      	b.n	800367a <__ieee754_rem_pio2+0x232>
 8003606:	a34c      	add	r3, pc, #304	; (adr r3, 8003738 <__ieee754_rem_pio2+0x2f0>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003610:	f7fc ff9e 	bl	8000550 <__aeabi_dmul>
 8003614:	4606      	mov	r6, r0
 8003616:	460f      	mov	r7, r1
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4650      	mov	r0, sl
 800361e:	4659      	mov	r1, fp
 8003620:	f7fc fdde 	bl	80001e0 <__aeabi_dsub>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4680      	mov	r8, r0
 800362a:	4689      	mov	r9, r1
 800362c:	4650      	mov	r0, sl
 800362e:	4659      	mov	r1, fp
 8003630:	f7fc fdd6 	bl	80001e0 <__aeabi_dsub>
 8003634:	4632      	mov	r2, r6
 8003636:	463b      	mov	r3, r7
 8003638:	f7fc fdd2 	bl	80001e0 <__aeabi_dsub>
 800363c:	a340      	add	r3, pc, #256	; (adr r3, 8003740 <__ieee754_rem_pio2+0x2f8>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	4606      	mov	r6, r0
 8003644:	460f      	mov	r7, r1
 8003646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800364a:	f7fc ff81 	bl	8000550 <__aeabi_dmul>
 800364e:	4632      	mov	r2, r6
 8003650:	463b      	mov	r3, r7
 8003652:	f7fc fdc5 	bl	80001e0 <__aeabi_dsub>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4606      	mov	r6, r0
 800365c:	460f      	mov	r7, r1
 800365e:	4640      	mov	r0, r8
 8003660:	4649      	mov	r1, r9
 8003662:	f7fc fdbd 	bl	80001e0 <__aeabi_dsub>
 8003666:	9a05      	ldr	r2, [sp, #20]
 8003668:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b31      	cmp	r3, #49	; 0x31
 8003670:	dc20      	bgt.n	80036b4 <__ieee754_rem_pio2+0x26c>
 8003672:	e9c4 0100 	strd	r0, r1, [r4]
 8003676:	46c2      	mov	sl, r8
 8003678:	46cb      	mov	fp, r9
 800367a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800367e:	4650      	mov	r0, sl
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	4659      	mov	r1, fp
 8003686:	f7fc fdab 	bl	80001e0 <__aeabi_dsub>
 800368a:	463b      	mov	r3, r7
 800368c:	4632      	mov	r2, r6
 800368e:	f7fc fda7 	bl	80001e0 <__aeabi_dsub>
 8003692:	9b04      	ldr	r3, [sp, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800369a:	f6bf af11 	bge.w	80034c0 <__ieee754_rem_pio2+0x78>
 800369e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80036a2:	6063      	str	r3, [r4, #4]
 80036a4:	f8c4 8000 	str.w	r8, [r4]
 80036a8:	60a0      	str	r0, [r4, #8]
 80036aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036ae:	60e3      	str	r3, [r4, #12]
 80036b0:	426d      	negs	r5, r5
 80036b2:	e705      	b.n	80034c0 <__ieee754_rem_pio2+0x78>
 80036b4:	a326      	add	r3, pc, #152	; (adr r3, 8003750 <__ieee754_rem_pio2+0x308>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036be:	f7fc ff47 	bl	8000550 <__aeabi_dmul>
 80036c2:	4606      	mov	r6, r0
 80036c4:	460f      	mov	r7, r1
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4640      	mov	r0, r8
 80036cc:	4649      	mov	r1, r9
 80036ce:	f7fc fd87 	bl	80001e0 <__aeabi_dsub>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4682      	mov	sl, r0
 80036d8:	468b      	mov	fp, r1
 80036da:	4640      	mov	r0, r8
 80036dc:	4649      	mov	r1, r9
 80036de:	f7fc fd7f 	bl	80001e0 <__aeabi_dsub>
 80036e2:	4632      	mov	r2, r6
 80036e4:	463b      	mov	r3, r7
 80036e6:	f7fc fd7b 	bl	80001e0 <__aeabi_dsub>
 80036ea:	a31b      	add	r3, pc, #108	; (adr r3, 8003758 <__ieee754_rem_pio2+0x310>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	4606      	mov	r6, r0
 80036f2:	460f      	mov	r7, r1
 80036f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f8:	f7fc ff2a 	bl	8000550 <__aeabi_dmul>
 80036fc:	4632      	mov	r2, r6
 80036fe:	463b      	mov	r3, r7
 8003700:	f7fc fd6e 	bl	80001e0 <__aeabi_dsub>
 8003704:	4606      	mov	r6, r0
 8003706:	460f      	mov	r7, r1
 8003708:	e764      	b.n	80035d4 <__ieee754_rem_pio2+0x18c>
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <__ieee754_rem_pio2+0x330>)
 800370c:	4598      	cmp	r8, r3
 800370e:	dd35      	ble.n	800377c <__ieee754_rem_pio2+0x334>
 8003710:	ee10 2a10 	vmov	r2, s0
 8003714:	463b      	mov	r3, r7
 8003716:	4630      	mov	r0, r6
 8003718:	4639      	mov	r1, r7
 800371a:	f7fc fd61 	bl	80001e0 <__aeabi_dsub>
 800371e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003722:	e9c4 0100 	strd	r0, r1, [r4]
 8003726:	e6a1      	b.n	800346c <__ieee754_rem_pio2+0x24>
 8003728:	54400000 	.word	0x54400000
 800372c:	3ff921fb 	.word	0x3ff921fb
 8003730:	1a626331 	.word	0x1a626331
 8003734:	3dd0b461 	.word	0x3dd0b461
 8003738:	1a600000 	.word	0x1a600000
 800373c:	3dd0b461 	.word	0x3dd0b461
 8003740:	2e037073 	.word	0x2e037073
 8003744:	3ba3198a 	.word	0x3ba3198a
 8003748:	6dc9c883 	.word	0x6dc9c883
 800374c:	3fe45f30 	.word	0x3fe45f30
 8003750:	2e000000 	.word	0x2e000000
 8003754:	3ba3198a 	.word	0x3ba3198a
 8003758:	252049c1 	.word	0x252049c1
 800375c:	397b839a 	.word	0x397b839a
 8003760:	3fe921fb 	.word	0x3fe921fb
 8003764:	4002d97b 	.word	0x4002d97b
 8003768:	3ff921fb 	.word	0x3ff921fb
 800376c:	413921fb 	.word	0x413921fb
 8003770:	3fe00000 	.word	0x3fe00000
 8003774:	08004430 	.word	0x08004430
 8003778:	7fefffff 	.word	0x7fefffff
 800377c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003780:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003784:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003788:	4630      	mov	r0, r6
 800378a:	460f      	mov	r7, r1
 800378c:	f7fd f97a 	bl	8000a84 <__aeabi_d2iz>
 8003790:	f7fc fe74 	bl	800047c <__aeabi_i2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4630      	mov	r0, r6
 800379a:	4639      	mov	r1, r7
 800379c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80037a0:	f7fc fd1e 	bl	80001e0 <__aeabi_dsub>
 80037a4:	2200      	movs	r2, #0
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <__ieee754_rem_pio2+0x3dc>)
 80037a8:	f7fc fed2 	bl	8000550 <__aeabi_dmul>
 80037ac:	460f      	mov	r7, r1
 80037ae:	4606      	mov	r6, r0
 80037b0:	f7fd f968 	bl	8000a84 <__aeabi_d2iz>
 80037b4:	f7fc fe62 	bl	800047c <__aeabi_i2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4630      	mov	r0, r6
 80037be:	4639      	mov	r1, r7
 80037c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80037c4:	f7fc fd0c 	bl	80001e0 <__aeabi_dsub>
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <__ieee754_rem_pio2+0x3dc>)
 80037cc:	f7fc fec0 	bl	8000550 <__aeabi_dmul>
 80037d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80037d8:	f04f 0803 	mov.w	r8, #3
 80037dc:	2600      	movs	r6, #0
 80037de:	2700      	movs	r7, #0
 80037e0:	4632      	mov	r2, r6
 80037e2:	463b      	mov	r3, r7
 80037e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80037e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80037ec:	f7fd f918 	bl	8000a20 <__aeabi_dcmpeq>
 80037f0:	b9b0      	cbnz	r0, 8003820 <__ieee754_rem_pio2+0x3d8>
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <__ieee754_rem_pio2+0x3e0>)
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2302      	movs	r3, #2
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	462a      	mov	r2, r5
 80037fc:	4643      	mov	r3, r8
 80037fe:	4621      	mov	r1, r4
 8003800:	a806      	add	r0, sp, #24
 8003802:	f000 f8dd 	bl	80039c0 <__kernel_rem_pio2>
 8003806:	9b04      	ldr	r3, [sp, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	4605      	mov	r5, r0
 800380c:	f6bf ae58 	bge.w	80034c0 <__ieee754_rem_pio2+0x78>
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003816:	6063      	str	r3, [r4, #4]
 8003818:	68e3      	ldr	r3, [r4, #12]
 800381a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800381e:	e746      	b.n	80036ae <__ieee754_rem_pio2+0x266>
 8003820:	46d0      	mov	r8, sl
 8003822:	e7dd      	b.n	80037e0 <__ieee754_rem_pio2+0x398>
 8003824:	41700000 	.word	0x41700000
 8003828:	080044b0 	.word	0x080044b0
 800382c:	00000000 	.word	0x00000000

08003830 <__kernel_cos>:
 8003830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	ec59 8b10 	vmov	r8, r9, d0
 8003838:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800383c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003840:	ed2d 8b02 	vpush	{d8}
 8003844:	eeb0 8a41 	vmov.f32	s16, s2
 8003848:	eef0 8a61 	vmov.f32	s17, s3
 800384c:	da07      	bge.n	800385e <__kernel_cos+0x2e>
 800384e:	ee10 0a10 	vmov	r0, s0
 8003852:	4649      	mov	r1, r9
 8003854:	f7fd f916 	bl	8000a84 <__aeabi_d2iz>
 8003858:	2800      	cmp	r0, #0
 800385a:	f000 8089 	beq.w	8003970 <__kernel_cos+0x140>
 800385e:	4642      	mov	r2, r8
 8003860:	464b      	mov	r3, r9
 8003862:	4640      	mov	r0, r8
 8003864:	4649      	mov	r1, r9
 8003866:	f7fc fe73 	bl	8000550 <__aeabi_dmul>
 800386a:	2200      	movs	r2, #0
 800386c:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <__kernel_cos+0x178>)
 800386e:	4604      	mov	r4, r0
 8003870:	460d      	mov	r5, r1
 8003872:	f7fc fe6d 	bl	8000550 <__aeabi_dmul>
 8003876:	a340      	add	r3, pc, #256	; (adr r3, 8003978 <__kernel_cos+0x148>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	4682      	mov	sl, r0
 800387e:	468b      	mov	fp, r1
 8003880:	4620      	mov	r0, r4
 8003882:	4629      	mov	r1, r5
 8003884:	f7fc fe64 	bl	8000550 <__aeabi_dmul>
 8003888:	a33d      	add	r3, pc, #244	; (adr r3, 8003980 <__kernel_cos+0x150>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f7fc fca9 	bl	80001e4 <__adddf3>
 8003892:	4622      	mov	r2, r4
 8003894:	462b      	mov	r3, r5
 8003896:	f7fc fe5b 	bl	8000550 <__aeabi_dmul>
 800389a:	a33b      	add	r3, pc, #236	; (adr r3, 8003988 <__kernel_cos+0x158>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc fc9e 	bl	80001e0 <__aeabi_dsub>
 80038a4:	4622      	mov	r2, r4
 80038a6:	462b      	mov	r3, r5
 80038a8:	f7fc fe52 	bl	8000550 <__aeabi_dmul>
 80038ac:	a338      	add	r3, pc, #224	; (adr r3, 8003990 <__kernel_cos+0x160>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc fc97 	bl	80001e4 <__adddf3>
 80038b6:	4622      	mov	r2, r4
 80038b8:	462b      	mov	r3, r5
 80038ba:	f7fc fe49 	bl	8000550 <__aeabi_dmul>
 80038be:	a336      	add	r3, pc, #216	; (adr r3, 8003998 <__kernel_cos+0x168>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f7fc fc8c 	bl	80001e0 <__aeabi_dsub>
 80038c8:	4622      	mov	r2, r4
 80038ca:	462b      	mov	r3, r5
 80038cc:	f7fc fe40 	bl	8000550 <__aeabi_dmul>
 80038d0:	a333      	add	r3, pc, #204	; (adr r3, 80039a0 <__kernel_cos+0x170>)
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f7fc fc85 	bl	80001e4 <__adddf3>
 80038da:	4622      	mov	r2, r4
 80038dc:	462b      	mov	r3, r5
 80038de:	f7fc fe37 	bl	8000550 <__aeabi_dmul>
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	f7fc fe33 	bl	8000550 <__aeabi_dmul>
 80038ea:	ec53 2b18 	vmov	r2, r3, d8
 80038ee:	4604      	mov	r4, r0
 80038f0:	460d      	mov	r5, r1
 80038f2:	4640      	mov	r0, r8
 80038f4:	4649      	mov	r1, r9
 80038f6:	f7fc fe2b 	bl	8000550 <__aeabi_dmul>
 80038fa:	460b      	mov	r3, r1
 80038fc:	4602      	mov	r2, r0
 80038fe:	4629      	mov	r1, r5
 8003900:	4620      	mov	r0, r4
 8003902:	f7fc fc6d 	bl	80001e0 <__aeabi_dsub>
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <__kernel_cos+0x17c>)
 8003908:	429e      	cmp	r6, r3
 800390a:	4680      	mov	r8, r0
 800390c:	4689      	mov	r9, r1
 800390e:	dc11      	bgt.n	8003934 <__kernel_cos+0x104>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4650      	mov	r0, sl
 8003916:	4659      	mov	r1, fp
 8003918:	f7fc fc62 	bl	80001e0 <__aeabi_dsub>
 800391c:	460b      	mov	r3, r1
 800391e:	4924      	ldr	r1, [pc, #144]	; (80039b0 <__kernel_cos+0x180>)
 8003920:	4602      	mov	r2, r0
 8003922:	2000      	movs	r0, #0
 8003924:	f7fc fc5c 	bl	80001e0 <__aeabi_dsub>
 8003928:	ecbd 8b02 	vpop	{d8}
 800392c:	ec41 0b10 	vmov	d0, r0, r1
 8003930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <__kernel_cos+0x184>)
 8003936:	491e      	ldr	r1, [pc, #120]	; (80039b0 <__kernel_cos+0x180>)
 8003938:	429e      	cmp	r6, r3
 800393a:	bfcc      	ite	gt
 800393c:	4d1e      	ldrgt	r5, [pc, #120]	; (80039b8 <__kernel_cos+0x188>)
 800393e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003942:	2400      	movs	r4, #0
 8003944:	4622      	mov	r2, r4
 8003946:	462b      	mov	r3, r5
 8003948:	2000      	movs	r0, #0
 800394a:	f7fc fc49 	bl	80001e0 <__aeabi_dsub>
 800394e:	4622      	mov	r2, r4
 8003950:	4606      	mov	r6, r0
 8003952:	460f      	mov	r7, r1
 8003954:	462b      	mov	r3, r5
 8003956:	4650      	mov	r0, sl
 8003958:	4659      	mov	r1, fp
 800395a:	f7fc fc41 	bl	80001e0 <__aeabi_dsub>
 800395e:	4642      	mov	r2, r8
 8003960:	464b      	mov	r3, r9
 8003962:	f7fc fc3d 	bl	80001e0 <__aeabi_dsub>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4630      	mov	r0, r6
 800396c:	4639      	mov	r1, r7
 800396e:	e7d9      	b.n	8003924 <__kernel_cos+0xf4>
 8003970:	2000      	movs	r0, #0
 8003972:	490f      	ldr	r1, [pc, #60]	; (80039b0 <__kernel_cos+0x180>)
 8003974:	e7d8      	b.n	8003928 <__kernel_cos+0xf8>
 8003976:	bf00      	nop
 8003978:	be8838d4 	.word	0xbe8838d4
 800397c:	bda8fae9 	.word	0xbda8fae9
 8003980:	bdb4b1c4 	.word	0xbdb4b1c4
 8003984:	3e21ee9e 	.word	0x3e21ee9e
 8003988:	809c52ad 	.word	0x809c52ad
 800398c:	3e927e4f 	.word	0x3e927e4f
 8003990:	19cb1590 	.word	0x19cb1590
 8003994:	3efa01a0 	.word	0x3efa01a0
 8003998:	16c15177 	.word	0x16c15177
 800399c:	3f56c16c 	.word	0x3f56c16c
 80039a0:	5555554c 	.word	0x5555554c
 80039a4:	3fa55555 	.word	0x3fa55555
 80039a8:	3fe00000 	.word	0x3fe00000
 80039ac:	3fd33332 	.word	0x3fd33332
 80039b0:	3ff00000 	.word	0x3ff00000
 80039b4:	3fe90000 	.word	0x3fe90000
 80039b8:	3fd20000 	.word	0x3fd20000
 80039bc:	00000000 	.word	0x00000000

080039c0 <__kernel_rem_pio2>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	ed2d 8b02 	vpush	{d8}
 80039c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80039cc:	1ed4      	subs	r4, r2, #3
 80039ce:	9308      	str	r3, [sp, #32]
 80039d0:	9101      	str	r1, [sp, #4]
 80039d2:	4bc5      	ldr	r3, [pc, #788]	; (8003ce8 <__kernel_rem_pio2+0x328>)
 80039d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80039d6:	9009      	str	r0, [sp, #36]	; 0x24
 80039d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	9b08      	ldr	r3, [sp, #32]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	9307      	str	r3, [sp, #28]
 80039e4:	2318      	movs	r3, #24
 80039e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80039ea:	f06f 0317 	mvn.w	r3, #23
 80039ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80039f2:	fb04 3303 	mla	r3, r4, r3, r3
 80039f6:	eb03 0a02 	add.w	sl, r3, r2
 80039fa:	9b04      	ldr	r3, [sp, #16]
 80039fc:	9a07      	ldr	r2, [sp, #28]
 80039fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003cd8 <__kernel_rem_pio2+0x318>
 8003a02:	eb03 0802 	add.w	r8, r3, r2
 8003a06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003a08:	1aa7      	subs	r7, r4, r2
 8003a0a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003a0e:	ae22      	add	r6, sp, #136	; 0x88
 8003a10:	2500      	movs	r5, #0
 8003a12:	4545      	cmp	r5, r8
 8003a14:	dd13      	ble.n	8003a3e <__kernel_rem_pio2+0x7e>
 8003a16:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8003cd8 <__kernel_rem_pio2+0x318>
 8003a1a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003a1e:	2600      	movs	r6, #0
 8003a20:	9b04      	ldr	r3, [sp, #16]
 8003a22:	429e      	cmp	r6, r3
 8003a24:	dc32      	bgt.n	8003a8c <__kernel_rem_pio2+0xcc>
 8003a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	9b08      	ldr	r3, [sp, #32]
 8003a2c:	199d      	adds	r5, r3, r6
 8003a2e:	ab22      	add	r3, sp, #136	; 0x88
 8003a30:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003a34:	9306      	str	r3, [sp, #24]
 8003a36:	ec59 8b18 	vmov	r8, r9, d8
 8003a3a:	2700      	movs	r7, #0
 8003a3c:	e01f      	b.n	8003a7e <__kernel_rem_pio2+0xbe>
 8003a3e:	42ef      	cmn	r7, r5
 8003a40:	d407      	bmi.n	8003a52 <__kernel_rem_pio2+0x92>
 8003a42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003a46:	f7fc fd19 	bl	800047c <__aeabi_i2d>
 8003a4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a4e:	3501      	adds	r5, #1
 8003a50:	e7df      	b.n	8003a12 <__kernel_rem_pio2+0x52>
 8003a52:	ec51 0b18 	vmov	r0, r1, d8
 8003a56:	e7f8      	b.n	8003a4a <__kernel_rem_pio2+0x8a>
 8003a58:	9906      	ldr	r1, [sp, #24]
 8003a5a:	9d02      	ldr	r5, [sp, #8]
 8003a5c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003a60:	9106      	str	r1, [sp, #24]
 8003a62:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003a66:	9502      	str	r5, [sp, #8]
 8003a68:	f7fc fd72 	bl	8000550 <__aeabi_dmul>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4640      	mov	r0, r8
 8003a72:	4649      	mov	r1, r9
 8003a74:	f7fc fbb6 	bl	80001e4 <__adddf3>
 8003a78:	3701      	adds	r7, #1
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	4689      	mov	r9, r1
 8003a7e:	9b07      	ldr	r3, [sp, #28]
 8003a80:	429f      	cmp	r7, r3
 8003a82:	dde9      	ble.n	8003a58 <__kernel_rem_pio2+0x98>
 8003a84:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003a88:	3601      	adds	r6, #1
 8003a8a:	e7c9      	b.n	8003a20 <__kernel_rem_pio2+0x60>
 8003a8c:	9b04      	ldr	r3, [sp, #16]
 8003a8e:	aa0e      	add	r2, sp, #56	; 0x38
 8003a90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a94:	930c      	str	r3, [sp, #48]	; 0x30
 8003a96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003a98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a9c:	9c04      	ldr	r4, [sp, #16]
 8003a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aa0:	ab9a      	add	r3, sp, #616	; 0x268
 8003aa2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8003aa6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003aaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003aae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003ab2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8003ab6:	ab9a      	add	r3, sp, #616	; 0x268
 8003ab8:	445b      	add	r3, fp
 8003aba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8003abe:	2500      	movs	r5, #0
 8003ac0:	1b63      	subs	r3, r4, r5
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dc78      	bgt.n	8003bb8 <__kernel_rem_pio2+0x1f8>
 8003ac6:	4650      	mov	r0, sl
 8003ac8:	ec49 8b10 	vmov	d0, r8, r9
 8003acc:	f000 fc00 	bl	80042d0 <scalbn>
 8003ad0:	ec57 6b10 	vmov	r6, r7, d0
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ada:	ee10 0a10 	vmov	r0, s0
 8003ade:	4639      	mov	r1, r7
 8003ae0:	f7fc fd36 	bl	8000550 <__aeabi_dmul>
 8003ae4:	ec41 0b10 	vmov	d0, r0, r1
 8003ae8:	f000 fb6e 	bl	80041c8 <floor>
 8003aec:	2200      	movs	r2, #0
 8003aee:	ec51 0b10 	vmov	r0, r1, d0
 8003af2:	4b7e      	ldr	r3, [pc, #504]	; (8003cec <__kernel_rem_pio2+0x32c>)
 8003af4:	f7fc fd2c 	bl	8000550 <__aeabi_dmul>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4630      	mov	r0, r6
 8003afe:	4639      	mov	r1, r7
 8003b00:	f7fc fb6e 	bl	80001e0 <__aeabi_dsub>
 8003b04:	460f      	mov	r7, r1
 8003b06:	4606      	mov	r6, r0
 8003b08:	f7fc ffbc 	bl	8000a84 <__aeabi_d2iz>
 8003b0c:	9006      	str	r0, [sp, #24]
 8003b0e:	f7fc fcb5 	bl	800047c <__aeabi_i2d>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fc fb61 	bl	80001e0 <__aeabi_dsub>
 8003b1e:	f1ba 0f00 	cmp.w	sl, #0
 8003b22:	4606      	mov	r6, r0
 8003b24:	460f      	mov	r7, r1
 8003b26:	dd6c      	ble.n	8003c02 <__kernel_rem_pio2+0x242>
 8003b28:	1e62      	subs	r2, r4, #1
 8003b2a:	ab0e      	add	r3, sp, #56	; 0x38
 8003b2c:	f1ca 0118 	rsb	r1, sl, #24
 8003b30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b34:	9d06      	ldr	r5, [sp, #24]
 8003b36:	fa40 f301 	asr.w	r3, r0, r1
 8003b3a:	441d      	add	r5, r3
 8003b3c:	408b      	lsls	r3, r1
 8003b3e:	1ac0      	subs	r0, r0, r3
 8003b40:	ab0e      	add	r3, sp, #56	; 0x38
 8003b42:	9506      	str	r5, [sp, #24]
 8003b44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003b48:	f1ca 0317 	rsb	r3, sl, #23
 8003b4c:	fa40 f303 	asr.w	r3, r0, r3
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	9b02      	ldr	r3, [sp, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dd62      	ble.n	8003c1e <__kernel_rem_pio2+0x25e>
 8003b58:	9b06      	ldr	r3, [sp, #24]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	9306      	str	r3, [sp, #24]
 8003b60:	4615      	mov	r5, r2
 8003b62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003b66:	4294      	cmp	r4, r2
 8003b68:	f300 8095 	bgt.w	8003c96 <__kernel_rem_pio2+0x2d6>
 8003b6c:	f1ba 0f00 	cmp.w	sl, #0
 8003b70:	dd07      	ble.n	8003b82 <__kernel_rem_pio2+0x1c2>
 8003b72:	f1ba 0f01 	cmp.w	sl, #1
 8003b76:	f000 80a2 	beq.w	8003cbe <__kernel_rem_pio2+0x2fe>
 8003b7a:	f1ba 0f02 	cmp.w	sl, #2
 8003b7e:	f000 80c1 	beq.w	8003d04 <__kernel_rem_pio2+0x344>
 8003b82:	9b02      	ldr	r3, [sp, #8]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d14a      	bne.n	8003c1e <__kernel_rem_pio2+0x25e>
 8003b88:	4632      	mov	r2, r6
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	4958      	ldr	r1, [pc, #352]	; (8003cf0 <__kernel_rem_pio2+0x330>)
 8003b90:	f7fc fb26 	bl	80001e0 <__aeabi_dsub>
 8003b94:	4606      	mov	r6, r0
 8003b96:	460f      	mov	r7, r1
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	d040      	beq.n	8003c1e <__kernel_rem_pio2+0x25e>
 8003b9c:	4650      	mov	r0, sl
 8003b9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003ce0 <__kernel_rem_pio2+0x320>
 8003ba2:	f000 fb95 	bl	80042d0 <scalbn>
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	4639      	mov	r1, r7
 8003baa:	ec53 2b10 	vmov	r2, r3, d0
 8003bae:	f7fc fb17 	bl	80001e0 <__aeabi_dsub>
 8003bb2:	4606      	mov	r6, r0
 8003bb4:	460f      	mov	r7, r1
 8003bb6:	e032      	b.n	8003c1e <__kernel_rem_pio2+0x25e>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <__kernel_rem_pio2+0x334>)
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	f7fc fcc6 	bl	8000550 <__aeabi_dmul>
 8003bc4:	f7fc ff5e 	bl	8000a84 <__aeabi_d2iz>
 8003bc8:	f7fc fc58 	bl	800047c <__aeabi_i2d>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <__kernel_rem_pio2+0x338>)
 8003bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bd4:	f7fc fcbc 	bl	8000550 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4640      	mov	r0, r8
 8003bde:	4649      	mov	r1, r9
 8003be0:	f7fc fafe 	bl	80001e0 <__aeabi_dsub>
 8003be4:	f7fc ff4e 	bl	8000a84 <__aeabi_d2iz>
 8003be8:	ab0e      	add	r3, sp, #56	; 0x38
 8003bea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003bee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bf6:	f7fc faf5 	bl	80001e4 <__adddf3>
 8003bfa:	3501      	adds	r5, #1
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	4689      	mov	r9, r1
 8003c00:	e75e      	b.n	8003ac0 <__kernel_rem_pio2+0x100>
 8003c02:	d105      	bne.n	8003c10 <__kernel_rem_pio2+0x250>
 8003c04:	1e63      	subs	r3, r4, #1
 8003c06:	aa0e      	add	r2, sp, #56	; 0x38
 8003c08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c0c:	15c3      	asrs	r3, r0, #23
 8003c0e:	e79f      	b.n	8003b50 <__kernel_rem_pio2+0x190>
 8003c10:	2200      	movs	r2, #0
 8003c12:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <__kernel_rem_pio2+0x33c>)
 8003c14:	f7fc ff22 	bl	8000a5c <__aeabi_dcmpge>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d139      	bne.n	8003c90 <__kernel_rem_pio2+0x2d0>
 8003c1c:	9002      	str	r0, [sp, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2300      	movs	r3, #0
 8003c22:	4630      	mov	r0, r6
 8003c24:	4639      	mov	r1, r7
 8003c26:	f7fc fefb 	bl	8000a20 <__aeabi_dcmpeq>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	f000 80c7 	beq.w	8003dbe <__kernel_rem_pio2+0x3fe>
 8003c30:	1e65      	subs	r5, r4, #1
 8003c32:	462b      	mov	r3, r5
 8003c34:	2200      	movs	r2, #0
 8003c36:	9904      	ldr	r1, [sp, #16]
 8003c38:	428b      	cmp	r3, r1
 8003c3a:	da6a      	bge.n	8003d12 <__kernel_rem_pio2+0x352>
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	f000 8088 	beq.w	8003d52 <__kernel_rem_pio2+0x392>
 8003c42:	ab0e      	add	r3, sp, #56	; 0x38
 8003c44:	f1aa 0a18 	sub.w	sl, sl, #24
 8003c48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80b4 	beq.w	8003dba <__kernel_rem_pio2+0x3fa>
 8003c52:	4650      	mov	r0, sl
 8003c54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8003ce0 <__kernel_rem_pio2+0x320>
 8003c58:	f000 fb3a 	bl	80042d0 <scalbn>
 8003c5c:	00ec      	lsls	r4, r5, #3
 8003c5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8003c60:	191e      	adds	r6, r3, r4
 8003c62:	ec59 8b10 	vmov	r8, r9, d0
 8003c66:	f106 0a08 	add.w	sl, r6, #8
 8003c6a:	462f      	mov	r7, r5
 8003c6c:	2f00      	cmp	r7, #0
 8003c6e:	f280 80df 	bge.w	8003e30 <__kernel_rem_pio2+0x470>
 8003c72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8003cd8 <__kernel_rem_pio2+0x318>
 8003c76:	f04f 0a00 	mov.w	sl, #0
 8003c7a:	eba5 030a 	sub.w	r3, r5, sl
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f2c0 810a 	blt.w	8003e98 <__kernel_rem_pio2+0x4d8>
 8003c84:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003d00 <__kernel_rem_pio2+0x340>
 8003c88:	ec59 8b18 	vmov	r8, r9, d8
 8003c8c:	2700      	movs	r7, #0
 8003c8e:	e0f5      	b.n	8003e7c <__kernel_rem_pio2+0x4bc>
 8003c90:	2302      	movs	r3, #2
 8003c92:	9302      	str	r3, [sp, #8]
 8003c94:	e760      	b.n	8003b58 <__kernel_rem_pio2+0x198>
 8003c96:	ab0e      	add	r3, sp, #56	; 0x38
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	b94d      	cbnz	r5, 8003cb2 <__kernel_rem_pio2+0x2f2>
 8003c9e:	b12b      	cbz	r3, 8003cac <__kernel_rem_pio2+0x2ec>
 8003ca0:	a80e      	add	r0, sp, #56	; 0x38
 8003ca2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003ca6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003caa:	2301      	movs	r3, #1
 8003cac:	3201      	adds	r2, #1
 8003cae:	461d      	mov	r5, r3
 8003cb0:	e759      	b.n	8003b66 <__kernel_rem_pio2+0x1a6>
 8003cb2:	a80e      	add	r0, sp, #56	; 0x38
 8003cb4:	1acb      	subs	r3, r1, r3
 8003cb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	e7f6      	b.n	8003cac <__kernel_rem_pio2+0x2ec>
 8003cbe:	1e62      	subs	r2, r4, #1
 8003cc0:	ab0e      	add	r3, sp, #56	; 0x38
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003cca:	a90e      	add	r1, sp, #56	; 0x38
 8003ccc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003cd0:	e757      	b.n	8003b82 <__kernel_rem_pio2+0x1c2>
 8003cd2:	bf00      	nop
 8003cd4:	f3af 8000 	nop.w
	...
 8003ce4:	3ff00000 	.word	0x3ff00000
 8003ce8:	080045f8 	.word	0x080045f8
 8003cec:	40200000 	.word	0x40200000
 8003cf0:	3ff00000 	.word	0x3ff00000
 8003cf4:	3e700000 	.word	0x3e700000
 8003cf8:	41700000 	.word	0x41700000
 8003cfc:	3fe00000 	.word	0x3fe00000
 8003d00:	080045b8 	.word	0x080045b8
 8003d04:	1e62      	subs	r2, r4, #1
 8003d06:	ab0e      	add	r3, sp, #56	; 0x38
 8003d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003d10:	e7db      	b.n	8003cca <__kernel_rem_pio2+0x30a>
 8003d12:	a90e      	add	r1, sp, #56	; 0x38
 8003d14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	e78b      	b.n	8003c36 <__kernel_rem_pio2+0x276>
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003d24:	2900      	cmp	r1, #0
 8003d26:	d0fa      	beq.n	8003d1e <__kernel_rem_pio2+0x35e>
 8003d28:	9a08      	ldr	r2, [sp, #32]
 8003d2a:	4422      	add	r2, r4
 8003d2c:	00d2      	lsls	r2, r2, #3
 8003d2e:	a922      	add	r1, sp, #136	; 0x88
 8003d30:	18e3      	adds	r3, r4, r3
 8003d32:	9206      	str	r2, [sp, #24]
 8003d34:	440a      	add	r2, r1
 8003d36:	9302      	str	r3, [sp, #8]
 8003d38:	f10b 0108 	add.w	r1, fp, #8
 8003d3c:	f102 0308 	add.w	r3, r2, #8
 8003d40:	1c66      	adds	r6, r4, #1
 8003d42:	910a      	str	r1, [sp, #40]	; 0x28
 8003d44:	2500      	movs	r5, #0
 8003d46:	930d      	str	r3, [sp, #52]	; 0x34
 8003d48:	9b02      	ldr	r3, [sp, #8]
 8003d4a:	42b3      	cmp	r3, r6
 8003d4c:	da04      	bge.n	8003d58 <__kernel_rem_pio2+0x398>
 8003d4e:	461c      	mov	r4, r3
 8003d50:	e6a6      	b.n	8003aa0 <__kernel_rem_pio2+0xe0>
 8003d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d54:	2301      	movs	r3, #1
 8003d56:	e7e3      	b.n	8003d20 <__kernel_rem_pio2+0x360>
 8003d58:	9b06      	ldr	r3, [sp, #24]
 8003d5a:	18ef      	adds	r7, r5, r3
 8003d5c:	ab22      	add	r3, sp, #136	; 0x88
 8003d5e:	441f      	add	r7, r3
 8003d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d66:	f7fc fb89 	bl	800047c <__aeabi_i2d>
 8003d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d70:	e9c7 0100 	strd	r0, r1, [r7]
 8003d74:	eb03 0b05 	add.w	fp, r3, r5
 8003d78:	2700      	movs	r7, #0
 8003d7a:	f04f 0800 	mov.w	r8, #0
 8003d7e:	f04f 0900 	mov.w	r9, #0
 8003d82:	9b07      	ldr	r3, [sp, #28]
 8003d84:	429f      	cmp	r7, r3
 8003d86:	dd08      	ble.n	8003d9a <__kernel_rem_pio2+0x3da>
 8003d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8003d8c:	18eb      	adds	r3, r5, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8003d94:	3601      	adds	r6, #1
 8003d96:	3508      	adds	r5, #8
 8003d98:	e7d6      	b.n	8003d48 <__kernel_rem_pio2+0x388>
 8003d9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003d9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003da2:	f7fc fbd5 	bl	8000550 <__aeabi_dmul>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4640      	mov	r0, r8
 8003dac:	4649      	mov	r1, r9
 8003dae:	f7fc fa19 	bl	80001e4 <__adddf3>
 8003db2:	3701      	adds	r7, #1
 8003db4:	4680      	mov	r8, r0
 8003db6:	4689      	mov	r9, r1
 8003db8:	e7e3      	b.n	8003d82 <__kernel_rem_pio2+0x3c2>
 8003dba:	3d01      	subs	r5, #1
 8003dbc:	e741      	b.n	8003c42 <__kernel_rem_pio2+0x282>
 8003dbe:	f1ca 0000 	rsb	r0, sl, #0
 8003dc2:	ec47 6b10 	vmov	d0, r6, r7
 8003dc6:	f000 fa83 	bl	80042d0 <scalbn>
 8003dca:	ec57 6b10 	vmov	r6, r7, d0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4b99      	ldr	r3, [pc, #612]	; (8004038 <__kernel_rem_pio2+0x678>)
 8003dd2:	ee10 0a10 	vmov	r0, s0
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	f7fc fe40 	bl	8000a5c <__aeabi_dcmpge>
 8003ddc:	b1f8      	cbz	r0, 8003e1e <__kernel_rem_pio2+0x45e>
 8003dde:	2200      	movs	r2, #0
 8003de0:	4b96      	ldr	r3, [pc, #600]	; (800403c <__kernel_rem_pio2+0x67c>)
 8003de2:	4630      	mov	r0, r6
 8003de4:	4639      	mov	r1, r7
 8003de6:	f7fc fbb3 	bl	8000550 <__aeabi_dmul>
 8003dea:	f7fc fe4b 	bl	8000a84 <__aeabi_d2iz>
 8003dee:	4680      	mov	r8, r0
 8003df0:	f7fc fb44 	bl	800047c <__aeabi_i2d>
 8003df4:	2200      	movs	r2, #0
 8003df6:	4b90      	ldr	r3, [pc, #576]	; (8004038 <__kernel_rem_pio2+0x678>)
 8003df8:	f7fc fbaa 	bl	8000550 <__aeabi_dmul>
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4602      	mov	r2, r0
 8003e00:	4639      	mov	r1, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7fc f9ec 	bl	80001e0 <__aeabi_dsub>
 8003e08:	f7fc fe3c 	bl	8000a84 <__aeabi_d2iz>
 8003e0c:	1c65      	adds	r5, r4, #1
 8003e0e:	ab0e      	add	r3, sp, #56	; 0x38
 8003e10:	f10a 0a18 	add.w	sl, sl, #24
 8003e14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003e18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003e1c:	e719      	b.n	8003c52 <__kernel_rem_pio2+0x292>
 8003e1e:	4630      	mov	r0, r6
 8003e20:	4639      	mov	r1, r7
 8003e22:	f7fc fe2f 	bl	8000a84 <__aeabi_d2iz>
 8003e26:	ab0e      	add	r3, sp, #56	; 0x38
 8003e28:	4625      	mov	r5, r4
 8003e2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003e2e:	e710      	b.n	8003c52 <__kernel_rem_pio2+0x292>
 8003e30:	ab0e      	add	r3, sp, #56	; 0x38
 8003e32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003e36:	f7fc fb21 	bl	800047c <__aeabi_i2d>
 8003e3a:	4642      	mov	r2, r8
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	f7fc fb87 	bl	8000550 <__aeabi_dmul>
 8003e42:	2200      	movs	r2, #0
 8003e44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003e48:	4b7c      	ldr	r3, [pc, #496]	; (800403c <__kernel_rem_pio2+0x67c>)
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	f7fc fb7f 	bl	8000550 <__aeabi_dmul>
 8003e52:	3f01      	subs	r7, #1
 8003e54:	4680      	mov	r8, r0
 8003e56:	4689      	mov	r9, r1
 8003e58:	e708      	b.n	8003c6c <__kernel_rem_pio2+0x2ac>
 8003e5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8003e66:	f7fc fb73 	bl	8000550 <__aeabi_dmul>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4640      	mov	r0, r8
 8003e70:	4649      	mov	r1, r9
 8003e72:	f7fc f9b7 	bl	80001e4 <__adddf3>
 8003e76:	3701      	adds	r7, #1
 8003e78:	4680      	mov	r8, r0
 8003e7a:	4689      	mov	r9, r1
 8003e7c:	9b04      	ldr	r3, [sp, #16]
 8003e7e:	429f      	cmp	r7, r3
 8003e80:	dc01      	bgt.n	8003e86 <__kernel_rem_pio2+0x4c6>
 8003e82:	45ba      	cmp	sl, r7
 8003e84:	dae9      	bge.n	8003e5a <__kernel_rem_pio2+0x49a>
 8003e86:	ab4a      	add	r3, sp, #296	; 0x128
 8003e88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e8c:	e9c3 8900 	strd	r8, r9, [r3]
 8003e90:	f10a 0a01 	add.w	sl, sl, #1
 8003e94:	3e08      	subs	r6, #8
 8003e96:	e6f0      	b.n	8003c7a <__kernel_rem_pio2+0x2ba>
 8003e98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d85b      	bhi.n	8003f56 <__kernel_rem_pio2+0x596>
 8003e9e:	e8df f003 	tbb	[pc, r3]
 8003ea2:	264a      	.short	0x264a
 8003ea4:	0226      	.short	0x0226
 8003ea6:	ab9a      	add	r3, sp, #616	; 0x268
 8003ea8:	441c      	add	r4, r3
 8003eaa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003eae:	46a2      	mov	sl, r4
 8003eb0:	46ab      	mov	fp, r5
 8003eb2:	f1bb 0f00 	cmp.w	fp, #0
 8003eb6:	dc6c      	bgt.n	8003f92 <__kernel_rem_pio2+0x5d2>
 8003eb8:	46a2      	mov	sl, r4
 8003eba:	46ab      	mov	fp, r5
 8003ebc:	f1bb 0f01 	cmp.w	fp, #1
 8003ec0:	f300 8086 	bgt.w	8003fd0 <__kernel_rem_pio2+0x610>
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2d01      	cmp	r5, #1
 8003eca:	f300 80a0 	bgt.w	800400e <__kernel_rem_pio2+0x64e>
 8003ece:	9b02      	ldr	r3, [sp, #8]
 8003ed0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003ed4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 809e 	bne.w	800401a <__kernel_rem_pio2+0x65a>
 8003ede:	9b01      	ldr	r3, [sp, #4]
 8003ee0:	e9c3 7800 	strd	r7, r8, [r3]
 8003ee4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003ee8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003eec:	e033      	b.n	8003f56 <__kernel_rem_pio2+0x596>
 8003eee:	3408      	adds	r4, #8
 8003ef0:	ab4a      	add	r3, sp, #296	; 0x128
 8003ef2:	441c      	add	r4, r3
 8003ef4:	462e      	mov	r6, r5
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	2100      	movs	r1, #0
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	da3a      	bge.n	8003f74 <__kernel_rem_pio2+0x5b4>
 8003efe:	9b02      	ldr	r3, [sp, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03d      	beq.n	8003f80 <__kernel_rem_pio2+0x5c0>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f0a:	9c01      	ldr	r4, [sp, #4]
 8003f0c:	e9c4 2300 	strd	r2, r3, [r4]
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003f18:	f7fc f962 	bl	80001e0 <__aeabi_dsub>
 8003f1c:	ae4c      	add	r6, sp, #304	; 0x130
 8003f1e:	2401      	movs	r4, #1
 8003f20:	42a5      	cmp	r5, r4
 8003f22:	da30      	bge.n	8003f86 <__kernel_rem_pio2+0x5c6>
 8003f24:	9b02      	ldr	r3, [sp, #8]
 8003f26:	b113      	cbz	r3, 8003f2e <__kernel_rem_pio2+0x56e>
 8003f28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	9b01      	ldr	r3, [sp, #4]
 8003f30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003f34:	e00f      	b.n	8003f56 <__kernel_rem_pio2+0x596>
 8003f36:	ab9a      	add	r3, sp, #616	; 0x268
 8003f38:	441c      	add	r4, r3
 8003f3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8003f3e:	2000      	movs	r0, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	da10      	bge.n	8003f68 <__kernel_rem_pio2+0x5a8>
 8003f46:	9b02      	ldr	r3, [sp, #8]
 8003f48:	b113      	cbz	r3, 8003f50 <__kernel_rem_pio2+0x590>
 8003f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f4e:	4619      	mov	r1, r3
 8003f50:	9b01      	ldr	r3, [sp, #4]
 8003f52:	e9c3 0100 	strd	r0, r1, [r3]
 8003f56:	9b06      	ldr	r3, [sp, #24]
 8003f58:	f003 0007 	and.w	r0, r3, #7
 8003f5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003f60:	ecbd 8b02 	vpop	{d8}
 8003f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f6c:	f7fc f93a 	bl	80001e4 <__adddf3>
 8003f70:	3d01      	subs	r5, #1
 8003f72:	e7e6      	b.n	8003f42 <__kernel_rem_pio2+0x582>
 8003f74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f78:	f7fc f934 	bl	80001e4 <__adddf3>
 8003f7c:	3e01      	subs	r6, #1
 8003f7e:	e7bc      	b.n	8003efa <__kernel_rem_pio2+0x53a>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	e7c1      	b.n	8003f0a <__kernel_rem_pio2+0x54a>
 8003f86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003f8a:	f7fc f92b 	bl	80001e4 <__adddf3>
 8003f8e:	3401      	adds	r4, #1
 8003f90:	e7c6      	b.n	8003f20 <__kernel_rem_pio2+0x560>
 8003f92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8003f96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003f9a:	4640      	mov	r0, r8
 8003f9c:	ec53 2b17 	vmov	r2, r3, d7
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fa6:	f7fc f91d 	bl	80001e4 <__adddf3>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	f7fc f913 	bl	80001e0 <__aeabi_dsub>
 8003fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbe:	f7fc f911 	bl	80001e4 <__adddf3>
 8003fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fc6:	e9ca 0100 	strd	r0, r1, [sl]
 8003fca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8003fce:	e770      	b.n	8003eb2 <__kernel_rem_pio2+0x4f2>
 8003fd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8003fd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8003fd8:	4630      	mov	r0, r6
 8003fda:	ec53 2b17 	vmov	r2, r3, d7
 8003fde:	4639      	mov	r1, r7
 8003fe0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003fe4:	f7fc f8fe 	bl	80001e4 <__adddf3>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4680      	mov	r8, r0
 8003fee:	4689      	mov	r9, r1
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc f8f4 	bl	80001e0 <__aeabi_dsub>
 8003ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffc:	f7fc f8f2 	bl	80001e4 <__adddf3>
 8004000:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004004:	e9ca 0100 	strd	r0, r1, [sl]
 8004008:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800400c:	e756      	b.n	8003ebc <__kernel_rem_pio2+0x4fc>
 800400e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004012:	f7fc f8e7 	bl	80001e4 <__adddf3>
 8004016:	3d01      	subs	r5, #1
 8004018:	e756      	b.n	8003ec8 <__kernel_rem_pio2+0x508>
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	9a01      	ldr	r2, [sp, #4]
 800401e:	601f      	str	r7, [r3, #0]
 8004020:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004024:	605c      	str	r4, [r3, #4]
 8004026:	609d      	str	r5, [r3, #8]
 8004028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800402c:	60d3      	str	r3, [r2, #12]
 800402e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004032:	6110      	str	r0, [r2, #16]
 8004034:	6153      	str	r3, [r2, #20]
 8004036:	e78e      	b.n	8003f56 <__kernel_rem_pio2+0x596>
 8004038:	41700000 	.word	0x41700000
 800403c:	3e700000 	.word	0x3e700000

08004040 <__kernel_sin>:
 8004040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004044:	ec55 4b10 	vmov	r4, r5, d0
 8004048:	b085      	sub	sp, #20
 800404a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800404e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004052:	ed8d 1b00 	vstr	d1, [sp]
 8004056:	9002      	str	r0, [sp, #8]
 8004058:	da06      	bge.n	8004068 <__kernel_sin+0x28>
 800405a:	ee10 0a10 	vmov	r0, s0
 800405e:	4629      	mov	r1, r5
 8004060:	f7fc fd10 	bl	8000a84 <__aeabi_d2iz>
 8004064:	2800      	cmp	r0, #0
 8004066:	d051      	beq.n	800410c <__kernel_sin+0xcc>
 8004068:	4622      	mov	r2, r4
 800406a:	462b      	mov	r3, r5
 800406c:	4620      	mov	r0, r4
 800406e:	4629      	mov	r1, r5
 8004070:	f7fc fa6e 	bl	8000550 <__aeabi_dmul>
 8004074:	4682      	mov	sl, r0
 8004076:	468b      	mov	fp, r1
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4620      	mov	r0, r4
 800407e:	4629      	mov	r1, r5
 8004080:	f7fc fa66 	bl	8000550 <__aeabi_dmul>
 8004084:	a341      	add	r3, pc, #260	; (adr r3, 800418c <__kernel_sin+0x14c>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	4680      	mov	r8, r0
 800408c:	4689      	mov	r9, r1
 800408e:	4650      	mov	r0, sl
 8004090:	4659      	mov	r1, fp
 8004092:	f7fc fa5d 	bl	8000550 <__aeabi_dmul>
 8004096:	a33f      	add	r3, pc, #252	; (adr r3, 8004194 <__kernel_sin+0x154>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f7fc f8a0 	bl	80001e0 <__aeabi_dsub>
 80040a0:	4652      	mov	r2, sl
 80040a2:	465b      	mov	r3, fp
 80040a4:	f7fc fa54 	bl	8000550 <__aeabi_dmul>
 80040a8:	a33c      	add	r3, pc, #240	; (adr r3, 800419c <__kernel_sin+0x15c>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f7fc f899 	bl	80001e4 <__adddf3>
 80040b2:	4652      	mov	r2, sl
 80040b4:	465b      	mov	r3, fp
 80040b6:	f7fc fa4b 	bl	8000550 <__aeabi_dmul>
 80040ba:	a33a      	add	r3, pc, #232	; (adr r3, 80041a4 <__kernel_sin+0x164>)
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f7fc f88e 	bl	80001e0 <__aeabi_dsub>
 80040c4:	4652      	mov	r2, sl
 80040c6:	465b      	mov	r3, fp
 80040c8:	f7fc fa42 	bl	8000550 <__aeabi_dmul>
 80040cc:	a337      	add	r3, pc, #220	; (adr r3, 80041ac <__kernel_sin+0x16c>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc f887 	bl	80001e4 <__adddf3>
 80040d6:	9b02      	ldr	r3, [sp, #8]
 80040d8:	4606      	mov	r6, r0
 80040da:	460f      	mov	r7, r1
 80040dc:	b9db      	cbnz	r3, 8004116 <__kernel_sin+0xd6>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4650      	mov	r0, sl
 80040e4:	4659      	mov	r1, fp
 80040e6:	f7fc fa33 	bl	8000550 <__aeabi_dmul>
 80040ea:	a325      	add	r3, pc, #148	; (adr r3, 8004180 <__kernel_sin+0x140>)
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	f7fc f876 	bl	80001e0 <__aeabi_dsub>
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	f7fc fa2a 	bl	8000550 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	f7fc f86e 	bl	80001e4 <__adddf3>
 8004108:	4604      	mov	r4, r0
 800410a:	460d      	mov	r5, r1
 800410c:	ec45 4b10 	vmov	d0, r4, r5
 8004110:	b005      	add	sp, #20
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004116:	2200      	movs	r2, #0
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <__kernel_sin+0x148>)
 800411a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800411e:	f7fc fa17 	bl	8000550 <__aeabi_dmul>
 8004122:	4632      	mov	r2, r6
 8004124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004128:	463b      	mov	r3, r7
 800412a:	4640      	mov	r0, r8
 800412c:	4649      	mov	r1, r9
 800412e:	f7fc fa0f 	bl	8000550 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800413a:	f7fc f851 	bl	80001e0 <__aeabi_dsub>
 800413e:	4652      	mov	r2, sl
 8004140:	465b      	mov	r3, fp
 8004142:	f7fc fa05 	bl	8000550 <__aeabi_dmul>
 8004146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800414a:	f7fc f849 	bl	80001e0 <__aeabi_dsub>
 800414e:	a30c      	add	r3, pc, #48	; (adr r3, 8004180 <__kernel_sin+0x140>)
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	4640      	mov	r0, r8
 800415a:	4649      	mov	r1, r9
 800415c:	f7fc f9f8 	bl	8000550 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	f7fc f83c 	bl	80001e4 <__adddf3>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4620      	mov	r0, r4
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc f834 	bl	80001e0 <__aeabi_dsub>
 8004178:	e7c6      	b.n	8004108 <__kernel_sin+0xc8>
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	55555549 	.word	0x55555549
 8004184:	3fc55555 	.word	0x3fc55555
 8004188:	3fe00000 	.word	0x3fe00000
 800418c:	5acfd57c 	.word	0x5acfd57c
 8004190:	3de5d93a 	.word	0x3de5d93a
 8004194:	8a2b9ceb 	.word	0x8a2b9ceb
 8004198:	3e5ae5e6 	.word	0x3e5ae5e6
 800419c:	57b1fe7d 	.word	0x57b1fe7d
 80041a0:	3ec71de3 	.word	0x3ec71de3
 80041a4:	19c161d5 	.word	0x19c161d5
 80041a8:	3f2a01a0 	.word	0x3f2a01a0
 80041ac:	1110f8a6 	.word	0x1110f8a6
 80041b0:	3f811111 	.word	0x3f811111

080041b4 <fabs>:
 80041b4:	ec51 0b10 	vmov	r0, r1, d0
 80041b8:	ee10 2a10 	vmov	r2, s0
 80041bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80041c0:	ec43 2b10 	vmov	d0, r2, r3
 80041c4:	4770      	bx	lr
	...

080041c8 <floor>:
 80041c8:	ec51 0b10 	vmov	r0, r1, d0
 80041cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80041d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80041d8:	2e13      	cmp	r6, #19
 80041da:	460c      	mov	r4, r1
 80041dc:	ee10 5a10 	vmov	r5, s0
 80041e0:	4680      	mov	r8, r0
 80041e2:	dc34      	bgt.n	800424e <floor+0x86>
 80041e4:	2e00      	cmp	r6, #0
 80041e6:	da16      	bge.n	8004216 <floor+0x4e>
 80041e8:	a335      	add	r3, pc, #212	; (adr r3, 80042c0 <floor+0xf8>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fb fff9 	bl	80001e4 <__adddf3>
 80041f2:	2200      	movs	r2, #0
 80041f4:	2300      	movs	r3, #0
 80041f6:	f7fc fc3b 	bl	8000a70 <__aeabi_dcmpgt>
 80041fa:	b148      	cbz	r0, 8004210 <floor+0x48>
 80041fc:	2c00      	cmp	r4, #0
 80041fe:	da59      	bge.n	80042b4 <floor+0xec>
 8004200:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004204:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <floor+0x100>)
 8004206:	432b      	orrs	r3, r5
 8004208:	2500      	movs	r5, #0
 800420a:	42ab      	cmp	r3, r5
 800420c:	bf18      	it	ne
 800420e:	4614      	movne	r4, r2
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	e025      	b.n	8004262 <floor+0x9a>
 8004216:	4f2d      	ldr	r7, [pc, #180]	; (80042cc <floor+0x104>)
 8004218:	4137      	asrs	r7, r6
 800421a:	ea01 0307 	and.w	r3, r1, r7
 800421e:	4303      	orrs	r3, r0
 8004220:	d01f      	beq.n	8004262 <floor+0x9a>
 8004222:	a327      	add	r3, pc, #156	; (adr r3, 80042c0 <floor+0xf8>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fb ffdc 	bl	80001e4 <__adddf3>
 800422c:	2200      	movs	r2, #0
 800422e:	2300      	movs	r3, #0
 8004230:	f7fc fc1e 	bl	8000a70 <__aeabi_dcmpgt>
 8004234:	2800      	cmp	r0, #0
 8004236:	d0eb      	beq.n	8004210 <floor+0x48>
 8004238:	2c00      	cmp	r4, #0
 800423a:	bfbe      	ittt	lt
 800423c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004240:	fa43 f606 	asrlt.w	r6, r3, r6
 8004244:	19a4      	addlt	r4, r4, r6
 8004246:	ea24 0407 	bic.w	r4, r4, r7
 800424a:	2500      	movs	r5, #0
 800424c:	e7e0      	b.n	8004210 <floor+0x48>
 800424e:	2e33      	cmp	r6, #51	; 0x33
 8004250:	dd0b      	ble.n	800426a <floor+0xa2>
 8004252:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004256:	d104      	bne.n	8004262 <floor+0x9a>
 8004258:	ee10 2a10 	vmov	r2, s0
 800425c:	460b      	mov	r3, r1
 800425e:	f7fb ffc1 	bl	80001e4 <__adddf3>
 8004262:	ec41 0b10 	vmov	d0, r0, r1
 8004266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800426a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	fa23 f707 	lsr.w	r7, r3, r7
 8004276:	4207      	tst	r7, r0
 8004278:	d0f3      	beq.n	8004262 <floor+0x9a>
 800427a:	a311      	add	r3, pc, #68	; (adr r3, 80042c0 <floor+0xf8>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f7fb ffb0 	bl	80001e4 <__adddf3>
 8004284:	2200      	movs	r2, #0
 8004286:	2300      	movs	r3, #0
 8004288:	f7fc fbf2 	bl	8000a70 <__aeabi_dcmpgt>
 800428c:	2800      	cmp	r0, #0
 800428e:	d0bf      	beq.n	8004210 <floor+0x48>
 8004290:	2c00      	cmp	r4, #0
 8004292:	da02      	bge.n	800429a <floor+0xd2>
 8004294:	2e14      	cmp	r6, #20
 8004296:	d103      	bne.n	80042a0 <floor+0xd8>
 8004298:	3401      	adds	r4, #1
 800429a:	ea25 0507 	bic.w	r5, r5, r7
 800429e:	e7b7      	b.n	8004210 <floor+0x48>
 80042a0:	2301      	movs	r3, #1
 80042a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80042a6:	fa03 f606 	lsl.w	r6, r3, r6
 80042aa:	4435      	add	r5, r6
 80042ac:	4545      	cmp	r5, r8
 80042ae:	bf38      	it	cc
 80042b0:	18e4      	addcc	r4, r4, r3
 80042b2:	e7f2      	b.n	800429a <floor+0xd2>
 80042b4:	2500      	movs	r5, #0
 80042b6:	462c      	mov	r4, r5
 80042b8:	e7aa      	b.n	8004210 <floor+0x48>
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w
 80042c0:	8800759c 	.word	0x8800759c
 80042c4:	7e37e43c 	.word	0x7e37e43c
 80042c8:	bff00000 	.word	0xbff00000
 80042cc:	000fffff 	.word	0x000fffff

080042d0 <scalbn>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	ec55 4b10 	vmov	r4, r5, d0
 80042d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80042da:	4606      	mov	r6, r0
 80042dc:	462b      	mov	r3, r5
 80042de:	b9aa      	cbnz	r2, 800430c <scalbn+0x3c>
 80042e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80042e4:	4323      	orrs	r3, r4
 80042e6:	d03b      	beq.n	8004360 <scalbn+0x90>
 80042e8:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <scalbn+0xe0>)
 80042ea:	4629      	mov	r1, r5
 80042ec:	2200      	movs	r2, #0
 80042ee:	ee10 0a10 	vmov	r0, s0
 80042f2:	f7fc f92d 	bl	8000550 <__aeabi_dmul>
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <scalbn+0xe4>)
 80042f8:	429e      	cmp	r6, r3
 80042fa:	4604      	mov	r4, r0
 80042fc:	460d      	mov	r5, r1
 80042fe:	da12      	bge.n	8004326 <scalbn+0x56>
 8004300:	a327      	add	r3, pc, #156	; (adr r3, 80043a0 <scalbn+0xd0>)
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f7fc f923 	bl	8000550 <__aeabi_dmul>
 800430a:	e009      	b.n	8004320 <scalbn+0x50>
 800430c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004310:	428a      	cmp	r2, r1
 8004312:	d10c      	bne.n	800432e <scalbn+0x5e>
 8004314:	ee10 2a10 	vmov	r2, s0
 8004318:	4620      	mov	r0, r4
 800431a:	4629      	mov	r1, r5
 800431c:	f7fb ff62 	bl	80001e4 <__adddf3>
 8004320:	4604      	mov	r4, r0
 8004322:	460d      	mov	r5, r1
 8004324:	e01c      	b.n	8004360 <scalbn+0x90>
 8004326:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800432a:	460b      	mov	r3, r1
 800432c:	3a36      	subs	r2, #54	; 0x36
 800432e:	4432      	add	r2, r6
 8004330:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004334:	428a      	cmp	r2, r1
 8004336:	dd0b      	ble.n	8004350 <scalbn+0x80>
 8004338:	ec45 4b11 	vmov	d1, r4, r5
 800433c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80043a8 <scalbn+0xd8>
 8004340:	f000 f83c 	bl	80043bc <copysign>
 8004344:	a318      	add	r3, pc, #96	; (adr r3, 80043a8 <scalbn+0xd8>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	ec51 0b10 	vmov	r0, r1, d0
 800434e:	e7da      	b.n	8004306 <scalbn+0x36>
 8004350:	2a00      	cmp	r2, #0
 8004352:	dd08      	ble.n	8004366 <scalbn+0x96>
 8004354:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004358:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800435c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004360:	ec45 4b10 	vmov	d0, r4, r5
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800436a:	da0d      	bge.n	8004388 <scalbn+0xb8>
 800436c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004370:	429e      	cmp	r6, r3
 8004372:	ec45 4b11 	vmov	d1, r4, r5
 8004376:	dce1      	bgt.n	800433c <scalbn+0x6c>
 8004378:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80043a0 <scalbn+0xd0>
 800437c:	f000 f81e 	bl	80043bc <copysign>
 8004380:	a307      	add	r3, pc, #28	; (adr r3, 80043a0 <scalbn+0xd0>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	e7e0      	b.n	800434a <scalbn+0x7a>
 8004388:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800438c:	3236      	adds	r2, #54	; 0x36
 800438e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004392:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004396:	4620      	mov	r0, r4
 8004398:	4629      	mov	r1, r5
 800439a:	2200      	movs	r2, #0
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <scalbn+0xe8>)
 800439e:	e7b2      	b.n	8004306 <scalbn+0x36>
 80043a0:	c2f8f359 	.word	0xc2f8f359
 80043a4:	01a56e1f 	.word	0x01a56e1f
 80043a8:	8800759c 	.word	0x8800759c
 80043ac:	7e37e43c 	.word	0x7e37e43c
 80043b0:	43500000 	.word	0x43500000
 80043b4:	ffff3cb0 	.word	0xffff3cb0
 80043b8:	3c900000 	.word	0x3c900000

080043bc <copysign>:
 80043bc:	ec51 0b10 	vmov	r0, r1, d0
 80043c0:	ee11 0a90 	vmov	r0, s3
 80043c4:	ee10 2a10 	vmov	r2, s0
 80043c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80043cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80043d0:	ea41 0300 	orr.w	r3, r1, r0
 80043d4:	ec43 2b10 	vmov	d0, r2, r3
 80043d8:	4770      	bx	lr
	...

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
